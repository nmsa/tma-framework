{"version":3,"file":"static/js/158.a0225820.chunk.js","mappings":"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","sources":["components/Plot.js","pages/Resources/PlotResourceMetricsPage.js","../node_modules/file-saver/src/FileSaver.js","../node_modules/semantic-ui-react/dist/es/elements/Step/StepDescription.js","../node_modules/semantic-ui-react/dist/es/elements/Step/StepTitle.js","../node_modules/semantic-ui-react/dist/es/elements/Step/StepContent.js","../node_modules/semantic-ui-react/dist/es/elements/Step/StepGroup.js","../node_modules/semantic-ui-react/dist/es/elements/Step/Step.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\nChart as ChartJS,\r\nCategoryScale,\r\nLineController,\r\nLinearScale,\r\nPointElement,\r\nLineElement,\r\nTitle,\r\nTooltip,\r\nLegend,\r\nTimeScale,\r\nScatterController,\r\n} from 'chart.js';\r\nimport {Chart, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent} from 'react-chartjs-2';\r\nimport {Loader, Button, Icon} from 'semantic-ui-react';\r\nimport { useRef } from 'react';\r\nimport html2canvas from \"html2canvas\";\r\nimport jsPDF from 'jspdf';\r\nimport 'date-fns';\r\n\r\nfunction Plot(props){\r\n    \r\n    ChartJS.register(\r\n        CategoryScale,\r\n        LineController,\r\n        LinearScale,\r\n        PointElement,\r\n        LineElement,\r\n        Title,\r\n        Tooltip,\r\n        Legend,\r\n        TimeScale,\r\n        ScatterController\r\n    );\r\n\r\n    const plotPath = props.plotPath;\r\n\r\n    //used to control the display of the chart after font sizes have been changed/adapted\r\n    const[adaptedFontSizes,setAdaptedFontSizes]  = useState(false);\r\n    const adaptedFontSizesRef = useRef(adaptedFontSizes);\r\n    adaptedFontSizesRef.current = adaptedFontSizes\r\n\r\n    //used to show a loading state on the button that generates a PDF Image from the chart\r\n    const [chartPDFGen,setChartPDFGen] = useState(false);\r\n    \r\n    const chartRef = useRef();\r\n\r\n    //raw or metric data points dataset\r\n    let dataSetMetric = {\r\n        //\"label\" and \"data\" properties missing from input\r\n        type: \"line\",\r\n        borderColor: '#007bff',\r\n        backgroundColor: '#007bff',\r\n        order: 2,\r\n        pointStyle: \"circle\",\r\n        radius: 7,\r\n        hoverRadius: 10,\r\n        parsing: {\r\n            xAxisKey: \"valueTime\",\r\n            yAxisKey: \"value\"\r\n        }\r\n    }\r\n\r\n    //plans dataset\r\n    let dataSetPlans = {\r\n        //\"data\" property missing from input\r\n        label: 'Adaptation Plans',\r\n        type: \"scatter\",\r\n        borderColor: 'black',\r\n        backgroundColor: 'white',\r\n        pointStyle: \"rectRot\",\r\n        radius: 7,\r\n        hoverRadius: 10,\r\n        order: 1,\r\n        parsing: {\r\n            xAxisKey: \"valueTime\",\r\n            yAxisKey: \"value\"\r\n        }\r\n    }\r\n\r\n    //raw or metric data points dataset\r\n    let dataSetSimulation = {\r\n        //\"label\" and \"data\" properties missing from input\r\n        type: \"line\",\r\n        borderColor: '#ff0000',\r\n        backgroundColor: '#ff0000',\r\n        order: 3,\r\n        pointStyle: \"circle\",\r\n        radius: 7,\r\n        hoverRadius: 10,\r\n        parsing: {\r\n            xAxisKey: \"valueTime\",\r\n            yAxisKey: \"value\"\r\n        }\r\n    }\r\n\r\n    // \"datasets\" is an array of dataset objects where each object holds its properties and the y and x axis values.  \r\n    const [plotData,setPlotData] = useState(\r\n        {\r\n            datasets: []    \r\n        }\r\n    )\r\n\r\n    //function that handles what information is shown on the plot for a point that is hovered by the user\r\n    function plotLabelHandler(tooltipItem){\r\n        let label\r\n        //if datasetIndex is 1, then it is the dataset relative to Plans\r\n        if(tooltipItem.datasetIndex === 1){\r\n            label = \"Plan Id: \" + tooltipItem.raw.planId\r\n        }\r\n        else{\r\n            //round the value to 3 decimal places\r\n            label = \"Value: \" + Math.round(tooltipItem.raw.value * 1000) / 1000; \r\n        }\r\n        \r\n        return label;\r\n    }\r\n\r\n    const [plotOptions,setPlotOptions] = useState(\r\n        {\r\n            animation: {\r\n                duration: 0\r\n            },\r\n            hover: {\r\n                animationDuration: 0,\r\n            },\r\n            responsiveAnimationDuration: 0,\r\n            maintainAspectRatio: true,\r\n            responsive: true,\r\n            plugins: {\r\n                legend: {\r\n                    position: 'top',\r\n                    labels: {\r\n                        usePointStyle: true,\r\n                    },\r\n                    reverse: true\r\n                },\r\n                /* //In case it is wanted to show a title for the Chart\r\n                title: {\r\n                    display: true,\r\n                    text: 'Chart.js Line Chart',\r\n                },*/\r\n                tooltip: {\r\n                    usePointStyle: true,\r\n                    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n                    callbacks: {\r\n                        label: plotLabelHandler\r\n                    },\r\n                }\r\n            },\r\n            scales:{\r\n                x: {\r\n                    //this will make values received from api, which are in epoch millisecond, to be converted into the local timezone\r\n                    //and formated into the specified formats\r\n                    type: 'time',\r\n                    parsing: 'false',\r\n                    time: {\r\n                        displayFormats:{\r\n                            second: \"dd/MM/yyyy, HH:mm:ss\",\r\n                            minute: \"dd/MM/yyyy, HH:mm:ss\",\r\n                            hour: \"dd/MM/yyyy, HH:mm:ss\",\r\n                            day: \"dd/MM/yyyy, HH:mm:ss\",\r\n                            week: \"dd/MM/yyyy, HH:mm:ss\",\r\n                            month: \"dd/MM/yyyy, HH:mm:ss\",\r\n                            quarter: \"dd/MM/yyyy, HH:mm:ss\",\r\n                            year: \"dd/MM/yyyy, HH:mm:ss\",\r\n                        },\r\n                        minUnit: \"second\",\r\n                        tooltipFormat:\"dd/MM/yyyy, HH:mm:ss\",\r\n                    },\r\n                    title: {\r\n                        display: true,\r\n                        text: \"Timestamp (dd/MM/yyyy, HH:mm:ss)\",\r\n                        color: '#0057b3',\r\n                        font: {\r\n                            family: 'Helvetica',\r\n                            weight: 'bold',\r\n                        },\r\n                    },\r\n                    ticks: {\r\n                        font: {\r\n                        },\r\n                        color: \"#000000\",\r\n                        autoSkip: true,\r\n                    },\r\n                    min: props.startDate,\r\n                    max: props.endDate,\r\n                },\r\n                y: {\r\n                    beginAtZero: true,\r\n                    title: {\r\n                        display: true,\r\n                        text: props.plotData.ylabel,\r\n                        color: '#0057b3',\r\n                        font: {\r\n                            family: 'Helvetica',\r\n                            weight: 'bold',\r\n                        },\r\n                    },\r\n                    ticks: {\r\n                        maxTicksLimit: 20,\r\n                        font: {\r\n                        },\r\n                        color: \"#000000\"\r\n                    },\r\n                } \r\n            },\r\n            onResize: resetFontVariables\r\n        }\r\n    )\r\n\r\n    //this is done to readapt font sizes in case of a resize of the page\r\n    function resetFontVariables(){\r\n        let currLocation = window.location.href.split(\"/\")\r\n        if(currLocation[currLocation.length-1] !== plotPath){\r\n           return\r\n        }\r\n        setAdaptedFontSizes(false)\r\n    }\r\n\r\n    function chartClickHandler(ev){\r\n        console.log(getDatasetAtEvent(chartRef.current, ev));\r\n        console.log(getElementAtEvent(chartRef.current, ev));\r\n        console.log(getElementsAtEvent(chartRef.current, ev));\r\n    }\r\n\r\n    useEffect(() => {\r\n        let datasetsTemp = []\r\n        datasetsTemp.push(\r\n            {\r\n                ...dataSetMetric,\r\n                label: props.plotData.dataSetMetric.label,\r\n                data: props.plotData.dataSetMetric.data\r\n            }\r\n        )\r\n        if(props.plotData.plansData !== undefined){\r\n            datasetsTemp.push(\r\n                {\r\n                    ...dataSetPlans,\r\n                    data: props.plotData.plansData\r\n                }\r\n            )\r\n        }\r\n        if(props.plotData.simulationData !== undefined){\r\n            datasetsTemp.push(\r\n                {\r\n                    ...dataSetSimulation,\r\n                    label: \"Simulation Values\",\r\n                    data: props.plotData.simulationData\r\n                }\r\n            )\r\n        }\r\n        setPlotData(\r\n            {\r\n                ...plotData,\r\n                datasets: datasetsTemp\r\n            }\r\n        )\r\n    },[props])\r\n\r\n    useEffect(() => {\r\n        setPlotOptions((prevState) => {\r\n            let newState = JSON.parse(JSON.stringify(prevState))\r\n            newState.scales.x.min = props.startDate\r\n            newState.scales.x.max = props.endDate\r\n            //the next lines are needed because json way to copy one object into another doesn't support types beyond\r\n            //primitives(string,number...). In this case, onResize and label are functions\r\n            newState.onResize = prevState.onResize\r\n            newState.plugins.tooltip.callbacks.label = prevState.plugins.tooltip.callbacks.label\r\n            return newState\r\n        })\r\n    },[props.startDate])\r\n\r\n    const myplugins = [{\r\n        /* Adjust font sizes according to chart size */\r\n        beforeDraw: function(c) {\r\n            if(!adaptedFontSizesRef.current){\r\n                var chartHeight = c.height\r\n                var ticksFontSize = chartHeight * 3 / 100\r\n                var axisLabelFontSize = chartHeight * 5 / 100\r\n                var legendFontSize = chartHeight * 3.5 / 100\r\n\r\n                setPlotOptions((prevState)=>{\r\n                    let newOptions = JSON.parse(JSON.stringify(prevState))\r\n                    newOptions.scales.x.ticks.font.size = ticksFontSize\r\n                    newOptions.scales.y.ticks.font.size = ticksFontSize\r\n\r\n                    newOptions.scales.x.title.font.size = axisLabelFontSize\r\n                    newOptions.scales.y.title.font.size = axisLabelFontSize\r\n\r\n                    newOptions.plugins.legend.labels.font = {size: legendFontSize}\r\n                    //the next lines are needed because json way to copy one object into another doesn't support types beyond\r\n                    //primitives(string,number...). In this case, onResize and label are functions\r\n                    newOptions.onResize = prevState.onResize\r\n                    newOptions.plugins.tooltip.callbacks.label = prevState.plugins.tooltip.callbacks.label\r\n                    return newOptions\r\n                })\r\n                setAdaptedFontSizes(true)\r\n\r\n            }\r\n        }\r\n            \r\n    }]\r\n\r\n    return(\r\n        plotData.datasets.length === 0 ?\r\n            <Loader active inline='centered'> Preparing chart </Loader>\r\n        :    \r\n            <div>\r\n                <Button color=\"grey\"\r\n                    floated='right'\r\n                    loading = {chartPDFGen}\r\n                    onClick={ () => {\r\n                        setChartPDFGen(true)\r\n                        \r\n                        let imgFile = chartRef.current.toBase64Image(\"image/png\",1);\r\n                        let doc = new jsPDF('landscape',\"px\",[chartRef.current.width,chartRef.current.height]);\r\n                        doc.addImage(imgFile, \"PNG\", 0, 0,chartRef.current.width, chartRef.current.height);\r\n                        doc.save('Plot.pdf');\r\n                        setChartPDFGen((prevState) => {return !prevState})\r\n\r\n                        /*let canvasElem = chartRef.current.canvas;\r\n                        //html2canvas used to improve quality. scale of 5 increases resolution in 5x\r\n                        html2canvas(canvasElem, {scale: 3}).then((canvas) => {\r\n                            let imgFile = canvas.toDataURL(\"image/png\", 1);\r\n                            let doc = new jsPDF('landscape',\"px\",[canvas.width,canvas.height],true,true);\r\n                            doc.addImage(imgFile, \"PNG\", 0, 0, canvas.width,canvas.height);\r\n                            doc.save('Plot.pdf');\r\n                            setChartPDFGen((prevState) => {return !prevState})\r\n                        })*/\r\n                    }}\r\n                >\r\n                    <Icon name='download' />\r\n                    Download Chart\r\n                </Button>\r\n                <div style={{position: \"relative\", width: \"100%\", height: \"100%\", display:\"flex\"}}>\r\n                    <Chart ref={chartRef} onClick={chartClickHandler} options={plotOptions} data={plotData} \r\n                        plugins={adaptedFontSizes? null: myplugins}\r\n                        style={{display: adaptedFontSizes? \"block\" : \"none\"}}\r\n                    />\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Plot;","import React, { useEffect, useState } from 'react';\r\nimport { Container, Grid, Segment, Divider, Header, Form, Loader, Step, Label, Button } from 'semantic-ui-react';\r\nimport ApiModule from '../../utils/api/ApiModule';\r\nimport DropDownDataFormat from '../../utils/dropDownDataFormat/DropDownDataFormat';\r\nimport TreeRender from '../../utils/treeRendering/TreeRender';\r\nimport ValidInputs from '../../utils/ValidInputs';\r\nimport Plot from \"../../components/Plot\";\r\nimport 'chartjs-adapter-date-fns';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { saveAs } from 'file-saver';\r\n\r\nlet liveDataAPIRequestFunctionTimer = null;\r\n\r\nfunction PlotResourceMetricsPage(){ \r\n    let navigate = useNavigate();\r\n    \r\n    const [activeResources, setActiveResources] = useState(null);\r\n    const [chosenResource, setChosenResource] = useState(null);\r\n    const [configurationProfile, setConfigurationProfile] = useState(null);\r\n    const [qualityModel, setQualityModel] = useState(null);\r\n    const [listOfMetrics, setListOfMetrics] = useState(null);\r\n    const [formData, setFormData] = useState(\r\n        {\r\n            resourceId: null,\r\n            dataType: \"raw\",\r\n            metricId: null,\r\n            startDate: null,\r\n            endDate: null,\r\n            livePlot: false,\r\n            addPlansInfo: false\r\n        }\r\n    );\r\n    \r\n\r\n    //used to disable the appearence of errors when a 1st submission of the form hasn't been done\r\n    const [formErrorDisplay, setFormErrorDisplay] = useState(false);\r\n    const [step, setStep] = useState(1);\r\n    \r\n    useEffect(()=>{\r\n        async function makeAPIRequest(){\r\n            let unprocessedResources = await ApiModule().getActiveResources();\r\n            DropDownDataFormat().convertResources(unprocessedResources,setActiveResources)\r\n        }\r\n        makeAPIRequest()\r\n    },[])\r\n\r\n    // data to pass to the Plot component\r\n    const [plotData,setPlotData] = useState(null)\r\n\r\n    function cleanStep2FormData(){\r\n        //set ChosenResource null so that when step1 is submitted, on step2 the indication of loading data will appear\r\n        setChosenResource(null);\r\n        setFormData(\r\n            {\r\n                ...formData,\r\n                metricId: null,\r\n                startDate: null,\r\n                endDate: null,\r\n                addPlansInfo: false,\r\n                livePlot: false\r\n            }\r\n        )\r\n    }\r\n\r\n    function formDataOnChangeHandler(ev, props){\r\n        let newFormData = JSON.parse(JSON.stringify(formData))\r\n        newFormData[props.name] = props.value\r\n        setFormData(newFormData)\r\n    }\r\n\r\n    async function submitStep1Handler(ev){\r\n        ev.preventDefault()\r\n        if (ValidInputs().validStringOrDropDownSelection(formData.resourceId)){\r\n            //remore error appearance on next step, using this same variable used on step 1 to control error messages displaying\r\n            setFormErrorDisplay(false)\r\n            //request render of step 2\r\n            setStep(2)\r\n\r\n            //get Resource Weights And Metrics Tree by performing synchronous request to the api\r\n            let res = await ApiModule().getResourceWeightsAndMetricsTree(formData.resourceId)\r\n            setConfigurationProfile(res.configurationProfile)\r\n            setQualityModel(res.qualityModel)\r\n\r\n            let queryParams\r\n            if(formData.dataType === \"raw\"){\r\n                queryParams = {leafAttributes: true}\r\n            }\r\n            else{\r\n                queryParams = {leafAttributes: false}\r\n            }\r\n            console.log(res)\r\n            \r\n            //get List Of Metrics depending on selected input(raw or metric data)\r\n            res = await ApiModule().getConfigurationProfileListOfMetrics(res.configurationProfile.configurationProfileId, queryParams)\r\n            DropDownDataFormat().convertMetrics(res,setListOfMetrics)\r\n\r\n            //set a value on this variable so step 2 is informed to stop showing feedback of loading contents \r\n            setChosenResource(formData.resourceId)\r\n        }\r\n        else{\r\n            //enable error display\r\n            setFormErrorDisplay(true)\r\n        }\r\n    }\r\n\r\n    async function submitStep2Handler(ev){\r\n        ev.preventDefault()\r\n        if (ValidInputs().validStringOrDropDownSelection(formData.metricId)){\r\n            if(formData.livePlot || \r\n                (ValidInputs().validTimeStamp(formData.startDate) && ValidInputs().validTimeStamp(formData.endDate))   ){\r\n                \r\n                setStep(3)\r\n                let queryParams = {\r\n                    metricId: formData.metricId,\r\n                    dataType: formData.dataType,\r\n                    addPlansInfo: formData.addPlansInfo\r\n                }\r\n\r\n                //if it is not a live plot, then dates were defined in inputs\r\n                if(!formData.livePlot){\r\n                    queryParams.startDate = new Date(formData.startDate).valueOf() / 1000\r\n                    queryParams.endDate = new Date(formData.endDate).valueOf() / 1000\r\n                }\r\n                else{\r\n                    let currDate = new Date();\r\n                    //subtract 60000 to value of currDate to get the timestamp 1 minute ago\r\n                    let currDateMinus1Minute = new Date(currDate.getTime() - 60000)\r\n\r\n                    //update form data, because it may be used if simulate metrics button is pressed\r\n                    setFormData({\r\n                        ...formData,\r\n                        startDate: currDateMinus1Minute,\r\n                        endDate: currDate\r\n                    })\r\n\r\n                    queryParams.startDate = parseInt(currDateMinus1Minute.valueOf() / 1000)\r\n                    queryParams.endDate = parseInt(currDate.valueOf() / 1000)\r\n                }\r\n                \r\n                console.log(queryParams)\r\n                //get data to plot from API \r\n                let res = await ApiModule().getResourceData(formData.resourceId, queryParams)\r\n\r\n                let dataSetMetric = {\r\n                    label: listOfMetrics.find(elem => elem.value === formData.metricId).text.replace(/\\[.*\\] /,\"\"),\r\n                    data: res[0].listOfDataPoints\r\n                }   \r\n\r\n                let newPlotData = {}\r\n                newPlotData.dataSetMetric = dataSetMetric\r\n                \r\n                //define y axis label based on being raw data or metric data. If it is raw data then use the description \r\n                //information retrieved by the API\r\n                if(formData.dataType === \"raw\"){\r\n                    newPlotData.ylabel = res[0].descriptionInfo\r\n                }\r\n                else{\r\n                    newPlotData.ylabel = \"Metric value ( 0<= y <=1)\"\r\n\r\n                    //access plansInfo data points and add them to the plot if addPlans option was set \r\n                    if(formData.addPlansInfo){\r\n                        res[0].listOfPlansInfo.forEach((item, index, array) => { \r\n                            //set y coordinate of plans dataset points to the same value of the metrics dataset\r\n                            item.value = res[0].listOfDataPoints.find(elem => elem.valueTime === item.valueTime).value\r\n                        })\r\n\r\n                        //set the plans dataset after processing y coordinate.\r\n                        newPlotData.plansData = res[0].listOfPlansInfo\r\n                    }\r\n                }\r\n\r\n                //update state variable to trigger render\r\n                setPlotData(newPlotData)\r\n                \r\n                //if live plot was set, perform API data request each second\r\n                if(formData.livePlot){\r\n                    liveDataAPIRequestFunctionTimer = setInterval(step3LiveData,1000)\r\n                }\r\n                return\r\n            }\r\n        }\r\n        // if form validation wasn't successful, then present form field errors\r\n        setFormErrorDisplay(true)\r\n    }\r\n    \r\n    async function step3LiveData(){\r\n        //get current location to verify if navbar was clicked and thereby stop executing this function in a loop\r\n        let currLocation = window.location.href.split(\"/\")\r\n        //May have to change this path when more features considering resources are added\r\n        if(currLocation[currLocation.length-1] !== \"getResources\"){\r\n            clearInterval(liveDataAPIRequestFunctionTimer);\r\n            return;\r\n        }\r\n        \r\n        let queryParams = {\r\n            metricId: formData.metricId,\r\n            dataType: formData.dataType,\r\n            addPlansInfo: formData.addPlansInfo\r\n        }\r\n\r\n        let currDate = new Date();\r\n        //subtract 60000 to value of currDate to get the timestamp 1 minute ago\r\n        let currDateMinus1Minute = new Date(currDate.getTime() - 60000)\r\n        \r\n        //update form data, because it may be used if simulate metrics button is pressed\r\n        setFormData({\r\n            ...formData,\r\n            startDate: currDateMinus1Minute,\r\n            endDate: currDate\r\n        })\r\n\r\n        queryParams.startDate = parseInt(currDateMinus1Minute.valueOf() / 1000)\r\n        queryParams.endDate = parseInt(currDate.valueOf() / 1000)\r\n\r\n        //get data to plot from API \r\n        let res = await ApiModule().getResourceData(formData.resourceId, queryParams)\r\n\r\n        //access plansInfo data points\r\n        if(formData.addPlansInfo){\r\n            res[0].listOfPlansInfo.forEach((item, index, array) => { \r\n                //set y coordinate of plans dataset points to the same value of the metrics dataset\r\n                item.value = res[0].listOfDataPoints.find(elem => elem.valueTime === item.valueTime).value\r\n            })\r\n        }\r\n\r\n        //update state variable to trigger render. The changes have to be made upon last state submitted that not might be \r\n        //rendered yet. That's why prevStatePlotData is used to get last state even though it is not rendered\r\n        setPlotData((prevStatePlotData) => {\r\n                let newPlotData = JSON.parse(JSON.stringify(prevStatePlotData))\r\n                newPlotData.dataSetMetric.data = res[0].listOfDataPoints\r\n\r\n                if(formData.addPlansInfo){\r\n                    newPlotData.plansData = res[0].listOfPlansInfo\r\n                }\r\n                return newPlotData\r\n            }\r\n        )\r\n    }\r\n\r\n    function simulateMetricsButtonHandler(){\r\n        clearInterval(liveDataAPIRequestFunctionTimer);\r\n        let nextPageParams = {\r\n            state: {\r\n                metricToSimulate: null,\r\n                preferences: null,\r\n                resourceId: formData.resourceId\r\n            } \r\n        }\r\n\r\n        let rootMetric = qualityModel.metric;\r\n        let metricToSimulate = findMetricTreeOnTreeTranverse(rootMetric, parseInt(formData.metricId))\r\n        nextPageParams.state.metricToSimulate = metricToSimulate\r\n        nextPageParams.state.preferences = configurationProfile.preferences\r\n        nextPageParams.state.startDate = formData.startDate\r\n        nextPageParams.state.endDate = formData.endDate\r\n        nextPageParams.state.plotData = plotData\r\n        navigate(\"/simulateMetrics\", nextPageParams);\r\n    }\r\n\r\n    function findMetricTreeOnTreeTranverse(currMetric, metricIdToFind){\r\n        if(currMetric.metricId !== metricIdToFind){\r\n            let queryResult\r\n            for(let child of currMetric.childMetrics){\r\n                queryResult = findMetricTreeOnTreeTranverse(child,metricIdToFind)\r\n                if( queryResult !== null ) {\r\n                    return queryResult\r\n                }\r\n            }\r\n            return null\r\n        }\r\n        else{\r\n            return currMetric\r\n        }\r\n    }\r\n\r\n    function exportPlotConfigsButtonHandler(){\r\n        let obj = JSON.parse(JSON.stringify(formData))\r\n        \r\n        obj.startDate = Math.floor(new Date(obj.startDate).valueOf() / 1000)\r\n        obj.endDate = Math.floor(new Date(obj.endDate).valueOf() / 1000)\r\n        \r\n        obj.metricLabel = plotData.dataSetMetric.label\r\n        let blob = new Blob([JSON.stringify(obj,null, 2)],\r\n                { type: \"application/json\" });\r\n\r\n        saveAs(blob, \"plotConfig.txt\");\r\n    }\r\n\r\n    function step1(){\r\n        return (\r\n            <Segment compact style={{marginLeft: \"auto\", marginRight: \"auto\"}}>\r\n                <Form>\r\n                    <Form.Group grouped>\r\n                        <Form.Group>\r\n                            <Form.Dropdown\r\n                                selectOnBlur={false}\r\n                                selectOnNavigation={false}\r\n                                defaultValue={formData.resourceId !== null ? formData.resourceId : null}\r\n                                required\r\n                                clearable\r\n                                search\r\n                                selection\r\n                                options={activeResources}\r\n                                placeholder='Filter active resources by something'\r\n                                label='Choose an active Resource'\r\n                                name=\"resourceId\"\r\n                                onChange={formDataOnChangeHandler}\r\n                                error = {\r\n                                    (formErrorDisplay && !ValidInputs().validStringOrDropDownSelection(formData.resourceId)) ? \r\n                                        { content: 'Please choose a Resource', pointing: 'above' } \r\n                                    : \r\n                                        null\r\n                                }\r\n                                \r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group grouped>\r\n                            <label>Choose a type of data: </label>\r\n                            <Form.Group inline>\r\n                                <Form.Checkbox\r\n                                    radio\r\n                                    label='Raw Data'\r\n                                    name='dataType'\r\n                                    value='raw'\r\n                                    checked={formData.dataType === 'raw'}\r\n                                    onChange={formDataOnChangeHandler}\r\n                                />\r\n                                <Form.Checkbox\r\n                                    radio\r\n                                    label='Metric Data'\r\n                                    name='dataType'\r\n                                    value='metric'\r\n                                    checked={formData.dataType === 'metric'}\r\n                                    onChange={formDataOnChangeHandler}\r\n                                />\r\n                            </Form.Group>\r\n                            <Form.Button color=\"blue\" circular type='submit' floated='right' onClick={submitStep1Handler}> \r\n                                Confirm\r\n                            </Form.Button>\r\n                        </Form.Group>\r\n                    </Form.Group>\r\n                </Form>\r\n            </Segment>\r\n        )\r\n    }\r\n\r\n    function step2(){\r\n        return (\r\n            <div>\r\n            {\r\n            chosenResource === null ?\r\n                <Loader active inline='centered'> Retrieving content </Loader>\r\n            :\r\n                <Grid stackable columns={2}>\r\n                    <Grid.Column>\r\n                        <Segment>\r\n                            <Header as=\"h3\" textAlign=\"center\"> Weighted metrics tree</Header>\r\n                            <Divider/>\r\n                            <TreeRender width={\"100%\"} height={\"50vh\"} \r\n                                preferences={configurationProfile.preferences}\r\n                                data={qualityModel[\"metric\"]} \r\n                                configurationProfile={true}\r\n                            />\r\n                        </Segment>\r\n                    </Grid.Column>\r\n                    <Grid.Column>\r\n                        <Segment>\r\n                            <Form>\r\n                                <Form.Group grouped>  \r\n                                    <Form.Dropdown\r\n                                        selectOnBlur={false}\r\n                                        selectOnNavigation={false}\r\n                                        defaultValue={formData.metricId !== null ? formData.metricId : null}\r\n                                        required\r\n                                        clearable\r\n                                        search\r\n                                        selection\r\n                                        options={listOfMetrics}\r\n                                        placeholder='Filter metrics by something'\r\n                                        label='Choose a metric'\r\n                                        name=\"metricId\"\r\n                                        onChange={formDataOnChangeHandler}\r\n                                        error = {\r\n                                            (formErrorDisplay && !ValidInputs().validStringOrDropDownSelection(formData.metricId)) ? \r\n                                                { content: 'Please choose a Metric', pointing: 'above' } \r\n                                            : \r\n                                                null\r\n                                        }\r\n                                    />\r\n                                    <p/>\r\n                                    { formData.dataType === \"raw\" ?\r\n                                        null\r\n                                    :\r\n                                    <React.Fragment>\r\n                                        <Form.Checkbox checked={formData.addPlansInfo} label='Add Plans Info'\r\n                                            onClick={ () =>{\r\n                                                setFormData({\r\n                                                    ...formData, \r\n                                                    addPlansInfo: !formData.addPlansInfo}\r\n                                                )\r\n                                                }} \r\n                                        />\r\n                                        <p/>\r\n                                    </React.Fragment>\r\n                                    }\r\n                                    <Form.Checkbox checked={formData.livePlot} toggle label=\"Live plot\"\r\n                                        onClick={ () =>{\r\n                                            setFormData({\r\n                                                ...formData, \r\n                                                livePlot: !formData.livePlot}\r\n                                            )\r\n                                            }} \r\n                                    />\r\n                                    { \r\n                                    !formData.livePlot ?\r\n                                        <div>\r\n                                            <br/>\r\n                                            <label>Chose a time window: </label>\r\n                                            <Form.Input required\r\n                                                type='datetime-local'\r\n                                                defaultValue = {formData.startDate !== null ? formData.startDate : null}\r\n                                                name=\"startDate\"  \r\n                                                label='Start date'\r\n                                                step=\"1\"\r\n                                                onChange={formDataOnChangeHandler}\r\n                                                error={\r\n                                                    (formErrorDisplay && !ValidInputs().validTimeStamp(formData.startDate)) ? \r\n                                                        { content: 'Please insert a valid TimeStamp', pointing: 'above' } \r\n                                                    : \r\n                                                        null\r\n                                                    }\r\n                                            />\r\n                                            <Form.Input required\r\n                                                type='datetime-local'\r\n                                                defaultValue = {formData.endDate !== null ? formData.endDate : null}\r\n                                                name=\"endDate\"  \r\n                                                label='End date'\r\n                                                step=\"1\"\r\n                                                onChange={formDataOnChangeHandler}\r\n                                                error={\r\n                                                    (formErrorDisplay && !ValidInputs().validTimeStamp(formData.endDate)) ? \r\n                                                        { content: 'Please insert a valid TimeStamp', pointing: 'above' } \r\n                                                    : \r\n                                                        null\r\n                                                    }\r\n                                            />\r\n                                        </div>\r\n                                       \r\n                                    :\r\n                                        null\r\n                                    }\r\n                                    <Form.Button color=\"blue\" circular type='submit' floated='right' onClick={submitStep2Handler}> \r\n                                        Confirm\r\n                                    </Form.Button>\r\n                                    <br/>\r\n                                    <br/>\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </Segment>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function step3(){\r\n        return(\r\n            <Segment>\r\n            { \r\n            plotData === null ? \r\n                <Loader active inline='centered'> Retrieving content </Loader>\r\n            : \r\n                <div>\r\n                    {plotData.dataSetMetric.data.length === 0 ?\r\n                        <Label ribbon as='b' color=\"red\">\r\n                            <Header as=\"h3\"> Warning! </Header> \r\n                            There are no data available for the defined selections. If \"Live plot\" option was selected, \r\n                            data may appear in the plot if any arrive in the database.\r\n                        </Label>\r\n                    : formData.dataType === \"metric\" ?\r\n                        <Button color='blue' onClick={simulateMetricsButtonHandler}>\r\n                            Simulate Metrics\r\n                        </Button>\r\n                    :\r\n                        null\r\n                    }\r\n                    <Button color='grey' floated='right' onClick={exportPlotConfigsButtonHandler}>\r\n                            Export Plot Config\r\n                    </Button>\r\n                    <p/>\r\n                    <Plot \r\n                        plotPath=\"getResources\"\r\n                        plotData = {plotData} \r\n                        startDate={\r\n                            typeof(formData.startDate) === \"object\" ?\r\n                                formData.startDate\r\n                            :\r\n                                new Date(formData.startDate)\r\n                        } \r\n                        endDate={\r\n                            typeof(formData.endDate) === \"object\" ?\r\n                                formData.endDate\r\n                            :\r\n                                new Date(formData.endDate)\r\n                        } \r\n                    />\r\n                </div>\r\n            }\r\n            </Segment>\r\n        )\r\n    }\r\n\r\n    function choseStepRender(){\r\n        switch(step){\r\n            case 1:\r\n                return step1();\r\n            case 2:\r\n                return step2();\r\n            case 3:\r\n                return step3();\r\n            default:\r\n                return <h1>ERROR!!!!!!!! SOMETHING WENT WRONG!</h1>\r\n        }\r\n    }\r\n    \r\n    return( \r\n        <div>\r\n            <Grid centered>\r\n            <Grid.Row >\r\n                <Grid.Column width={15}>\r\n                <Divider section horizontal>\r\n                    <Header as=\"h1\" textAlign=\"center\"> Visualize Resource Metrics</Header> \r\n                </Divider>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            </Grid>\r\n            <br/>\r\n            <Container>\r\n                <Step.Group ordered widths={3}>\r\n                    <Step  \r\n                        completed = {step > 1} \r\n                        link\r\n                        onClick={() =>{\r\n                            clearInterval(liveDataAPIRequestFunctionTimer);\r\n                            setPlotData(null)\r\n                            cleanStep2FormData(); \r\n                            setStep(1)\r\n                        }}\r\n                    >\r\n                        <Step.Content>\r\n                            <Step.Title>Resource and Data Type</Step.Title>\r\n                            <Step.Description>Select a Resource and the type of data to plot</Step.Description>\r\n                        </Step.Content>\r\n                    </Step>\r\n\r\n                    <Step \r\n                        completed = {step > 2} \r\n                        disabled = {step < 2} \r\n                        link\r\n                        onClick={() =>{\r\n                            clearInterval(liveDataAPIRequestFunctionTimer); \r\n                            setPlotData(null)\r\n                            setStep(2)\r\n                        }} \r\n                    >\r\n                        <Step.Content>\r\n                            <Step.Title>Metric and Time Window</Step.Title>\r\n                            <Step.Description>Selec Metric and time window to plot data</Step.Description>\r\n                        </Step.Content>\r\n                    </Step>\r\n\r\n                    <Step completed = {step > 2} disabled = {step < 3} link>\r\n                        <Step.Content>\r\n                            <Step.Title>Plot data</Step.Title>\r\n                        </Step.Content>\r\n                    </Step>\r\n                </Step.Group>\r\n                { \r\n                activeResources === null ? \r\n                    <div>\r\n                        <Loader active inline='centered'> Retrieving content </Loader>\r\n                        <br/>\r\n                    </div>\r\n                :\r\n                    choseStepRender()\r\n                }\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlotResourceMetricsPage;","/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nvar isMacOSWebView = _global.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView\n  : ('download' in HTMLAnchorElement.prototype && !isMacOSWebView)\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== 'undefined') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n\nfunction StepDescription(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('description', className);\n  var rest = getUnhandledProps(StepDescription, props);\n  var ElementType = getElementType(StepDescription, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nStepDescription.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nStepDescription.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nStepDescription.create = createShorthandFactory(StepDescription, function (content) {\n  return {\n    content: content\n  };\n});\nexport default StepDescription;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A step can contain a title.\n */\n\nfunction StepTitle(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('title', className);\n  var rest = getUnhandledProps(StepTitle, props);\n  var ElementType = getElementType(StepTitle, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nStepTitle.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nStepTitle.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nStepTitle.create = createShorthandFactory(StepTitle, function (content) {\n  return {\n    content: content\n  };\n});\nexport default StepTitle;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\nimport StepDescription from './StepDescription';\nimport StepTitle from './StepTitle';\n/**\n * A step can contain a content.\n */\n\nfunction StepContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      description = props.description,\n      title = props.title;\n  var classes = cx('content', className);\n  var rest = getUnhandledProps(StepContent, props);\n  var ElementType = getElementType(StepContent, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), StepTitle.create(title, {\n    autoGenerateKey: false\n  }), StepDescription.create(description, {\n    autoGenerateKey: false\n  }));\n}\n\nStepContent.handledProps = [\"as\", \"children\", \"className\", \"content\", \"description\", \"title\"];\nStepContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for StepDescription. */\n  description: customPropTypes.itemShorthand,\n\n  /** Shorthand for StepTitle. */\n  title: customPropTypes.itemShorthand\n} : {};\nStepContent.create = createShorthandFactory(StepContent, function (content) {\n  return {\n    content: content\n  };\n});\nexport default StepContent;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _values from \"lodash-es/values\";\nimport _keys from \"lodash-es/keys\";\nimport _without from \"lodash-es/without\";\nimport _map from \"lodash-es/map\";\nimport _pickBy from \"lodash-es/pickBy\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, numberToWordMap, SUI, useKeyOnly, useKeyOrValueAndKey, useValueAndKey, useWidthProp } from '../../lib';\nimport Step from './Step';\nvar numberMap = process.env.NODE_ENV !== \"production\" ? _pickBy(numberToWordMap, function (val, key) {\n  return key <= 8;\n}) : {};\n/**\n * A set of steps.\n */\n\nfunction StepGroup(props) {\n  var attached = props.attached,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      fluid = props.fluid,\n      items = props.items,\n      ordered = props.ordered,\n      size = props.size,\n      stackable = props.stackable,\n      unstackable = props.unstackable,\n      vertical = props.vertical,\n      widths = props.widths;\n  var classes = cx('ui', size, useKeyOnly(fluid, 'fluid'), useKeyOnly(ordered, 'ordered'), useKeyOnly(unstackable, 'unstackable'), useKeyOnly(vertical, 'vertical'), useKeyOrValueAndKey(attached, 'attached'), useValueAndKey(stackable, 'stackable'), useWidthProp(widths), 'steps', className);\n  var rest = getUnhandledProps(StepGroup, props);\n  var ElementType = getElementType(StepGroup, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), _map(items, function (item) {\n    return Step.create(item);\n  }));\n}\n\nStepGroup.handledProps = [\"as\", \"attached\", \"children\", \"className\", \"content\", \"fluid\", \"items\", \"ordered\", \"size\", \"stackable\", \"unstackable\", \"vertical\", \"widths\"];\nStepGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Steps can be attached to other elements. */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A fluid step takes up the width of its container. */\n  fluid: PropTypes.bool,\n\n  /** Shorthand array of props for Step. */\n  items: customPropTypes.collectionShorthand,\n\n  /** A step can show a ordered sequence of steps. */\n  ordered: PropTypes.bool,\n\n  /** Steps can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** A step can stack vertically only on smaller screens. */\n  stackable: PropTypes.oneOf(['tablet']),\n\n  /** A step can prevent itself from stacking on mobile. */\n  unstackable: PropTypes.bool,\n\n  /** A step can be displayed stacked vertically. */\n  vertical: PropTypes.bool,\n\n  /** Steps can be divided evenly inside their parent. */\n  widths: PropTypes.oneOf([].concat(_keys(numberMap), _keys(numberMap).map(Number), _values(numberMap)))\n} : {};\nexport default StepGroup;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _invoke from \"lodash-es/invoke\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\nimport Icon from '../Icon';\nimport StepContent from './StepContent';\nimport StepDescription from './StepDescription';\nimport StepGroup from './StepGroup';\nimport StepTitle from './StepTitle';\n/**\n * A step shows the completion status of an activity in a series of activities.\n */\n\nvar Step = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Step, _Component);\n\n  function Step() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _this.computeElementType = function () {\n      var onClick = _this.props.onClick;\n      if (onClick) return 'a';\n    };\n\n    _this.handleClick = function (e) {\n      var disabled = _this.props.disabled;\n      if (!disabled) _invoke(_this.props, 'onClick', e, _this.props);\n    };\n\n    return _this;\n  }\n\n  var _proto = Step.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        active = _this$props.active,\n        children = _this$props.children,\n        className = _this$props.className,\n        completed = _this$props.completed,\n        content = _this$props.content,\n        description = _this$props.description,\n        disabled = _this$props.disabled,\n        href = _this$props.href,\n        icon = _this$props.icon,\n        link = _this$props.link,\n        title = _this$props.title;\n    var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(completed, 'completed'), useKeyOnly(disabled, 'disabled'), useKeyOnly(link, 'link'), 'step', className);\n    var rest = getUnhandledProps(Step, this.props);\n    var ElementType = getElementType(Step, this.props, this.computeElementType);\n\n    if (!childrenUtils.isNil(children)) {\n      return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n        className: classes,\n        href: href,\n        onClick: this.handleClick\n      }), children);\n    }\n\n    if (!childrenUtils.isNil(content)) {\n      return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n        className: classes,\n        href: href,\n        onClick: this.handleClick\n      }), content);\n    }\n\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes,\n      href: href,\n      onClick: this.handleClick\n    }), Icon.create(icon, {\n      autoGenerateKey: false\n    }), StepContent.create({\n      description: description,\n      title: title\n    }, {\n      autoGenerateKey: false\n    }));\n  };\n\n  return Step;\n}(Component);\n\nStep.handledProps = [\"active\", \"as\", \"children\", \"className\", \"completed\", \"content\", \"description\", \"disabled\", \"href\", \"icon\", \"link\", \"onClick\", \"ordered\", \"title\"];\nStep.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A step can be highlighted as active. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A step can show that a user has completed it. */\n  completed: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for StepDescription. */\n  description: customPropTypes.itemShorthand,\n\n  /** Show that the Loader is inactive. */\n  disabled: PropTypes.bool,\n\n  /** Render as an `a` tag instead of a `div` and adds the href attribute. */\n  href: PropTypes.string,\n\n  /** Shorthand for Icon. */\n  icon: customPropTypes.itemShorthand,\n\n  /** A step can be link. */\n  link: PropTypes.bool,\n\n  /**\n   * Called on click. When passed, the component will render as an `a`\n   * tag by default instead of a `div`.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClick: PropTypes.func,\n\n  /** A step can show a ordered sequence of steps. Passed from StepGroup. */\n  ordered: PropTypes.bool,\n\n  /** Shorthand for StepTitle. */\n  title: customPropTypes.itemShorthand\n} : {};\nStep.Content = StepContent;\nStep.Description = StepDescription;\nStep.Group = StepGroup;\nStep.Title = StepTitle;\nStep.create = createShorthandFactory(Step, function (content) {\n  return {\n    content: content\n  };\n});\nexport default Step;","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}"],"names":["props","ChartJS","CategoryScale","LineController","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","ScatterController","plotPath","useState","adaptedFontSizes","setAdaptedFontSizes","adaptedFontSizesRef","useRef","current","chartPDFGen","setChartPDFGen","chartRef","dataSetMetric","type","borderColor","backgroundColor","order","pointStyle","radius","hoverRadius","parsing","xAxisKey","yAxisKey","dataSetPlans","label","dataSetSimulation","datasets","plotData","setPlotData","animation","duration","hover","animationDuration","responsiveAnimationDuration","maintainAspectRatio","responsive","plugins","legend","position","labels","usePointStyle","reverse","tooltip","callbacks","tooltipItem","datasetIndex","raw","planId","Math","round","value","scales","x","time","displayFormats","second","minute","hour","day","week","month","quarter","year","minUnit","tooltipFormat","title","display","text","color","font","family","weight","ticks","autoSkip","min","startDate","max","endDate","y","beginAtZero","ylabel","maxTicksLimit","onResize","currLocation","window","location","href","split","length","plotOptions","setPlotOptions","useEffect","datasetsTemp","push","data","undefined","plansData","simulationData","prevState","newState","JSON","parse","stringify","myplugins","beforeDraw","c","chartHeight","height","ticksFontSize","axisLabelFontSize","legendFontSize","newOptions","size","active","inline","floated","loading","onClick","imgFile","toBase64Image","doc","jsPDF","width","addImage","save","name","style","ref","ev","console","log","getDatasetAtEvent","getElementAtEvent","getElementsAtEvent","options","liveDataAPIRequestFunctionTimer","navigate","useNavigate","activeResources","setActiveResources","chosenResource","setChosenResource","configurationProfile","setConfigurationProfile","qualityModel","setQualityModel","listOfMetrics","setListOfMetrics","resourceId","dataType","metricId","livePlot","addPlansInfo","formData","setFormData","formErrorDisplay","setFormErrorDisplay","step","setStep","ApiModule","getActiveResources","unprocessedResources","DropDownDataFormat","convertResources","makeAPIRequest","formDataOnChangeHandler","newFormData","submitStep1Handler","preventDefault","ValidInputs","validStringOrDropDownSelection","getResourceWeightsAndMetricsTree","res","queryParams","leafAttributes","getConfigurationProfileListOfMetrics","configurationProfileId","convertMetrics","submitStep2Handler","validTimeStamp","currDate","Date","currDateMinus1Minute","getTime","parseInt","valueOf","getResourceData","find","elem","replace","listOfDataPoints","newPlotData","descriptionInfo","listOfPlansInfo","forEach","item","index","array","valueTime","setInterval","step3LiveData","clearInterval","prevStatePlotData","simulateMetricsButtonHandler","nextPageParams","state","metricToSimulate","preferences","findMetricTreeOnTreeTranverse","metric","currMetric","metricIdToFind","queryResult","childMetrics","exportPlotConfigsButtonHandler","obj","floor","metricLabel","blob","Blob","saveAs","centered","section","horizontal","as","textAlign","ordered","widths","completed","link","disabled","compact","marginLeft","marginRight","grouped","selectOnBlur","selectOnNavigation","defaultValue","required","clearable","search","selection","placeholder","onChange","error","content","pointing","radio","checked","circular","stackable","columns","toggle","ribbon","choseStepRender","b","a","autoBom","warn","test","d","XMLHttpRequest","open","responseType","onload","g","response","onerror","send","status","e","dispatchEvent","MouseEvent","document","createEvent","initMouseEvent","f","self","global","navigator","userAgent","HTMLAnchorElement","prototype","h","i","URL","webkitURL","j","createElement","download","rel","origin","target","createObjectURL","setTimeout","revokeObjectURL","msSaveOrOpenBlob","body","innerText","HTMLElement","safari","FileReader","k","onloadend","result","readAsDataURL","l","m","module","exports","StepDescription","children","className","classes","cx","rest","getUnhandledProps","ElementType","getElementType","React","_extends","childrenUtils","handledProps","propTypes","create","createShorthandFactory","StepTitle","StepContent","description","autoGenerateKey","StepGroup","attached","fluid","items","unstackable","vertical","useKeyOnly","useKeyOrValueAndKey","useValueAndKey","useWidthProp","_map","Step","_Component","_this","_len","arguments","args","Array","_key","call","apply","this","concat","computeElementType","handleClick","_invoke","_inheritsLoose","render","_this$props","icon","Icon","Component","Content","Description","Group","_defineProperty","key","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","_objectSpread2","source","getOwnPropertyDescriptors","defineProperties"],"sourceRoot":""}