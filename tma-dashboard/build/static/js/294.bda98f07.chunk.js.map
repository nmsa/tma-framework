{"version":3,"file":"static/js/294.bda98f07.chunk.js","mappings":"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","sources":["components/CustomModal.js","components/tables/TableHeader.js","pages/AdaptationRules/CreateRulePage.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {Button, Modal, Message} from 'semantic-ui-react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction CustomModal(props){\r\n\r\n    let navigate = useNavigate();\r\n\r\n    const [modalState, setModalState] = useState(\r\n        {\r\n            successPath: props.successPath,\r\n            openModal: false,\r\n            messageType: null,\r\n            message: null\r\n        }\r\n    )  \r\n\r\n    function modalCloseHandler(ev,atts){\r\n        if(modalState.messageType === \"success\"){\r\n            navigate(modalState.successPath)\r\n        }\r\n        props.modalInfo.openModal = false\r\n        setModalState(\r\n            {\r\n                ...modalState,\r\n                openModal: false\r\n            }\r\n        )\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setModalState({\r\n            ...modalState,\r\n            openModal: props.modalInfo.openModal,\r\n            messageType: props.modalInfo.messageType,\r\n            message: props.modalInfo.message\r\n        })\r\n    },[props])\r\n\r\n    return(\r\n        <Modal centered={false} closeIcon open={modalState[\"openModal\"]} onClose={modalCloseHandler}>\r\n            <Modal.Header>Message</Modal.Header>\r\n            <Modal.Content>\r\n                <Message \r\n                color= {\r\n                        modalState[\"messageType\"] === \"success\" ? \r\n                        \"green\"\r\n                        :modalState[\"messageType\"] === \"warning\" ?\r\n                        \"orange\"\r\n                        : \"red\" \r\n                    }\r\n                >\r\n                    <Message.Header>{modalState[\"message\"]}</Message.Header>\r\n                </Message>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button color='grey' onClick={modalCloseHandler}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default CustomModal;","import {Table} from 'semantic-ui-react'\r\n\r\nfunction TableHeader(props){\r\n    let uniqueId = 0;\r\n    function returnTableHeader(headerName){\r\n        //key property must be set and be unique because React uses it to optimize rendering process \r\n        return <Table.HeaderCell key={uniqueId++}> {headerName}</Table.HeaderCell>\r\n    }\r\n\r\n    return(\r\n    <Table.Header>\r\n      <Table.Row>\r\n        {props[\"tableHeaders\"].map(headerName => returnTableHeader(headerName))}\r\n      </Table.Row>\r\n    </Table.Header>\r\n    )\r\n}\r\n\r\nexport default TableHeader","import { Loader, Divider, Step, Header, Table, Grid, Form, Container, Segment, Icon, Button} from 'semantic-ui-react'\r\nimport ApiModule from \"../../utils/api/ApiModule\"\r\nimport React, {useState, useEffect} from \"react\"\r\nimport { useNavigate } from 'react-router-dom';\r\nimport DropDownDataFormat from '../../utils/dropDownDataFormat/DropDownDataFormat';\r\nimport ValidInputs from '../../utils/ValidInputs';\r\nimport TreeRender from '../../utils/treeRendering/TreeRender';\r\nimport TableHeader from \"../../components/tables/TableHeader\"\r\nimport CustomModal from '../../components/CustomModal';\r\n\r\nfunction ViewRulePage(props){\r\n    //====================== RENDER PURPOSE variables ==================================\r\n    const [step, setStep] = useState(1);\r\n\r\n    //====================== GENERAL variables ==================================\r\n    const [formErrorDisplay, setFormErrorDisplay] = useState(false);\r\n    const [formData, setFormData] = useState(\r\n        {\r\n            resourceId: null,\r\n            ruleName: null,\r\n            metricId: \"\",\r\n            operator: \"\",\r\n            activationThreshold: \"\",\r\n            actionList: []\r\n        }\r\n    );\r\n    \r\n    //====================== STEP 1 variables ==================================\r\n    const [activeResources, setActiveResources] = useState(null);\r\n\r\n    //====================== STEP 2 variables ==================================\r\n    const [configurationProfile, setConfigurationProfile] = useState(null);\r\n    const [qualityModel, setQualityModel] = useState(null);\r\n    const [listOfMetrics, setListOfMetrics] = useState(null);\r\n    const ruleConditionOperatorOptions = [\r\n        {\r\n            key: 0, value: \"<\", text: \"<\"\r\n        },\r\n        {\r\n            key: 1, value: \">\", text: \">\"\r\n        },\r\n        {\r\n            key: 2, value: \">=\", text: \">=\"\r\n        },\r\n        {\r\n            key: 3, value: \"<=\", text: \"<=\"\r\n        },\r\n        {\r\n            key: 4, value: \"==\", text: \"==\"\r\n        },\r\n        {\r\n            key: 5, value: \"!=\", text: \"!=\"\r\n        }\r\n    ]\r\n\r\n    //====================== STEP 3 variables ==================================\r\n    const [listOfActions, setListOfActions] = useState(null);\r\n    const [listOfActionsDropDown, setListOfActionsDropDown] = useState(null);\r\n    const [tempActionChosen, setTempActionChosen] = useState(null);\r\n\r\n    const tableHeadersActionList = [\"Execution Order\",\"Action Id\",\"Action Name\", \"Options\"]\r\n    const tableHeadersConfigurationList = [\"Action Id\",\"Key Name\", \"Value\"]\r\n\r\n    const [createRuleResponseMessage, setCreateRuleResponseMessage] = useState({\"openModal\": false})\r\n    //============================== GENERAL FUNCTIONS ============================================/\r\n    \r\n    function choseStepRender(){\r\n        switch(step){\r\n            case 1:\r\n                return step1();\r\n            case 2:\r\n                return step2();\r\n            case 3:\r\n                return step3();\r\n            default:\r\n                return <h1>ERROR!!!!!!!! SOMETHING WENT WRONG!</h1>\r\n        }\r\n    }\r\n\r\n    function formDataOnChangeHandler(ev, props){\r\n        let newFormData = JSON.parse(JSON.stringify(formData))\r\n        newFormData[props.name] = props.value\r\n        setFormData(newFormData)\r\n    }\r\n    \r\n    //============================== STEP 1 RELATED FUNCTIONS ============================================/\r\n    useEffect(()=>{\r\n        async function makeAPIRequest(){\r\n            let queryParams = {\r\n                createRule: \"true\"\r\n            }\r\n            let unprocessedResources = await ApiModule().getActiveResources(queryParams);\r\n            DropDownDataFormat().convertResources(unprocessedResources,setActiveResources)\r\n        }\r\n        makeAPIRequest()\r\n    },[])\r\n\r\n    async function submitStep1Handler(ev){\r\n        ev.preventDefault()\r\n        if (ValidInputs().validStringOrDropDownSelection(formData.resourceId)){\r\n            //remore error appearance on next step, using this same variable used on step 1 to control error messages display\r\n            setFormErrorDisplay(false)\r\n            //request render of step 2\r\n            setStep(2)\r\n            //get Resource Weights And Metrics Tree by performing synchronous request to the api\r\n            let res = await ApiModule().getResourceWeightsAndMetricsTree(formData.resourceId)\r\n            setConfigurationProfile(res.configurationProfile)\r\n            setQualityModel(res.qualityModel)\r\n            \r\n            //get list of metrics and convert it to dropdown format\r\n            let queryParams = {leafAttributes: false}\r\n            res = await ApiModule().getConfigurationProfileListOfMetrics(res.configurationProfile.configurationProfileId, queryParams)\r\n            DropDownDataFormat().convertMetrics(res,setListOfMetrics)\r\n        }\r\n        else{\r\n            //enable error display\r\n            setFormErrorDisplay(true)\r\n        }\r\n    }\r\n\r\n    function backToStep1Clean(){\r\n        let newFormData = {\r\n            resourceId: formData.resourceId,\r\n            ruleName: null,\r\n            metricId: \"\",\r\n            operator: \"\",\r\n            activationThreshold: \"\",\r\n            actionList: []\r\n        }\r\n        setFormData(newFormData)\r\n        setFormErrorDisplay(false)\r\n    }\r\n\r\n    function step1(){\r\n        return ( \r\n            <div>\r\n                {activeResources === null ?\r\n                    <Loader active inline='centered'> Retrieving content </Loader>\r\n                :\r\n                    <Segment compact style={{marginLeft: \"auto\", marginRight: \"auto\"}}>\r\n                        <Form>\r\n                            <Form.Group grouped>\r\n                                <Form.Dropdown\r\n                                    selectOnBlur={false}\r\n                                    selectOnNavigation={false}\r\n                                    defaultValue={formData.resourceId !== null ? formData.resourceId : null}\r\n                                    required\r\n                                    clearable\r\n                                    search\r\n                                    selection\r\n                                    options={activeResources}\r\n                                    placeholder='Filter active resources by something'\r\n                                    label='Choose an active Resource'\r\n                                    name=\"resourceId\"\r\n                                    onChange={formDataOnChangeHandler}\r\n                                    error = {\r\n                                        (formErrorDisplay && !ValidInputs().validStringOrDropDownSelection(formData.resourceId)) ? \r\n                                            { content: 'Please choose a Resource', pointing: 'above' } \r\n                                        : \r\n                                            null\r\n                                    }  \r\n                                />\r\n                                <Form.Button color=\"blue\" floated='right' circular type='submit' onClick={submitStep1Handler}> \r\n                                    Confirm\r\n                                </Form.Button>\r\n                            </Form.Group>\r\n                        </Form>\r\n                    </Segment>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //============================== STEP 2 RELATED FUNCTIONS ============================================/\r\n\r\n    async function submitStep2Handler(ev){\r\n        ev.preventDefault()\r\n\r\n        if (ValidInputs().validStringOrDropDownSelection(formData.ruleName))\r\n            if (ValidInputs().validStringOrDropDownSelection(formData.metricId))\r\n                if (ValidInputs().validStringOrDropDownSelection(formData.operator))\r\n                    if (ValidInputs().validFloatBetweenZeroAndOne(formData.activationThreshold)){\r\n                        //remore error appearance on next step, using this same variable used \r\n                        //on step 1 to control error messages display\r\n                        setFormErrorDisplay(false)\r\n                        //request render of step 3\r\n                        setStep(3)\r\n                        let queryParams = {\r\n                            resourceId: formData.resourceId\r\n                        }\r\n                        //get List of Actions and their configurations\r\n                        let res = await ApiModule().getActionsAndConfigsByResource(queryParams)\r\n                        setListOfActions(res.actions)\r\n                        \r\n                        //convert actions into dropdown format\r\n                        DropDownDataFormat().convertActions(res.actions,setListOfActionsDropDown)\r\n                        return\r\n                    }\r\n        \r\n        //enable error display\r\n        setFormErrorDisplay(true)\r\n    }\r\n    \r\n    function backToStep2Clean(){\r\n        let newFormData = JSON.parse(JSON.stringify(formData))\r\n        newFormData.actionList = []\r\n        setFormData(newFormData)\r\n        setFormErrorDisplay(false)\r\n    }\r\n\r\n    function step2(){\r\n        return( \r\n        <div>\r\n        {listOfMetrics !== null ?\r\n            <Grid stackable columns={2}>\r\n                <Grid.Column>\r\n                    <Segment>\r\n                        <Header as=\"h3\" textAlign=\"center\"> Weighted metrics tree</Header>\r\n                        <Divider/>\r\n                        <TreeRender width={\"100%\"} height={\"50vh\"} \r\n                            preferences={configurationProfile.preferences}\r\n                            data={qualityModel[\"metric\"]} \r\n                            configurationProfile={true}\r\n                        />\r\n                    </Segment>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                    <Segment style={{marginLeft: \"auto\", marginRight: \"auto\"}}>\r\n                        <Form widths='equal'>\r\n                            <Form.Group>\r\n                                <Form.Input required\r\n                                    defaultValue = {formData.ruleName}\r\n                                    name=\"ruleName\"  \r\n                                    label='Rule name'\r\n                                    onChange={formDataOnChangeHandler}\r\n                                    error={\r\n                                        formErrorDisplay && !ValidInputs().validStringOrDropDownSelection(formData.ruleName) ?\r\n                                        { content: 'Please enter a name for the Rule', pointing: 'above' }\r\n                                        :\r\n                                        null\r\n                                    }\r\n                                />\r\n                                <Form.Dropdown\r\n                                    selectOnBlur={false}\r\n                                    selectOnNavigation={false}\r\n                                    defaultValue={formData.metricId !== null ? formData.metricId : null}\r\n                                    required\r\n                                    clearable\r\n                                    search\r\n                                    selection\r\n                                    options={listOfMetrics}\r\n                                    placeholder='Filter metrics by something'\r\n                                    label='Metric to apply the rule'\r\n                                    name=\"metricId\"\r\n                                    onChange={formDataOnChangeHandler}\r\n                                    error = {\r\n                                        (formErrorDisplay && !ValidInputs().validStringOrDropDownSelection(formData.metricId)) ? \r\n                                            { content: 'Please choose a Metric on which the rule will be applied', pointing: 'above' } \r\n                                        : \r\n                                            null\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Form.Dropdown\r\n                                    selectOnBlur={false}\r\n                                    selectOnNavigation={false}\r\n                                    defaultValue={formData.operator !== null ? formData.operator : null}\r\n                                    required\r\n                                    clearable\r\n                                    selection\r\n                                    options={ruleConditionOperatorOptions}\r\n                                    label='Condition Operator'\r\n                                    name=\"operator\"\r\n                                    onChange={formDataOnChangeHandler}\r\n                                    error = {\r\n                                        (formErrorDisplay && !ValidInputs().validStringOrDropDownSelection(formData.operator)) ? \r\n                                            { content: 'Please choose an operator for the rule condition', pointing: 'above' } \r\n                                        : \r\n                                            null\r\n                                    }\r\n                                />\r\n                                <Form.Input required\r\n                                    defaultValue = {formData.activationThreshold}\r\n                                    name=\"activationThreshold\"  \r\n                                    label='Condition activation threshold'\r\n                                    onChange={formDataOnChangeHandler}\r\n                                    error={\r\n                                        formErrorDisplay && !ValidInputs().validFloatBetweenZeroAndOne(formData.activationThreshold) ?\r\n                                        { content: 'Please enter an activation threshold between 0 and 1 as a float number (p.e. 0.33)', pointing: 'above' }\r\n                                        :\r\n                                        null\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                            <Divider horizontal section>\r\n                                <Header as=\"h5\" textAlign=\"center\"> \r\n                                    Rule condition Preview\r\n                                    <Icon name='arrow down' />\r\n                                </Header>\r\n                            </Divider>\r\n                            <Container>\r\n                                <Segment compact style={{margin: \"auto\"}}>\r\n                                    <code style={{whiteSpace: \"pre-wrap\", color: \"#0057b3\"}}>\r\n                                        {`resourceId == ${formData.resourceId} && score.get(${formData.metricId}) ${formData.operator} ${formData.activationThreshold}`}\r\n                                    </code>\r\n                                </Segment>\r\n                            </Container>\r\n                            <Form.Group>\r\n                                <Form.Button color=\"blue\" floated='right' circular type='submit' onClick={submitStep2Handler}> \r\n                                    Confirm\r\n                                </Form.Button>\r\n                            </Form.Group>\r\n                        </Form>\r\n                    </Segment> \r\n                </Grid.Column>\r\n            </Grid>\r\n        :\r\n            <Loader active inline='centered'> Retrieving content </Loader>\r\n        }\r\n        </div>)\r\n    }\r\n\r\n    //============================== STEP 3 RELATED FUNCTIONS ============================================/\r\n    \r\n    function step3AddActionHandler(ev, atts){\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n\r\n        //due to what gets saved on \"tempActionChosen\" and the selected state on the dropdown, this verification becomes\r\n        //mandatory to keep coherence, because there may be times where it is tried to add to the list something that's already there\r\n        if(formData.actionList.filter((action) => action.actionId === tempActionChosen).length > 0){\r\n            return\r\n        }\r\n\r\n        //set added action as chosen on the dropwdown list so it doesnt appear on the list again \r\n        let newActionDropDownList = JSON.parse(JSON.stringify(listOfActionsDropDown))\r\n        newActionDropDownList.filter((actionDropDown) => actionDropDown.value === tempActionChosen)[0].chosen = \"true\"\r\n        \r\n        \r\n        //add the action object to adaptation plan\r\n        let newFormData = JSON.parse(JSON.stringify(formData))\r\n        newFormData.actionList.push(listOfActions.filter((action) => action.actionId === tempActionChosen)[0])\r\n        \r\n        //update state variables so that rerender is triggered\r\n        setFormData(newFormData)\r\n        setListOfActionsDropDown(newActionDropDownList)\r\n    }\r\n\r\n    function removeActionFromPlanHandler(ev, atts){\r\n        setListOfActionsDropDown((prevList) => {\r\n            //set removed action as not chosen on the dropwdown list so it reappears on the list \r\n            let newActionDropDownList = JSON.parse(JSON.stringify(prevList))\r\n            let itemToRemove = newActionDropDownList.filter((actionDropDown) => actionDropDown.value === atts.actionid)[0]\r\n            itemToRemove.chosen = \"false\"\r\n            return newActionDropDownList\r\n        \r\n        })\r\n        setFormData((prevData) => {\r\n            //remove the action object from the adaptation plan\r\n            let newFormData = JSON.parse(JSON.stringify(prevData))\r\n            newFormData.actionList.splice(atts.index,1)\r\n            return newFormData\r\n        })\r\n    }\r\n\r\n    function increaseActionPriorityHandler(ev, atts){\r\n        //to increase an action's priority, it has to switch with the previous array index\r\n        let newFormData = JSON.parse(JSON.stringify(formData))\r\n\r\n        let prevItem = newFormData.actionList[atts.index -1]\r\n        newFormData.actionList[atts.index -1] = newFormData.actionList[atts.index]\r\n        newFormData.actionList[atts.index] = prevItem\r\n        \r\n        setFormData(newFormData)\r\n    }\r\n\r\n    function decreaseActionPriorityHandler(ev, atts){\r\n        //to decrease an action's priority, it has to switch with the next array index\r\n        let newFormData = JSON.parse(JSON.stringify(formData))\r\n\r\n        let nextItem = newFormData.actionList[atts.index +1]\r\n        newFormData.actionList[atts.index +1] = newFormData.actionList[atts.index]\r\n        newFormData.actionList[atts.index] = nextItem\r\n        \r\n        setFormData(newFormData)\r\n    }\r\n\r\n    function configurationDataHandler(ev, atts){\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n        let newFormData = JSON.parse(JSON.stringify(formData))\r\n        newFormData.actionList[atts.actionindex].configurations[atts.configurationindex].value = atts.value\r\n        setFormData(newFormData)\r\n    }\r\n        \r\n    async function createRuleHandler(ev){\r\n        ev.preventDefault()\r\n\r\n        let valid = true;\r\n\r\n        //list of plan actions has to be at least 1\r\n        if (formData.actionList.length > 0){\r\n            for(let i=0; i < formData.actionList.length && valid === true; i++){\r\n                if(formData.actionList[i].configurations !== null){\r\n                    //plan actions which have configurations need to have a value\r\n                    for(let j=0; j < formData.actionList[i].configurations.length; j++){\r\n                        if(!formData.actionList[i].configurations[j].hasOwnProperty(\"value\")  \r\n                            || !ValidInputs().validStringOrDropDownSelection(formData.actionList[i].configurations[j].value)){\r\n                            valid = false\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            valid = false\r\n        }\r\n\r\n        if(valid){\r\n            //remore error appearance\r\n            setFormErrorDisplay(false)\r\n\r\n            //get List of Actions and their configurations\r\n            let resData = await ApiModule().createRule(formData)\r\n            resData[\"openModal\"] = true\r\n            setCreateRuleResponseMessage(resData)\r\n            return\r\n        }\r\n             \r\n        //enable error display\r\n        setFormErrorDisplay(true)\r\n    }\r\n\r\n    function generateActionListCustomTableBodyStep3(){\r\n        let renderListToReturn = []\r\n        let uniqueId = 0;\r\n        for(let i=0; i < formData.actionList.length; i++){\r\n            renderListToReturn.push(\r\n                <Table.Row key={uniqueId} >\r\n                    <Table.Cell >\r\n                        {i + 1}\r\n                    </Table.Cell>\r\n                    <Table.Cell >\r\n                        {formData.actionList[i].actionId}\r\n                    </Table.Cell>\r\n                    <Table.Cell >\r\n                        {formData.actionList[i].actionName}\r\n                    </Table.Cell>\r\n                    <Table.Cell>\r\n                        { i === 0 ? null :\r\n                        <Button icon color='blue' index={i} onClick={increaseActionPriorityHandler}>\r\n                            <Icon name='angle double up' />\r\n                        </Button>\r\n                        }\r\n                        { i === formData.actionList.length -1 ? null :\r\n                        <Button icon color='teal' index={i} onClick={decreaseActionPriorityHandler}>\r\n                            <Icon name='angle double down' />\r\n                        </Button>\r\n                        }\r\n                        <Button icon color='red' index={i} actionid={formData.actionList[i].actionId} \r\n                            onClick={removeActionFromPlanHandler}\r\n                        >\r\n                            <Icon name='delete'/>\r\n                        </Button>\r\n                    </Table.Cell>\r\n                </Table.Row>\r\n            )\r\n            uniqueId++\r\n        }\r\n        return renderListToReturn\r\n    }\r\n\r\n    function generateConfigurationListCustomTableBodyStep3(){\r\n        let renderListToReturn = []\r\n        let uniqueId = 0;\r\n\r\n        for(let i=0; i < formData.actionList.length; i++){\r\n            if(formData.actionList[i].configurations !== null){\r\n                for(let j=0; j < formData.actionList[i].configurations.length; j++){\r\n                    renderListToReturn.push(\r\n                        <Table.Row key={uniqueId} >\r\n                            <Table.Cell >\r\n                                {formData.actionList[i].actionId}\r\n                            </Table.Cell>\r\n                            <Table.Cell >\r\n                                {formData.actionList[i].configurations[j].keyName}\r\n                            </Table.Cell>\r\n                            <Table.Cell >\r\n                                <Form.Input name=\"value\" actionindex={i} configurationindex={j} \r\n                                    onChange={configurationDataHandler} required\r\n                                    error={(formErrorDisplay && !ValidInputs().validStringOrDropDownSelection(formData.actionList[i].configurations[j].value)) ? \r\n                                            { content: 'Please enter a value for this configuration', pointing: 'above' }\r\n                                        :\r\n                                            null\r\n                                    }\r\n                                />\r\n                            </Table.Cell>\r\n                        </Table.Row>\r\n                    )\r\n                    uniqueId++\r\n                }\r\n            }\r\n        }\r\n        return renderListToReturn\r\n    }\r\n\r\n    function step3(){\r\n        return (\r\n        <div>\r\n            {listOfActionsDropDown !== null ?\r\n            <div>\r\n                <Grid columns={1}>\r\n                    <Grid.Column>\r\n                        <Button color='grey' circular floated='right' onClick={createRuleHandler}> Create Rule</Button>\r\n                    </Grid.Column>\r\n                </Grid>\r\n                <Grid doubling stackable columns={2}>\r\n                    <Grid.Column>\r\n                        <Segment style={{marginLeft: \"auto\", marginRight: \"auto\"}}>\r\n                            <Header as=\"h5\" textAlign=\"center\"> Configure adaptation plan actions</Header>\r\n                            <Divider/>\r\n                            {listOfActionsDropDown.filter((action) => action.chosen === \"false\").length > 0 ?\r\n                                <Form widths='equal'>\r\n                                    <Form.Group>\r\n                                        <Form.Dropdown\r\n                                            onChange={(ev,atts) => {setTempActionChosen(atts.value)}}\r\n                                            selectOnBlur={false}\r\n                                            selectOnNavigation={false}\r\n                                            required\r\n                                            selection\r\n                                            options={listOfActionsDropDown.filter((action) => action.chosen === \"false\")}\r\n                                            label='Add actions to the adaptation plan'\r\n                                            name=\"actionList\"\r\n                                            error={\r\n                                                formErrorDisplay && !ValidInputs().validDropDownMultipleSelection(formData.actionList) ?\r\n                                                { content: 'Please choose, at least, one action for the adaptation', pointing: 'above' }\r\n                                                :\r\n                                                null\r\n                                            }\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Button color=\"blue\" floated='right' circular type='submit' onClick={step3AddActionHandler}> \r\n                                            <Icon name='plus'/>\r\n                                            Add Action\r\n                                        </Form.Button>\r\n                                    </Form.Group>\r\n                                </Form>\r\n                            :\r\n                                null\r\n                            }\r\n                            <Table textAlign=\"center\" compact celled selectable> \r\n                                <TableHeader tableHeaders = {tableHeadersActionList} ></TableHeader>\r\n                                <Table.Body>{\r\n                                    generateActionListCustomTableBodyStep3()\r\n                                }\r\n                                </Table.Body>\r\n                            </Table>\r\n                        </Segment>\r\n                    </Grid.Column>\r\n                    <Grid.Column>\r\n                        <Segment style={{marginLeft: \"auto\", marginRight: \"auto\"}}>\r\n                            <Header as=\"h5\" textAlign=\"center\"> Necessary actions' configurations</Header>\r\n                            <Divider/>\r\n                            <Form>\r\n                                <Table textAlign=\"center\" compact celled selectable> \r\n                                    <TableHeader tableHeaders = {tableHeadersConfigurationList} ></TableHeader>\r\n                                    <Table.Body>{\r\n                                        generateConfigurationListCustomTableBodyStep3()\r\n                                    }\r\n                                    </Table.Body>\r\n                                </Table>\r\n                            </Form>\r\n                        </Segment> \r\n                    </Grid.Column>\r\n                </Grid>\r\n                <CustomModal \r\n                    successPath=\"/getAdaptationRules\" \r\n                    modalInfo={createRuleResponseMessage} \r\n                />\r\n            </div>\r\n            :\r\n                <Loader active inline='centered'> Retrieving content </Loader>\r\n            }\r\n        </div> \r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Grid centered>\r\n                <Grid.Row> \r\n                    <Grid.Column>\r\n                        <Divider section horizontal>\r\n                            <Header  as=\"h1\" textAlign=\"center\">Create Adaptation Rule</Header> \r\n                        </Divider>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n            <br/>\r\n            <Container>\r\n                <Step.Group ordered widths={3}>\r\n                    <Step  \r\n                        completed = {step > 1} \r\n                        link\r\n                        onClick={() =>{\r\n                            setStep(1)\r\n                            backToStep1Clean()\r\n                        }}\r\n                    >\r\n                        <Step.Content>\r\n                            <Step.Title>Rule's resource </Step.Title>\r\n                            <Step.Description>Select a resource for a rule to apply</Step.Description>\r\n                        </Step.Content>\r\n                    </Step>\r\n\r\n                    <Step \r\n                        completed = {step > 2} \r\n                        disabled = {step < 2} \r\n                        link\r\n                        onClick={() =>{\r\n                            setStep(2)\r\n                            backToStep2Clean()\r\n                        }} \r\n                    >\r\n                        <Step.Content>\r\n                            <Step.Title>Rule's name and condition</Step.Title>\r\n                            <Step.Description>Define the name of the adaptation rule and the condition that triggers it</Step.Description>\r\n                        </Step.Content>\r\n                    </Step>\r\n\r\n                    <Step disabled = {step < 3} link>\r\n                        <Step.Content>\r\n                            <Step.Title>Rule's adaptation plan</Step.Title>\r\n                            <Step.Description>Define the actions, and their configurations, of the plan to execute\r\n                                when the condition is triggered\r\n                            </Step.Description>\r\n                        </Step.Content>\r\n                    </Step>\r\n                </Step.Group>\r\n                { \r\n                activeResources === null ? \r\n                    <div>\r\n                        <Loader active inline='centered'> Retrieving content </Loader>\r\n                        <br/>\r\n                    </div>\r\n                :\r\n                    choseStepRender()\r\n                }\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewRulePage;"],"names":["props","navigate","useNavigate","useState","successPath","openModal","messageType","message","modalState","setModalState","modalCloseHandler","ev","atts","modalInfo","useEffect","centered","closeIcon","open","onClose","color","onClick","uniqueId","map","headerName","returnTableHeader","step","setStep","formErrorDisplay","setFormErrorDisplay","resourceId","ruleName","metricId","operator","activationThreshold","actionList","formData","setFormData","activeResources","setActiveResources","configurationProfile","setConfigurationProfile","qualityModel","setQualityModel","listOfMetrics","setListOfMetrics","ruleConditionOperatorOptions","key","value","text","listOfActions","setListOfActions","listOfActionsDropDown","setListOfActionsDropDown","tempActionChosen","setTempActionChosen","tableHeadersActionList","tableHeadersConfigurationList","createRuleResponseMessage","setCreateRuleResponseMessage","formDataOnChangeHandler","newFormData","JSON","parse","stringify","name","submitStep1Handler","preventDefault","ValidInputs","validStringOrDropDownSelection","ApiModule","getResourceWeightsAndMetricsTree","res","queryParams","leafAttributes","getConfigurationProfileListOfMetrics","configurationProfileId","DropDownDataFormat","convertMetrics","submitStep2Handler","validFloatBetweenZeroAndOne","getActionsAndConfigsByResource","actions","convertActions","step3AddActionHandler","stopPropagation","filter","action","actionId","length","newActionDropDownList","actionDropDown","chosen","push","removeActionFromPlanHandler","prevList","actionid","prevData","splice","index","increaseActionPriorityHandler","prevItem","decreaseActionPriorityHandler","nextItem","configurationDataHandler","actionindex","configurations","configurationindex","createRuleHandler","valid","i","j","hasOwnProperty","createRule","resData","generateActionListCustomTableBodyStep3","renderListToReturn","actionName","icon","generateConfigurationListCustomTableBodyStep3","keyName","onChange","required","error","content","pointing","getActiveResources","unprocessedResources","convertResources","makeAPIRequest","section","horizontal","as","textAlign","ordered","widths","completed","link","backToStep1Clean","disabled","backToStep2Clean","active","inline","compact","style","marginLeft","marginRight","grouped","selectOnBlur","selectOnNavigation","defaultValue","clearable","search","selection","options","placeholder","label","floated","circular","type","stackable","columns","width","height","preferences","data","margin","whiteSpace","doubling","validDropDownMultipleSelection","celled","selectable","tableHeaders","choseStepRender"],"sourceRoot":""}