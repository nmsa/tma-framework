{"version":3,"file":"static/js/433.e1f23f96.chunk.js","mappings":"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","sources":["components/tables/TableHeader.js","pages/ConfigurationProfiles/ViewConfigurationProfilePage.js","utils/api/ApiModule.js","configurations/Configurations.js","utils/treeRendering/TreeLabel.js","utils/treeRendering/TreeRender.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableBody.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableCell.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableHeader.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableFooter.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableHeaderCell.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableRow.js","../node_modules/semantic-ui-react/dist/es/collections/Table/Table.js"],"sourcesContent":["import {Table} from 'semantic-ui-react'\r\n\r\nfunction TableHeader(props){\r\n    let uniqueId = 0;\r\n    function returnTableHeader(headerName){\r\n        //key property must be set and be unique because React uses it to optimize rendering process \r\n        return <Table.HeaderCell key={uniqueId++}> {headerName}</Table.HeaderCell>\r\n    }\r\n\r\n    return(\r\n    <Table.Header>\r\n      <Table.Row>\r\n        {props[\"tableHeaders\"].map(headerName => returnTableHeader(headerName))}\r\n      </Table.Row>\r\n    </Table.Header>\r\n    )\r\n}\r\n\r\nexport default TableHeader","import {Divider, Label, Header, Grid, Form, Container, Segment, Table,Loader} from 'semantic-ui-react'\r\nimport ApiModule from \"../../utils/api/ApiModule\"\r\nimport React, {useState, useEffect} from \"react\"\r\nimport {useLocation,useParams} from \"react-router-dom\"\r\nimport TreeRender from '../../utils/treeRendering/TreeRender';\r\nimport TableHeader from \"../../components/tables/TableHeader\"\r\n\r\nfunction ViewConfigurationProfilePage(props){\r\n    const configurationProfileId = useParams()[\"id\"];\r\n    const tableHeaders = [\r\n        \"metricName\", \r\n        \"weight\"\r\n    ]\r\n    // add \"threshold\" above to visualize a node's threshold attribute\r\n\r\n    //configurationProfile data received from API\r\n    const [configurationProfile,setConfigurationProfile] = useState(null)\r\n\r\n    //read quality model from passed variable\r\n    const qualityModelData = useLocation()[\"state\"][\"data\"]\r\n    \r\n    function makeAPIRequest(){\r\n        ApiModule().getConfigurationProfileById(configurationProfileId, setConfigurationProfile)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        //perform API request\r\n        makeAPIRequest()\r\n    },[])\r\n    \r\n    //from quality model's tree of metrics, find all the metric nodes and their names and ids, to later construct the form\r\n    function getMetricsList(metric, listOfMetrics){\r\n        listOfMetrics.push(\r\n            {\r\n                \"metricName\": metric[\"metricName\"],\r\n                \"metricId\": metric[\"metricId\"]\r\n            })\r\n        for(let child of metric[\"childMetrics\"]){\r\n            getMetricsList(child,listOfMetrics)\r\n        }\r\n    }\r\n\r\n    function generateCustomTableBody(){\r\n        let listOfMetrics = []\r\n        getMetricsList(qualityModelData[\"metric\"], listOfMetrics);\r\n        let uniqueId = -4;\r\n        return (\r\n            <Table.Body>\r\n                {\r\n                    listOfMetrics.map((metric) => \r\n                        {\r\n                            uniqueId = uniqueId+4\r\n                            return generateCustomTableRow(metric,uniqueId); \r\n                        }\r\n                    )\r\n                }\r\n            </Table.Body>\r\n        )\r\n    }\r\n\r\n    function generateCustomTableRow(metric,uniqueId){\r\n        let preference = configurationProfile.preferences.find(preference => preference.metricId === metric.metricId)\r\n        return(\r\n            <Table.Row key={uniqueId++}>\r\n                <Table.Cell key={uniqueId++}>\r\n                    {metric[\"metricName\"]}\r\n                </Table.Cell>\r\n                <Table.Cell key={uniqueId++}>\r\n                    <Form.Field>\r\n                        {preference.weight}\r\n                    </Form.Field>\r\n                </Table.Cell>\r\n                {/* uncomment to visualize a node's threshold attribute\r\n                <Table.Cell key={uniqueId++}>\r\n                    <Form.Field>\r\n                        {preference.threshold}\r\n                    </Form.Field>\r\n                </Table.Cell>\r\n                */}\r\n            </Table.Row>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <Grid centered>\r\n            <Grid.Row >\r\n                <Grid.Column width={15}>\r\n                <Divider section horizontal>\r\n                    <Header as=\"h1\" textAlign=\"center\">Configuration Profile Details</Header> \r\n                </Divider>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            </Grid>\r\n            {configurationProfile !== null ?\r\n                <Container>\r\n                    <Grid stackable columns={2}>\r\n                        <Grid.Column>\r\n                            <Segment>\r\n                                <Header as=\"h3\" textAlign=\"center\"> Quality Model information</Header>\r\n                                <Divider/>\r\n                                <Form widths='equal'>\r\n                                    <Form.Group >\r\n                                        <Form.Field>\r\n                                            <label>Id:</label>\r\n                                            {qualityModelData[\"qualityModelId\"]}\r\n                                        </Form.Field>\r\n                                        <Form.Field>\r\n                                            <label>Name:</label>\r\n                                            {qualityModelData[\"modelName\"]}\r\n                                        </Form.Field>\r\n                                    </Form.Group>\r\n                                </Form>\r\n                            </Segment>\r\n                            <Segment>\r\n                                <Header as=\"h3\" textAlign=\"center\"> Weighted metrics tree</Header>\r\n                                <Divider/>\r\n                                <TreeRender width={\"100%\"} height={\"50vh\"} \r\n                                    preferences={configurationProfile.preferences}\r\n                                    data={qualityModelData[\"metric\"]} \r\n                                    configurationProfile={true}\r\n                                />\r\n                            </Segment>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            <Segment>\r\n                                <Header as=\"h3\" textAlign=\"center\"> Configuration Profile information</Header>\r\n                                <Divider/>\r\n                                <Form>\r\n                                    <Form.Group widths=\"equal\">\r\n                                        <Form.Field>\r\n                                            <label>Id:</label>\r\n                                            {configurationProfile[\"configurationProfileId\"]}   \r\n                                        </Form.Field>\r\n                                        <Form.Field>\r\n                                            <label>Name:</label>\r\n                                            {configurationProfile[\"profileName\"]}   \r\n                                        </Form.Field>\r\n                                    </Form.Group>\r\n                                    <Divider section horizontal>\r\n                                        <Header as=\"h5\" textAlign=\"center\">Metrics weigths \r\n                                        {/*uncomment to visualize thresholds\r\n                                            and thresholds\r\n                                        */}\r\n                                        </Header>     \r\n                                    </Divider>\r\n                                    <Table  \r\n                                    style = {{marginLeft: \"auto\", marginRight: \"auto\"}} \r\n                                    textAlign=\"center\" \r\n                                    compact   \r\n                                    celled \r\n                                    selectable> \r\n                                        <TableHeader tableHeaders = {tableHeaders} ></TableHeader>\r\n                                        {generateCustomTableBody()}\r\n                                    </Table> \r\n                                </Form>\r\n                            </Segment>\r\n                        </Grid.Column>\r\n                    </Grid>  \r\n                </Container>\r\n                :<Loader active inline='centered'> Retrieving content </Loader>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewConfigurationProfilePage;","import axios from 'axios';\r\nimport Configurations from '../../configurations/Configurations';\r\n\r\nfunction ApiModule() {\r\n  const apiURL = Configurations().API_BASE_URL;\r\n\r\n  //return list of metrics\r\n  function getMetrics(queryParams){\r\n    let endpoint = apiURL + \"getMetrics\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"metrics\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single metric\r\n  function getMetricById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getMetrics/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"metric\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //create a metric\r\n  function createMetric(body){\r\n    let endpoint = apiURL + \"createMetric\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of descriptions\r\n  function getDescriptions(queryParams){\r\n    let endpoint = apiURL + \"getDescriptions\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"descriptions\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of quality models\r\n  function getQualityModels(queryParams, setStateFunction){\r\n    let endpoint = apiURL + \"getQualityModels\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"qualityModels\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single quality model\r\n  function getQualityModelById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getQualityModels/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"qualityModel\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n  \r\n  //create a quality model\r\n  function createQualityModel(body){\r\n    let endpoint = apiURL + \"createQualityModel\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //create a configuration profile for a quality model\r\n  function createConfigurationProfile(body){\r\n    let endpoint = apiURL + \"createConfigurationProfile\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single quality model\r\n  function getConfigurationProfileById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getConfigurationProfile/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"configurationProfile\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of currently monitored resources. queryParams specify if the resources to be retrieved should have actions\r\n  //associated in the case of creating a rule ('createRule' param should be set to true). \r\n  function getActiveResources(queryParams){\r\n    let endpoint = apiURL + \"getResources\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"resources\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of weights and metric tree associated to the resource\r\n  function getResourceWeightsAndMetricsTree(id){\r\n    let endpoint = apiURL + \"getResources/\" + id + \"/weightedTree\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a list of metrics that can be either leaf attribute or \"normal\" metrics exclusively\r\n  function getConfigurationProfileListOfMetrics(configurationProfileId, queryParams){\r\n    let endpoint = apiURL + \"getConfigurationProfile/\" + configurationProfileId + \"/listOfMetrics\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"listOfMetrics\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getResourceData(resourceId, queryParams){\r\n    let endpoint = apiURL + \"getResources/\" + resourceId + \"/data\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"plotData\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getSimulationData(body){\r\n    let endpoint = apiURL + \"simulateData\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.patch(endpoint,body).then((res) => \r\n        {\r\n          return res.data[\"simulationData\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getPlotsConfigs(){\r\n    let endpoint = apiURL + \"getPlotsConfigs\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data[\"plotsConfigs\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function savePlotConfig(body){\r\n    let endpoint = apiURL + \"addPlotConfig\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return error.response\r\n        }\r\n      )\r\n  }\r\n\r\n  function replacePlotConfig(body){\r\n    let endpoint = apiURL + \"replacePlotConfig\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.put(endpoint,body).then((res) => \r\n        {\r\n          return res\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return error.response\r\n        }\r\n      )\r\n  }\r\n\r\n  function deletePlotConfig(id){\r\n    let endpoint = apiURL + \"deletePlotConfig/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.delete(endpoint).then((res) => \r\n        {\r\n          return res.status\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of rules names\r\n  function getRulesNames(queryParams){\r\n    let endpoint = apiURL + \"getRules\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"rulesNames\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return deatils of a rule\r\n  function getRuleCode(ruleName){\r\n    let endpoint = apiURL + \"getRules/\" + ruleName\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data[\"ruleDetail\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function removeRule(ruleName){\r\n    let endpoint = apiURL + \"removeRule/\" + ruleName\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.delete(endpoint).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getActionsAndConfigsByResource(queryParams){\r\n    let endpoint = apiURL + \"getActions/\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //create an adaptation rule\r\n  function createRule(body){\r\n    let endpoint = apiURL + \"addRule\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  return {\r\n    getMetrics,\r\n    getMetricById,\r\n    createMetric,\r\n    getDescriptions,\r\n    getQualityModels,\r\n    getQualityModelById,\r\n    createQualityModel,\r\n    createConfigurationProfile,\r\n    getConfigurationProfileById,\r\n    getActiveResources,\r\n    getResourceWeightsAndMetricsTree,\r\n    getConfigurationProfileListOfMetrics,\r\n    getResourceData,\r\n    getSimulationData,\r\n    getPlotsConfigs,\r\n    savePlotConfig,\r\n    replacePlotConfig,\r\n    deletePlotConfig,\r\n    getRulesNames,\r\n    getRuleCode,\r\n    removeRule,\r\n    getActionsAndConfigsByResource,\r\n    createRule,\r\n  };\r\n\r\n}\r\n\r\nexport default ApiModule","export default function Configurations() {\r\n    const API_IP_ADDRESS = \"192.168.1.68\" //\"10.3.3.68\"\r\n    const API_PORT = \"8080\"\r\n\r\n    const configData = {\r\n        \"API_BASE_URL\": \"http://\" + API_IP_ADDRESS + \":\" + API_PORT + \"/\",\r\n    }\r\n\r\n    return configData;\r\n}","import React, { useEffect, useState } from \"react\";\r\n\r\nfunction TreeLabel(props){\r\n    const [extraLabelForNodes, setExtraLabelForNodes] = useState(\r\n            {\r\n                text: (props[\"text\"].toString().split(\"\\n\")[0])\r\n            }\r\n        )\r\n\r\n    useEffect(()=>{\r\n        //if this is a node's label, it might be needed to add an extra label to represent weights. Thereby, check if this is\r\n        // a node's label and then split received text by \"\\n\". If the size is > 1, it means it has an extra label to render.\r\n        //Then, save both texts, the original and the extra label. In the return statement add extra label if its set on the \r\n        //state variable\r\n        if(props.node === true){\r\n            let labelsText = props.text.split(\"\\n\")\r\n            let extraLabelForNodesTemp = JSON.parse(JSON.stringify(extraLabelForNodes))\r\n            extraLabelForNodesTemp.text = labelsText[0]\r\n            if(labelsText.length > 1){\r\n                extraLabelForNodesTemp.weightLabel = labelsText[1]\r\n            }\r\n            setExtraLabelForNodes(extraLabelForNodesTemp)\r\n        }    \r\n    },[props.text])\r\n    \r\n    //Default customization of <Canvas> tag from reaflow library generated graphically bad labels. The examples were followed and\r\n    //used for edge property => <Edge \r\n    //                    style={{ stroke: 'black', strokeWidth: 2 }}\r\n    //                    label={<Label style={{ fill: 'red', fontWeight: \"900\"}} />}\r\n    //                  />}\r\n    //Thereby html tags generated with the default configs were analyzed, and found out the node graphs were being \r\n    //generated with SVG. \r\n    //Next, props being passed to the label were analyzed to understand the way the library renders the graph. Found \r\n    //out 'transform=\"translate(x,y)\" was used to position the labels.\r\n    //All the information passed to the label is retrieved from the props, which are the 'x' and 'y' assigned positions \r\n    //for the label inside the canvas, and the 'text' which the label presents on the screen.\r\n    //Finally, used svg elements to customize the labels in a own way. \r\n    return props[\"node\"] === false ?\r\n        <g transform={\"translate(\" + props.x + \",\" + props.y + \")\"}> \r\n            <circle fill=\"white\" stroke=\"#4287f5\" strokeWidth=\"2\" r=\"20\" /> \r\n            <text textAnchor=\"middle\" dominantBaseline = \"middle\" fill=\"black\">{props.text}</text>   \r\n        </g>\r\n        : \r\n        (\r\n            <React.Fragment>\r\n                <g transform={\"translate(\" + props.x + \",\" + props.y + \")\"}> \r\n                    <text fill=\"black\">{extraLabelForNodes.text}</text>   \r\n                </g>\r\n                {\r\n                    extraLabelForNodes.weightLabel !== undefined && extraLabelForNodes.weightLabel !== \"\" ?\r\n                    <g transform={\"translate(\" + props.x + \",\" + props.y + \")\"}> \r\n                        <circle cx= {props.x + props.width} cy={props.y + 6*props.height} fill=\"white\" stroke=\"#4287f5\" strokeWidth=\"2\" r=\"20\" />\r\n                        <text \r\n                            textAnchor=\"middle\"\r\n                            dominantBaseline = \"middle\"\r\n                            x={props.x + props.width} \r\n                            y={props.y + 6*props.height} \r\n                            fill=\"black\">\r\n                                {extraLabelForNodes.weightLabel}\r\n                        </text>      \r\n                    </g>\r\n                    :null\r\n                }               \r\n            </React.Fragment>\r\n        ) \r\n}\r\n\r\nexport default TreeLabel;","import { useEffect, useRef, useState, forwardRef, useImperativeHandle } from 'react';\r\nimport { Canvas, Edge, Node, Label } from 'reaflow';\r\nimport {Loader, Button, Icon} from \"semantic-ui-react\"\r\nimport TreeLabel from \"./TreeLabel\"\r\n\r\n\r\nfunction TreeRender (props,ref) {\r\n    const data = props[\"data\"];\r\n    const [nodes, setNodes] = useState([]);\r\n    const [edges, setEdges] = useState([]);\r\n    const [treeReady,setTreeReady] = useState(false);\r\n    const canvasRef = useRef();\r\n    const canvasDivRef = useRef();\r\n\r\n    //If it is to render a configuration profile, show the weights\r\n    const configurationProfile = props[\"configurationProfile\"];\r\n    const preferences = props[\"preferences\"];\r\n    \r\n    //Use of auxiliar variables to hold nodes and edges information while that information is being retrieved\r\n    //Later, once all the information is retrieved, use state variables \"edges\" and \"nodes\" to render \r\n    var nodesaux = [];\r\n    var edgesaux = [];\r\n    \r\n    //function that allows formating received data into the format requested by reaflow (tree rendering library)\r\n    function processData(parent){\r\n\r\n      //add current node (which is the parent) to list of nodes\r\n      let nodeToAdd = {\r\n        id: parent[\"metricId\"].toString(),\r\n        text: parent[\"metricName\"]\r\n      }\r\n      nodesaux.push(nodeToAdd);\r\n\r\n      //iterate over each child of parent node, add edge information and recursively call this function \"processData\"\r\n      //for each child to repeat the process\r\n      for(let child of parent[\"childMetrics\"]){\r\n        let edgeToAdd = {\r\n          id: parent[\"metricId\"].toString() + child[\"metricId\"].toString(),\r\n          from: child[\"metricId\"].toString(),\r\n          to: parent[\"metricId\"].toString(),\r\n        }\r\n        if(configurationProfile){\r\n          edgeToAdd.text = preferences.find(preference => preference.metricId === child.metricId).weight;\r\n        }\r\n        edgesaux.push(edgeToAdd)\r\n        processData(child)\r\n      }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        //Once the component is rendered, deal with the transformation of the format of the data received from the API \r\n        //into the format needed by the tree library \r\n        processData(data)\r\n        if(configurationProfile){\r\n          let rootNode = nodesaux.find(node => parseInt(node.id) === data.metricId)\r\n          rootNode.text = rootNode.text.split(\"\\n\")[0] + \"\\n\" + \r\n            preferences.find(preference => preference.metricId === parseInt(rootNode.id)).weight;\r\n        }\r\n        //use state to set and render processed nodes and edges information  \r\n        setNodes(nodesaux)\r\n        setEdges(edgesaux)\r\n        setTreeReady(true)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[data]);\r\n\r\n    useEffect(() => {\r\n      //if the Tree has been rendered, the div is no longer undefined and thereby wheel event can be added\r\n      // to later allow CRTL + MOUSEWHEEl to zoom in/out on the canvas, if buttons aren't wished to be used\r\n      if(canvasDivRef.current !== undefined){\r\n        canvasDivRef.current.addEventListener('wheel', mouseWheelHandler,{passive:false});\r\n      }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[treeReady]);\r\n    \r\n    const zoomIn = () => {\r\n      canvasRef.current.zoomIn()\r\n    }\r\n\r\n    const zoomOut = () => {\r\n      canvasRef.current.zoomOut()\r\n    }\r\n\r\n    const fitCanvas = () => {\r\n      canvasRef.current.fitCanvas()\r\n    }\r\n\r\n    function mouseWheelHandler(event){\r\n      if(event.ctrlKey === true){\r\n        event.preventDefault();\r\n        //Wheel down\r\n        if(event.wheelDelta < 0) {\r\n            zoomOut()\r\n        }\r\n        //Wheel up\r\n        else {\r\n          zoomIn()\r\n        }\r\n      }\r\n    }\r\n\r\n    function updateWeightsHandler(metricIdToUpdateWeight,weightToApply){\r\n      let newEdges = JSON.parse(JSON.stringify(edges))\r\n      let foundEdge = false\r\n      for(let edgeInfo of newEdges){\r\n        if(edgeInfo.id.endsWith(metricIdToUpdateWeight)){\r\n          foundEdge = true\r\n          edgeInfo.text = weightToApply\r\n          setEdges(newEdges)\r\n          fitCanvas()\r\n          break;\r\n        }\r\n      }\r\n      //didn't found Edge, which means the weight its being applied on the root node. Thereby, add an extra label to\r\n      //show the node's weight assigned\r\n      if(!foundEdge){\r\n        //copy state variable and find the node to which the extra label will be added\r\n        let newNodes = JSON.parse(JSON.stringify(nodes))\r\n        let nodeRef = newNodes.find(node => parseInt(node.id) === metricIdToUpdateWeight)\r\n        //after finding the node split its display text by '\\n' and take the 1st word which is the original text. Then, add the\r\n        //text of the weight to show on the extra label. This split by '\\n' is needed as multiple changes would add multiple\r\n        //'\\n' to the text and that would render multiple extra labels\r\n        nodeRef.text = nodeRef.text.split(\"\\n\")[0] + \"\\n\" + weightToApply\r\n        setNodes(newNodes)\r\n      }\r\n    }\r\n\r\n    //Needed to expose tree update functions to outside components\r\n    useImperativeHandle(ref, () => ({\r\n      updateWeightsHandler\r\n    }));\r\n\r\n    //Followed the demos and docs of reaflow libray at https://reaflow.dev/?path=/story/docs-getting-started-components--page\r\n    return (\r\n      treeReady === true ?\r\n      <div>\r\n        <div>\r\n          <p style={{marginBottom:\"5px\"}} align=\"right\">\r\n            <Button icon color='blue' onClick={zoomIn}> \r\n              <Icon name='zoom-in'/>\r\n            </Button>\r\n            <Button icon color='blue' onClick={zoomOut}> \r\n              <Icon name='zoom-out'/>\r\n            </Button>\r\n          </p>\r\n        </div>  \r\n        <div ref={canvasDivRef}>\r\n          <Canvas\r\n              disabled={true}\r\n              arrow={null}\r\n              height={ props[\"height\"]}\r\n              width={ props[\"width\"]}\r\n              nodes={nodes}\r\n              edges={edges}\r\n              readonly = {true}\r\n              animated = {false}\r\n              direction= \"UP\"\r\n              ref= {canvasRef}\r\n              fit = {true}\r\n              minZoom = {-0.9}\r\n              zoomable = {false}\r\n              node={\r\n                <Node\r\n                  style={{ stroke: 'black', fill: '#ffe6cc', strokeWidth: 3}}\r\n                  label={<TreeLabel node={true}/>}\r\n                />\r\n              }\r\n              edge={<Edge \r\n                      style={{ stroke: 'black', strokeWidth: 2 }}\r\n                      label={<TreeLabel node={false}/>}\r\n                    />}\r\n          />\r\n          {/* NODE LABEL:            label={<Label style={{ fill: 'black', fontWeight: \"900\"}}>*/ }\r\n        </div> \r\n      </div>: <Loader active inline='centered'> Constructing tree </Loader>\r\n    )\r\n}\r\n\r\n//forwardRef necessary so that methods can be invoked and state variables be accessed\r\nexport default forwardRef(TreeRender);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getElementType, getUnhandledProps } from '../../lib';\n\nfunction TableBody(props) {\n  var children = props.children,\n      className = props.className;\n  var classes = cx(className);\n  var rest = getUnhandledProps(TableBody, props);\n  var ElementType = getElementType(TableBody, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nTableBody.handledProps = [\"as\", \"children\", \"className\"];\nTableBody.defaultProps = {\n  as: 'tbody'\n};\nTableBody.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string\n} : {};\nexport default TableBody;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport Icon from '../../elements/Icon';\n/**\n * A table row can have cells.\n */\n\nfunction TableCell(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      content = props.content,\n      disabled = props.disabled,\n      error = props.error,\n      icon = props.icon,\n      negative = props.negative,\n      positive = props.positive,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      warning = props.warning,\n      width = props.width;\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(warning, 'warning'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(width, 'wide'), className);\n  var rest = getUnhandledProps(TableCell, props);\n  var ElementType = getElementType(TableCell, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), Icon.create(icon), content);\n}\n\nTableCell.handledProps = [\"active\", \"as\", \"children\", \"className\", \"collapsing\", \"content\", \"disabled\", \"error\", \"icon\", \"negative\", \"positive\", \"selectable\", \"singleLine\", \"textAlign\", \"verticalAlign\", \"warning\", \"width\"];\nTableCell.defaultProps = {\n  as: 'td'\n};\nTableCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A cell can be active or selected by a user. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A cell can be collapsing so that it only uses as much space as required. */\n  collapsing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A cell can be disabled. */\n  disabled: PropTypes.bool,\n\n  /** A cell may call attention to an error or a negative value. */\n  error: PropTypes.bool,\n\n  /** Add an Icon by name, props object, or pass an <Icon /> */\n  icon: customPropTypes.itemShorthand,\n\n  /** A cell may let a user know whether a value is bad. */\n  negative: PropTypes.bool,\n\n  /** A cell may let a user know whether a value is good. */\n  positive: PropTypes.bool,\n\n  /** A cell can be selectable. */\n  selectable: PropTypes.bool,\n\n  /** A cell can specify that its contents should remain on a single line and not wrap. */\n  singleLine: PropTypes.bool,\n\n  /** A table cell can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table cell can adjust its text alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A cell may warn a user. */\n  warning: PropTypes.bool,\n\n  /** A table can specify the width of individual columns independently. */\n  width: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nTableCell.create = createShorthandFactory(TableCell, function (content) {\n  return {\n    content: content\n  };\n});\nexport default TableCell;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A table can have a header.\n */\n\nfunction TableHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      fullWidth = props.fullWidth;\n  var classes = cx(useKeyOnly(fullWidth, 'full-width'), className);\n  var rest = getUnhandledProps(TableHeader, props);\n  var ElementType = getElementType(TableHeader, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nTableHeader.handledProps = [\"as\", \"children\", \"className\", \"content\", \"fullWidth\"];\nTableHeader.defaultProps = {\n  as: 'thead'\n};\nTableHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A definition table can have a full width header or footer, filling in the gap left by the first column. */\n  fullWidth: PropTypes.bool\n} : {};\nexport default TableHeader;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getUnhandledProps } from '../../lib';\nimport TableHeader from './TableHeader';\n/**\n * A table can have a footer.\n */\n\nfunction TableFooter(props) {\n  var as = props.as;\n  var rest = getUnhandledProps(TableFooter, props);\n  return /*#__PURE__*/React.createElement(TableHeader, _extends({}, rest, {\n    as: as\n  }));\n}\n\nTableFooter.handledProps = [\"as\"];\nTableFooter.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType\n} : {};\nTableFooter.defaultProps = {\n  as: 'tfoot'\n};\nexport default TableFooter;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getUnhandledProps, useValueAndKey } from '../../lib';\nimport TableCell from './TableCell';\n/**\n * A table can have a header cell.\n */\n\nfunction TableHeaderCell(props) {\n  var as = props.as,\n      className = props.className,\n      sorted = props.sorted;\n  var classes = cx(useValueAndKey(sorted, 'sorted'), className);\n  var rest = getUnhandledProps(TableHeaderCell, props);\n  return /*#__PURE__*/React.createElement(TableCell, _extends({}, rest, {\n    as: as,\n    className: classes\n  }));\n}\n\nTableHeaderCell.handledProps = [\"as\", \"className\", \"sorted\"];\nTableHeaderCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A header cell can be sorted in ascending or descending order. */\n  sorted: PropTypes.oneOf(['ascending', 'descending'])\n} : {};\nTableHeaderCell.defaultProps = {\n  as: 'th'\n};\nexport default TableHeaderCell;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport _map from \"lodash-es/map\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useVerticalAlignProp } from '../../lib';\nimport TableCell from './TableCell';\n/**\n * A table can have rows.\n */\n\nfunction TableRow(props) {\n  var active = props.active,\n      cellAs = props.cellAs,\n      cells = props.cells,\n      children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      error = props.error,\n      negative = props.negative,\n      positive = props.positive,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      warning = props.warning;\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(warning, 'warning'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), className);\n  var rest = getUnhandledProps(TableRow, props);\n  var ElementType = getElementType(TableRow, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), _map(cells, function (cell) {\n    return TableCell.create(cell, {\n      defaultProps: {\n        as: cellAs\n      }\n    });\n  }));\n}\n\nTableRow.handledProps = [\"active\", \"as\", \"cellAs\", \"cells\", \"children\", \"className\", \"disabled\", \"error\", \"negative\", \"positive\", \"textAlign\", \"verticalAlign\", \"warning\"];\nTableRow.defaultProps = {\n  as: 'tr',\n  cellAs: 'td'\n};\nTableRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A row can be active or selected by a user. */\n  active: PropTypes.bool,\n\n  /** An element type to render as (string or function). */\n  cellAs: PropTypes.elementType,\n\n  /** Shorthand array of props for TableCell. */\n  cells: customPropTypes.collectionShorthand,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A row can be disabled. */\n  disabled: PropTypes.bool,\n\n  /** A row may call attention to an error or a negative value. */\n  error: PropTypes.bool,\n\n  /** A row may let a user know whether a value is bad. */\n  negative: PropTypes.bool,\n\n  /** A row may let a user know whether a value is good. */\n  positive: PropTypes.bool,\n\n  /** A table row can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table row can adjust its vertical alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A row may warn a user. */\n  warning: PropTypes.bool\n} : {};\nTableRow.create = createShorthandFactory(TableRow, function (cells) {\n  return {\n    cells: cells\n  };\n});\nexport default TableRow;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport _map from \"lodash-es/map\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport TableBody from './TableBody';\nimport TableCell from './TableCell';\nimport TableFooter from './TableFooter';\nimport TableHeader from './TableHeader';\nimport TableHeaderCell from './TableHeaderCell';\nimport TableRow from './TableRow';\n/**\n * A table displays a collections of data grouped into rows.\n */\n\nfunction Table(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      celled = props.celled,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      color = props.color,\n      columns = props.columns,\n      compact = props.compact,\n      definition = props.definition,\n      fixed = props.fixed,\n      footerRow = props.footerRow,\n      headerRow = props.headerRow,\n      headerRows = props.headerRows,\n      inverted = props.inverted,\n      padded = props.padded,\n      renderBodyRow = props.renderBodyRow,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      size = props.size,\n      sortable = props.sortable,\n      stackable = props.stackable,\n      striped = props.striped,\n      structured = props.structured,\n      tableData = props.tableData,\n      textAlign = props.textAlign,\n      unstackable = props.unstackable,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', color, size, useKeyOnly(celled, 'celled'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(definition, 'definition'), useKeyOnly(fixed, 'fixed'), useKeyOnly(inverted, 'inverted'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(sortable, 'sortable'), useKeyOnly(stackable, 'stackable'), useKeyOnly(striped, 'striped'), useKeyOnly(structured, 'structured'), useKeyOnly(unstackable, 'unstackable'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(basic, 'basic'), useKeyOrValueAndKey(compact, 'compact'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column'), 'table', className);\n  var rest = getUnhandledProps(Table, props);\n  var ElementType = getElementType(Table, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  var hasHeaderRows = headerRow || headerRows;\n  var headerShorthandOptions = {\n    defaultProps: {\n      cellAs: 'th'\n    }\n  };\n  var headerElement = hasHeaderRows && /*#__PURE__*/React.createElement(TableHeader, null, TableRow.create(headerRow, headerShorthandOptions), _map(headerRows, function (data) {\n    return TableRow.create(data, headerShorthandOptions);\n  }));\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), headerElement, /*#__PURE__*/React.createElement(TableBody, null, renderBodyRow && _map(tableData, function (data, index) {\n    return TableRow.create(renderBodyRow(data, index));\n  })), footerRow && /*#__PURE__*/React.createElement(TableFooter, null, TableRow.create(footerRow)));\n}\n\nTable.handledProps = [\"as\", \"attached\", \"basic\", \"celled\", \"children\", \"className\", \"collapsing\", \"color\", \"columns\", \"compact\", \"definition\", \"fixed\", \"footerRow\", \"headerRow\", \"headerRows\", \"inverted\", \"padded\", \"renderBodyRow\", \"selectable\", \"singleLine\", \"size\", \"sortable\", \"stackable\", \"striped\", \"structured\", \"tableData\", \"textAlign\", \"unstackable\", \"verticalAlign\"];\nTable.defaultProps = {\n  as: 'table'\n};\nTable.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Attach table to other content */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** A table can reduce its complexity to increase readability. */\n  basic: PropTypes.oneOfType([PropTypes.oneOf(['very']), PropTypes.bool]),\n\n  /** A table may be divided into individual cells. */\n  celled: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A table can be collapsing, taking up only as much space as its rows. */\n  collapsing: PropTypes.bool,\n\n  /** A table can be given a color to distinguish it from other tables. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A table can specify its column count to divide its content evenly. */\n  columns: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A table may sometimes need to be more compact to make more rows visible at a time. */\n  compact: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A table may be formatted to emphasize a first column that defines a rows content. */\n  definition: PropTypes.bool,\n\n  /**\n   * A table can use fixed a special faster form of table rendering that does not resize table cells based on content\n   */\n  fixed: PropTypes.bool,\n\n  /** Shorthand for a TableRow to be placed within Table.Footer. */\n  footerRow: customPropTypes.itemShorthand,\n\n  /** Shorthand for a TableRow to be placed within Table.Header. */\n  headerRow: customPropTypes.every([customPropTypes.disallow(['headerRows']), customPropTypes.itemShorthand]),\n\n  /** Shorthand for multiple TableRows to be placed within Table.Header. */\n  headerRows: customPropTypes.every([customPropTypes.disallow(['headerRow']), customPropTypes.collectionShorthand]),\n\n  /** A table's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A table may sometimes need to be more padded for legibility. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /**\n   * Mapped over `tableData` and should return shorthand for each Table.Row to be placed within Table.Body.\n   *\n   * @param {*} data - An element in the `tableData` array.\n   * @param {number} index - The index of the current element in `tableData`.\n   * @returns {*} Shorthand for a Table.Row.\n   */\n  renderBodyRow: customPropTypes.every([customPropTypes.disallow(['children']), customPropTypes.demand(['tableData']), PropTypes.func]),\n\n  /** A table can have its rows appear selectable. */\n  selectable: PropTypes.bool,\n\n  /** A table can specify that its cell contents should remain on a single line and not wrap. */\n  singleLine: PropTypes.bool,\n\n  /** A table can also be small or large. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'mini', 'tiny', 'medium', 'big', 'huge', 'massive')),\n\n  /** A table may allow a user to sort contents by clicking on a table header. */\n  sortable: PropTypes.bool,\n\n  /** A table can specify how it stacks table content responsively. */\n  stackable: PropTypes.bool,\n\n  /** A table can stripe alternate rows of content with a darker color to increase contrast. */\n  striped: PropTypes.bool,\n\n  /** A table can be formatted to display complex structured data. */\n  structured: PropTypes.bool,\n\n  /** Data to be passed to the renderBodyRow function. */\n  tableData: customPropTypes.every([customPropTypes.disallow(['children']), customPropTypes.demand(['renderBodyRow']), PropTypes.array]),\n\n  /** A table can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table can specify how it stacks table content responsively. */\n  unstackable: PropTypes.bool,\n\n  /** A table can adjust its text alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nTable.Body = TableBody;\nTable.Cell = TableCell;\nTable.Footer = TableFooter;\nTable.Header = TableHeader;\nTable.HeaderCell = TableHeaderCell;\nTable.Row = TableRow;\nexport default Table;"],"names":["props","uniqueId","map","headerName","returnTableHeader","configurationProfileId","useParams","useState","configurationProfile","setConfigurationProfile","qualityModelData","useLocation","getMetricsList","metric","listOfMetrics","push","useEffect","ApiModule","getConfigurationProfileById","centered","width","section","horizontal","as","textAlign","stackable","columns","widths","height","preferences","data","style","marginLeft","marginRight","compact","celled","selectable","tableHeaders","preference","find","metricId","weight","generateCustomTableRow","generateCustomTableBody","active","inline","apiURL","getMetrics","queryParams","axios","params","then","res","catch","error","console","log","message","getMetricById","id","setStateFunction","endpoint","createMetric","body","response","getDescriptions","getQualityModels","getQualityModelById","createQualityModel","createConfigurationProfile","getActiveResources","getResourceWeightsAndMetricsTree","getConfigurationProfileListOfMetrics","getResourceData","resourceId","getSimulationData","getPlotsConfigs","savePlotConfig","replacePlotConfig","deletePlotConfig","status","getRulesNames","getRuleCode","ruleName","removeRule","getActionsAndConfigsByResource","createRule","text","toString","split","extraLabelForNodes","setExtraLabelForNodes","node","labelsText","extraLabelForNodesTemp","JSON","parse","stringify","length","weightLabel","transform","x","y","fill","stroke","strokeWidth","r","textAnchor","dominantBaseline","undefined","cx","cy","TreeRender","ref","nodes","setNodes","edges","setEdges","treeReady","setTreeReady","canvasRef","useRef","canvasDivRef","nodesaux","edgesaux","processData","parent","nodeToAdd","child","edgeToAdd","from","to","rootNode","parseInt","current","addEventListener","mouseWheelHandler","passive","zoomIn","zoomOut","event","ctrlKey","preventDefault","wheelDelta","updateWeightsHandler","metricIdToUpdateWeight","weightToApply","newEdges","foundEdge","edgeInfo","endsWith","fitCanvas","newNodes","nodeRef","useImperativeHandle","marginBottom","align","Button","icon","color","onClick","Icon","name","Canvas","disabled","arrow","readonly","animated","direction","fit","minZoom","zoomable","Node","label","edge","Edge","Loader","forwardRef","TableBody","children","className","classes","rest","getUnhandledProps","ElementType","getElementType","React","_extends","handledProps","defaultProps","propTypes","TableCell","collapsing","content","negative","positive","singleLine","verticalAlign","warning","useKeyOnly","useTextAlignProp","useVerticalAlignProp","useWidthProp","childrenUtils","create","createShorthandFactory","TableHeader","fullWidth","TableFooter","TableHeaderCell","sorted","useValueAndKey","TableRow","cellAs","cells","_map","cell","Table","attached","basic","definition","fixed","footerRow","headerRow","headerRows","inverted","padded","renderBodyRow","size","sortable","striped","structured","tableData","unstackable","useKeyOrValueAndKey","headerShorthandOptions","headerElement","index","Body","Cell","Footer","Header","HeaderCell","Row"],"sourceRoot":""}