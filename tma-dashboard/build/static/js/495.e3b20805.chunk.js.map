{"version":3,"file":"static/js/495.e3b20805.chunk.js","mappings":"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","sources":["pages/AdaptationRules/ViewRulePage.js","utils/api/ApiModule.js","configurations/Configurations.js","../node_modules/semantic-ui-react/dist/es/elements/Container/Container.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/SegmentGroup.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/SegmentInline.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/Segment.js"],"sourcesContent":["import { Loader, Divider, Header, Button, Grid, Container, Segment, Modal, Message} from 'semantic-ui-react'\r\nimport ApiModule from \"../../utils/api/ApiModule\"\r\nimport {useState, useEffect} from \"react\"\r\nimport { useNavigate ,useParams } from 'react-router-dom';\r\n\r\nfunction ViewRulePage(props){\r\n    let navigate = useNavigate();\r\n    \r\n    const ruleName = useParams()[\"ruleName\"];\r\n    \r\n    const [apiData, setAPIData] = useState(null);\r\n\r\n    const [removeButtonLoad, setRemoveButtonLoad] = useState(false);\r\n\r\n    const [deleteResponseMessage, setDeleteResponseMessage] = useState({\"openModal\": false})\r\n\r\n    async function makeAPIRequest(){\r\n        let res = await ApiModule().getRuleCode(ruleName)\r\n        setAPIData(res)\r\n    }\r\n\r\n    //Execute upon component rendering\r\n    useEffect(() => {\r\n        //perform API request\r\n        makeAPIRequest()\r\n    },[]);\r\n\r\n    async function deleteRuleHandler(){\r\n        setRemoveButtonLoad(true)\r\n        let resData = await ApiModule().removeRule(ruleName)\r\n        setRemoveButtonLoad(false)\r\n        resData[\"openModal\"] = true\r\n        setDeleteResponseMessage(resData)\r\n    }\r\n\r\n    function modalCloseHandler(ev,atts){\r\n        if(deleteResponseMessage.messageType === \"success\"){\r\n            navigate(\"/getAdaptationRules\")\r\n        }\r\n        setDeleteResponseMessage(\r\n            {\r\n                ...deleteResponseMessage,\r\n                openModal: false\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Grid centered>\r\n                <Grid.Row> \r\n                    <Grid.Column>\r\n                        <Divider section horizontal>\r\n                            <Header  as=\"h1\" textAlign=\"center\">Rule Detail</Header> \r\n                        </Divider>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n            <br/>\r\n            {\r\n                //if apiData is null, then it is because the response from the API hasn't arrived\r\n                apiData === null ? <Loader active inline='centered'> Retrieving content</Loader> :\r\n\r\n                <Grid centered columns={1}> \r\n                    <Grid.Column>\r\n                        <Container>\r\n                            <Segment compact style={{margin: \"auto\"}}>     \r\n                                <Header  style={{color: \"#0057b3\"}} as=\"h2\" textAlign=\"center\">{ruleName}</Header>\r\n                                <Divider section horizontal>\r\n                                    <Header as=\"h4\" textAlign=\"center\"> Definition </Header> \r\n                                </Divider>\r\n                                \r\n                                <code style={{whiteSpace: \"pre-wrap\", color: \"#0057b3\"}}>{apiData}</code>\r\n                                <Divider></Divider>\r\n                                <Button loading={removeButtonLoad} floated='right' negative onClick={deleteRuleHandler}>Delete</Button>\r\n                            </Segment>\r\n                        </Container>\r\n                    </Grid.Column>\r\n                    <Modal centered={false} closeIcon open={deleteResponseMessage[\"openModal\"]} onClose={modalCloseHandler}>\r\n                        <Modal.Header>Message</Modal.Header>\r\n                        <Modal.Content>\r\n                            <Message \r\n                            color= {\r\n                                    deleteResponseMessage[\"messageType\"] === \"success\" ? \r\n                                    \"green\"\r\n                                    :deleteResponseMessage[\"messageType\"] === \"warning\" ?\r\n                                    \"orange\"\r\n                                    : \"red\" \r\n                                }\r\n                            >\r\n                                <Message.Header>{deleteResponseMessage[\"message\"]}</Message.Header>\r\n                            </Message>\r\n                        </Modal.Content>\r\n                        <Modal.Actions>\r\n                            <Button color='grey' onClick={modalCloseHandler}>\r\n                                Close\r\n                            </Button>\r\n                        </Modal.Actions>\r\n                    </Modal>\r\n                </Grid>\r\n            }\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default ViewRulePage;","import axios from 'axios';\r\nimport Configurations from '../../configurations/Configurations';\r\n\r\nfunction ApiModule() {\r\n  const apiURL = Configurations().API_BASE_URL;\r\n\r\n  //return list of metrics\r\n  function getMetrics(queryParams){\r\n    let endpoint = apiURL + \"getMetrics\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"metrics\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single metric\r\n  function getMetricById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getMetrics/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"metric\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //create a metric\r\n  function createMetric(body){\r\n    let endpoint = apiURL + \"createMetric\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of descriptions\r\n  function getDescriptions(queryParams){\r\n    let endpoint = apiURL + \"getDescriptions\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"descriptions\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of quality models\r\n  function getQualityModels(queryParams, setStateFunction){\r\n    let endpoint = apiURL + \"getQualityModels\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"qualityModels\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single quality model\r\n  function getQualityModelById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getQualityModels/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"qualityModel\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n  \r\n  //create a quality model\r\n  function createQualityModel(body){\r\n    let endpoint = apiURL + \"createQualityModel\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //create a configuration profile for a quality model\r\n  function createConfigurationProfile(body){\r\n    let endpoint = apiURL + \"createConfigurationProfile\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single quality model\r\n  function getConfigurationProfileById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getConfigurationProfile/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"configurationProfile\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of currently monitored resources. queryParams specify if the resources to be retrieved should have actions\r\n  //associated in the case of creating a rule ('createRule' param should be set to true). \r\n  function getActiveResources(queryParams){\r\n    let endpoint = apiURL + \"getResources\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"resources\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of weights and metric tree associated to the resource\r\n  function getResourceWeightsAndMetricsTree(id){\r\n    let endpoint = apiURL + \"getResources/\" + id + \"/weightedTree\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a list of metrics that can be either leaf attribute or \"normal\" metrics exclusively\r\n  function getConfigurationProfileListOfMetrics(configurationProfileId, queryParams){\r\n    let endpoint = apiURL + \"getConfigurationProfile/\" + configurationProfileId + \"/listOfMetrics\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"listOfMetrics\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getResourceData(resourceId, queryParams){\r\n    let endpoint = apiURL + \"getResources/\" + resourceId + \"/data\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"plotData\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getSimulationData(body){\r\n    let endpoint = apiURL + \"simulateData\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.patch(endpoint,body).then((res) => \r\n        {\r\n          return res.data[\"simulationData\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getPlotsConfigs(){\r\n    let endpoint = apiURL + \"getPlotsConfigs\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data[\"plotsConfigs\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function savePlotConfig(body){\r\n    let endpoint = apiURL + \"addPlotConfig\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return error.response\r\n        }\r\n      )\r\n  }\r\n\r\n  function replacePlotConfig(body){\r\n    let endpoint = apiURL + \"replacePlotConfig\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.put(endpoint,body).then((res) => \r\n        {\r\n          return res\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return error.response\r\n        }\r\n      )\r\n  }\r\n\r\n  function deletePlotConfig(id){\r\n    let endpoint = apiURL + \"deletePlotConfig/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.delete(endpoint).then((res) => \r\n        {\r\n          return res.status\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of rules names\r\n  function getRulesNames(queryParams){\r\n    let endpoint = apiURL + \"getRules\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"rulesNames\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return deatils of a rule\r\n  function getRuleCode(ruleName){\r\n    let endpoint = apiURL + \"getRules/\" + ruleName\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data[\"ruleDetail\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function removeRule(ruleName){\r\n    let endpoint = apiURL + \"removeRule/\" + ruleName\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.delete(endpoint).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getActionsAndConfigsByResource(queryParams){\r\n    let endpoint = apiURL + \"getActions/\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //create an adaptation rule\r\n  function createRule(body){\r\n    let endpoint = apiURL + \"addRule\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  return {\r\n    getMetrics,\r\n    getMetricById,\r\n    createMetric,\r\n    getDescriptions,\r\n    getQualityModels,\r\n    getQualityModelById,\r\n    createQualityModel,\r\n    createConfigurationProfile,\r\n    getConfigurationProfileById,\r\n    getActiveResources,\r\n    getResourceWeightsAndMetricsTree,\r\n    getConfigurationProfileListOfMetrics,\r\n    getResourceData,\r\n    getSimulationData,\r\n    getPlotsConfigs,\r\n    savePlotConfig,\r\n    replacePlotConfig,\r\n    deletePlotConfig,\r\n    getRulesNames,\r\n    getRuleCode,\r\n    removeRule,\r\n    getActionsAndConfigsByResource,\r\n    createRule,\r\n  };\r\n\r\n}\r\n\r\nexport default ApiModule","export default function Configurations() {\r\n    const API_IP_ADDRESS = \"192.168.1.68\" //\"10.3.3.68\"\r\n    const API_PORT = \"8080\"\r\n\r\n    const configData = {\r\n        \"API_BASE_URL\": \"http://\" + API_IP_ADDRESS + \":\" + API_PORT + \"/\",\r\n    }\r\n\r\n    return configData;\r\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\n/**\n * A container limits content to a maximum width.\n */\n\nfunction Container(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      fluid = props.fluid,\n      text = props.text,\n      textAlign = props.textAlign;\n  var classes = cx('ui', useKeyOnly(text, 'text'), useKeyOnly(fluid, 'fluid'), useTextAlignProp(textAlign), 'container', className);\n  var rest = getUnhandledProps(Container, props);\n  var ElementType = getElementType(Container, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nContainer.handledProps = [\"as\", \"children\", \"className\", \"content\", \"fluid\", \"text\", \"textAlign\"];\nContainer.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Container has no maximum width. */\n  fluid: PropTypes.bool,\n\n  /** Reduce maximum width to more naturally accommodate text. */\n  text: PropTypes.bool,\n\n  /** Align container text. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS)\n} : {};\nexport default Container;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\n/**\n * A group of segments can be formatted to appear together.\n */\n\nfunction SegmentGroup(props) {\n  var children = props.children,\n      className = props.className,\n      compact = props.compact,\n      content = props.content,\n      horizontal = props.horizontal,\n      piled = props.piled,\n      raised = props.raised,\n      size = props.size,\n      stacked = props.stacked;\n  var classes = cx('ui', size, useKeyOnly(compact, 'compact'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(piled, 'piled'), useKeyOnly(raised, 'raised'), useKeyOnly(stacked, 'stacked'), 'segments', className);\n  var rest = getUnhandledProps(SegmentGroup, props);\n  var ElementType = getElementType(SegmentGroup, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegmentGroup.handledProps = [\"as\", \"children\", \"className\", \"compact\", \"content\", \"horizontal\", \"piled\", \"raised\", \"size\", \"stacked\"];\nSegmentGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A segment may take up only as much space as is necessary. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Formats content to be aligned horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Formatted to look like a pile of pages. */\n  piled: PropTypes.bool,\n\n  /** A segment group may be formatted to raise above the page. */\n  raised: PropTypes.bool,\n\n  /** A segment group can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** Formatted to show it contains multiple pages. */\n  stacked: PropTypes.bool\n} : {};\nexport default SegmentGroup;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A placeholder segment can be inline.\n */\n\nfunction SegmentInline(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('inline', className);\n  var rest = getUnhandledProps(SegmentInline, props);\n  var ElementType = getElementType(SegmentInline, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegmentInline.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nSegmentInline.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default SegmentInline;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useTextAlignProp, useValueAndKey } from '../../lib';\nimport SegmentGroup from './SegmentGroup';\nimport SegmentInline from './SegmentInline';\n/**\n * A segment is used to create a grouping of related content.\n */\n\nfunction Segment(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      children = props.children,\n      circular = props.circular,\n      className = props.className,\n      clearing = props.clearing,\n      color = props.color,\n      compact = props.compact,\n      content = props.content,\n      disabled = props.disabled,\n      floated = props.floated,\n      inverted = props.inverted,\n      loading = props.loading,\n      placeholder = props.placeholder,\n      padded = props.padded,\n      piled = props.piled,\n      raised = props.raised,\n      secondary = props.secondary,\n      size = props.size,\n      stacked = props.stacked,\n      tertiary = props.tertiary,\n      textAlign = props.textAlign,\n      vertical = props.vertical;\n  var classes = cx('ui', color, size, useKeyOnly(basic, 'basic'), useKeyOnly(circular, 'circular'), useKeyOnly(clearing, 'clearing'), useKeyOnly(compact, 'compact'), useKeyOnly(disabled, 'disabled'), useKeyOnly(inverted, 'inverted'), useKeyOnly(loading, 'loading'), useKeyOnly(placeholder, 'placeholder'), useKeyOnly(piled, 'piled'), useKeyOnly(raised, 'raised'), useKeyOnly(secondary, 'secondary'), useKeyOnly(stacked, 'stacked'), useKeyOnly(tertiary, 'tertiary'), useKeyOnly(vertical, 'vertical'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), 'segment', className);\n  var rest = getUnhandledProps(Segment, props);\n  var ElementType = getElementType(Segment, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegment.handledProps = [\"as\", \"attached\", \"basic\", \"children\", \"circular\", \"className\", \"clearing\", \"color\", \"compact\", \"content\", \"disabled\", \"floated\", \"inverted\", \"loading\", \"padded\", \"piled\", \"placeholder\", \"raised\", \"secondary\", \"size\", \"stacked\", \"tertiary\", \"textAlign\", \"vertical\"];\nSegment.Group = SegmentGroup;\nSegment.Inline = SegmentInline;\nSegment.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Attach segment to other content, like a header. */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** A basic segment has no special formatting. */\n  basic: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** A segment can be circular. */\n  circular: PropTypes.bool,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A segment can clear floated content. */\n  clearing: PropTypes.bool,\n\n  /** Segment can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A segment may take up only as much space as is necessary. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A segment may show its content is disabled. */\n  disabled: PropTypes.bool,\n\n  /** Segment content can be floated to the left or right. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A segment can have its colors inverted for contrast. */\n  inverted: PropTypes.bool,\n\n  /** A segment may show its content is being loaded. */\n  loading: PropTypes.bool,\n\n  /** A segment can increase its padding. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A segment can be used to reserve space for conditionally displayed content. */\n  placeholder: PropTypes.bool,\n\n  /** Formatted to look like a pile of pages. */\n  piled: PropTypes.bool,\n\n  /** A segment may be formatted to raise above the page. */\n  raised: PropTypes.bool,\n\n  /** A segment can be formatted to appear less noticeable. */\n  secondary: PropTypes.bool,\n\n  /** A segment can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** Formatted to show it contains multiple pages. */\n  stacked: PropTypes.bool,\n\n  /** A segment can be formatted to appear even less noticeable. */\n  tertiary: PropTypes.bool,\n\n  /** Formats content to be aligned as part of a vertical group. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** Formats content to be aligned vertically. */\n  vertical: PropTypes.bool\n} : {};\nexport default Segment;"],"names":["props","navigate","useNavigate","ruleName","useParams","useState","apiData","setAPIData","removeButtonLoad","setRemoveButtonLoad","deleteResponseMessage","setDeleteResponseMessage","ApiModule","getRuleCode","res","removeRule","resData","modalCloseHandler","ev","atts","messageType","openModal","useEffect","makeAPIRequest","centered","section","horizontal","as","textAlign","active","inline","columns","compact","style","margin","color","whiteSpace","loading","floated","negative","onClick","closeIcon","open","onClose","apiURL","getMetrics","queryParams","axios","params","then","data","catch","error","console","log","message","getMetricById","id","setStateFunction","endpoint","createMetric","body","response","getDescriptions","getQualityModels","getQualityModelById","createQualityModel","createConfigurationProfile","getConfigurationProfileById","getActiveResources","getResourceWeightsAndMetricsTree","getConfigurationProfileListOfMetrics","configurationProfileId","getResourceData","resourceId","getSimulationData","getPlotsConfigs","savePlotConfig","replacePlotConfig","deletePlotConfig","status","getRulesNames","getActionsAndConfigsByResource","createRule","Container","children","className","content","fluid","text","classes","cx","useKeyOnly","useTextAlignProp","rest","getUnhandledProps","ElementType","getElementType","React","_extends","childrenUtils","handledProps","propTypes","SegmentGroup","piled","raised","size","stacked","SegmentInline","Segment","attached","basic","circular","clearing","disabled","inverted","placeholder","padded","secondary","tertiary","vertical","useKeyOrValueAndKey","useValueAndKey","Group","Inline"],"sourceRoot":""}