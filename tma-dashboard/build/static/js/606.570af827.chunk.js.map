{"version":3,"file":"static/js/606.570af827.chunk.js","mappings":"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","sources":["components/CustomModal.js","pages/QualityModels/CreateQualityModelPage.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {Button, Modal, Message} from 'semantic-ui-react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction CustomModal(props){\r\n\r\n    let navigate = useNavigate();\r\n\r\n    const [modalState, setModalState] = useState(\r\n        {\r\n            successPath: props.successPath,\r\n            openModal: false,\r\n            messageType: null,\r\n            message: null\r\n        }\r\n    )  \r\n\r\n    function modalCloseHandler(ev,atts){\r\n        if(modalState.messageType === \"success\"){\r\n            navigate(modalState.successPath)\r\n        }\r\n        props.modalInfo.openModal = false\r\n        setModalState(\r\n            {\r\n                ...modalState,\r\n                openModal: false\r\n            }\r\n        )\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setModalState({\r\n            ...modalState,\r\n            openModal: props.modalInfo.openModal,\r\n            messageType: props.modalInfo.messageType,\r\n            message: props.modalInfo.message\r\n        })\r\n    },[props])\r\n\r\n    return(\r\n        <Modal centered={false} closeIcon open={modalState[\"openModal\"]} onClose={modalCloseHandler}>\r\n            <Modal.Header>Message</Modal.Header>\r\n            <Modal.Content>\r\n                <Message \r\n                color= {\r\n                        modalState[\"messageType\"] === \"success\" ? \r\n                        \"green\"\r\n                        :modalState[\"messageType\"] === \"warning\" ?\r\n                        \"orange\"\r\n                        : \"red\" \r\n                    }\r\n                >\r\n                    <Message.Header>{modalState[\"message\"]}</Message.Header>\r\n                </Message>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button color='grey' onClick={modalCloseHandler}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default CustomModal;","import { Loader, Divider, Container, Header, Grid, Segment, Form, Label} from 'semantic-ui-react'\r\nimport ApiModule from \"../../utils/api/ApiModule\"\r\nimport {useState, useEffect} from \"react\"\r\nimport DropDownDataFormat from '../../utils/dropDownDataFormat/DropDownDataFormat'\r\nimport TreeRender from '../../utils/treeRendering/TreeRender';\r\nimport ValidInputs from '../../utils/ValidInputs'\r\nimport CustomModal from '../../components/CustomModal';\r\n\r\nfunction CreateQualityModelPage(){\r\n\r\n    const [metrics, setMetrics] = useState(null);\r\n    const [formData,setFormData] = useState({});\r\n    const [metricTreeData, setMetricTreeData] = useState(null);\r\n\r\n    const [postResponseMessage, setPostResponseMessage] = useState({\"openModal\": false})\r\n\r\n    const [formErrorDisplay, setFormErrorDisplay] = useState(false);\r\n\r\n    async function makeAPIRequestMetrics(queryParams){\r\n        let res = await ApiModule().getMetrics(queryParams);\r\n        DropDownDataFormat().convertMetrics(res, setMetrics)\r\n    }\r\n    \r\n    //Execute upon component rendering\r\n    useEffect(() => {\r\n        //perform API request to retrieve metrics which are available for association with new Quality Models\r\n        makeAPIRequestMetrics({\"createQualityModel\": \"true\"})\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[]);\r\n    \r\n\r\n    //whenever the root metrics is changed, rerender metrics tree\r\n    async function rootMetricChangeHandler(ev, atts){\r\n        let newFormData = JSON.parse(JSON.stringify(formData))\r\n        newFormData[\"metricId\"] = atts[\"value\"]\r\n        setFormData(newFormData)\r\n        if(atts[\"value\"] !== \"\"){\r\n            await ApiModule().getMetricById(atts[\"value\"], setMetricTreeData)\r\n    \r\n        }\r\n        else{\r\n            setMetricTreeData(null)\r\n        }\r\n    }\r\n\r\n    function validInput(formInputName){\r\n        if(formErrorDisplay){\r\n            if (formInputName === \"modelName\"){\r\n                if(!ValidInputs().validStringOrDropDownSelection(formData[\"modelName\"])){\r\n                    return { content: 'Please enter a name for the Quality Model', pointing: 'above' }\r\n                }\r\n            }\r\n            else if (formInputName === \"modelDescriptionReference\"){\r\n                if(!ValidInputs().validIntGreaterOrEqualThanZero(formData[\"modelDescriptionReference\"])){\r\n                    return { content: 'Please enter an integer number >= 0', pointing: 'above' }\r\n                }\r\n            }\r\n            else if (formInputName === \"businessThreshold\"){\r\n                if(!ValidInputs().validFloatBetweenZeroAndOne(formData[\"businessThreshold\"])){\r\n                    return { content: 'Please enter a float number where  0.0 <= number <= 1.0 ', pointing: 'above' }\r\n                }\r\n            }\r\n            else if (formInputName === \"metricId\"){\r\n                if(!ValidInputs().validStringOrDropDownSelection(formData[\"metricId\"])){\r\n                    return { content: 'Please choose a metric', pointing: 'above' }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function formFieldInputChangeHandler(ev){\r\n        let newFormData = JSON.parse(JSON.stringify(formData))\r\n        newFormData[ev.currentTarget.name] = ev.currentTarget.value\r\n        setFormData(newFormData)\r\n    }\r\n\r\n    async function submitHandler(ev){\r\n        ev.preventDefault()\r\n        if (ValidInputs().validStringOrDropDownSelection(formData[\"modelName\"])){\r\n            //if(ValidInputs().validIntGreaterOrEqualThanZero(formData[\"modelDescriptionReference\"]))\r\n                //if(ValidInputs().validFloatBetweenZeroAndOne(formData[\"businessThreshold\"]))\r\n                    if(ValidInputs().validStringOrDropDownSelection(formData[\"metricId\"])){\r\n                        //process data into a format acceptable by the API\r\n                        let postData = JSON.parse(JSON.stringify(formData))\r\n                        postData[\"metric\"] = {\"metricId\": formData[\"metricId\"]}\r\n                        delete postData[\"metricId\"]\r\n                        //contains message and messageType\r\n                        let resData = await ApiModule().createQualityModel(postData)\r\n                        resData[\"openModal\"] = true\r\n                        setPostResponseMessage(resData)\r\n                        return\r\n                    }\r\n        }\r\n        \r\n        setPostResponseMessage(\r\n            {\r\n                messageType: \"error\",\r\n                message: \"Please fill in all the required fields (marked with  * ) and respect the fields notes\",\r\n                openModal: true\r\n            }\r\n        )\r\n\r\n        setFormErrorDisplay(true)\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n            <Grid centered>\r\n            <Grid.Row >\r\n                <Grid.Column width={15}>\r\n                <Divider section horizontal>\r\n                    <Header as=\"h1\" textAlign=\"center\"> Create Quality Model</Header> \r\n                </Divider>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            </Grid>\r\n            <br/>\r\n            {\r\n                //if apiData is null, then it is because the response from the API hasn't arrived\r\n                metrics === null ? <Loader active inline='centered'> Retrieving content</Loader> :\r\n                <div>\r\n                    <Container>\r\n                            <Segment>\r\n                                <Form>\r\n                                    <Form.Group widths=\"equal\">\r\n                                        <Form.Field>\r\n                                            <Form.Input fluid required\r\n                                                name=\"modelName\"\r\n                                                label='Name'\r\n                                                onChange={formFieldInputChangeHandler}\r\n                                                error={validInput(\"modelName\")}\r\n                                            />\r\n                                        </Form.Field>\r\n                                        {/* uncomment to add model Description Reference and businessThreshold\r\n                                        <Form.Field>\r\n                                            <Form.Input fluid required\r\n                                                name=\"modelDescriptionReference\" \r\n                                                label='modelDescriptionReference' \r\n                                                onChange={formFieldInputChangeHandler}\r\n                                                error={validInput(\"modelDescriptionReference\")}\r\n                                            />\r\n                                        </Form.Field>\r\n                                        <Form.Field>\r\n                                            <Form.Input fluid required step=\"0.01\" \r\n                                                name=\"businessThreshold\" \r\n                                                label='businessThreshold' \r\n                                                onChange={formFieldInputChangeHandler}\r\n                                                error={validInput(\"businessThreshold\")}\r\n                                            />\r\n                                        </Form.Field>\r\n                                        */}\r\n                                        <Form.Dropdown\r\n                                            selectOnBlur={false}\r\n                                            selectOnNavigation={false}\r\n                                            required\r\n                                            clearable\r\n                                            search\r\n                                            selection\r\n                                            options={metrics}\r\n                                            placeholder='Filter metrics by something'\r\n                                            label='Associate Metric'\r\n                                            onChange={rootMetricChangeHandler}\r\n                                            name=\"metricId\"\r\n                                            error={validInput(\"metricId\")}\r\n                                        />\r\n                                        <Form.Button color=\"grey\" circular type='submit' floated=\"right\" onClick={submitHandler}> \r\n                                            Create Quality Model\r\n                                        </Form.Button>\r\n                                    </Form.Group>\r\n                                </Form>\r\n                                <Divider section horizontal>\r\n                                    <Header as=\"h3\" textAlign=\"center\"> Preview metrics tree</Header>\r\n                                </Divider>\r\n                                {metricTreeData !== null ?\r\n                                <TreeRender width={\"100%\"} height={\"50vh\"} data={metricTreeData}/>\r\n                                : \r\n                                <Label active ribbon as='b' color='grey'>\r\n                                    <Header as=\"h3\"> Warning! </Header> \r\n                                    Metrics tree will only be displayed once a metric is chosen\r\n                                </Label>\r\n                                }\r\n                            </Segment>\r\n                    </Container>\r\n                    <CustomModal \r\n                        successPath=\"/getQualityModels\" \r\n                        modalInfo={postResponseMessage} \r\n                    />\r\n                </div>\r\n            }\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateQualityModelPage"],"names":["props","navigate","useNavigate","useState","successPath","openModal","messageType","message","modalState","setModalState","modalCloseHandler","ev","atts","modalInfo","useEffect","centered","closeIcon","open","onClose","color","onClick","metrics","setMetrics","formData","setFormData","metricTreeData","setMetricTreeData","postResponseMessage","setPostResponseMessage","formErrorDisplay","setFormErrorDisplay","queryParams","ApiModule","getMetrics","res","DropDownDataFormat","convertMetrics","newFormData","JSON","parse","stringify","getMetricById","validInput","formInputName","ValidInputs","validStringOrDropDownSelection","content","pointing","validIntGreaterOrEqualThanZero","validFloatBetweenZeroAndOne","preventDefault","postData","createQualityModel","resData","makeAPIRequestMetrics","width","section","horizontal","as","textAlign","active","inline","widths","fluid","required","name","label","onChange","currentTarget","value","error","selectOnBlur","selectOnNavigation","clearable","search","selection","options","placeholder","circular","type","floated","height","data","ribbon"],"sourceRoot":""}