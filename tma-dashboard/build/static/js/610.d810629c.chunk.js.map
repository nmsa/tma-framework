{"version":3,"file":"static/js/610.d810629c.chunk.js","mappings":"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","sources":["components/tables/TableBody.js","components/tables/TableHeader.js","components/tables/TablePagination.js","pages/Metrics/ListMetricsPage.js","utils/api/ApiModule.js","configurations/Configurations.js","../node_modules/semantic-ui-react/dist/es/elements/Container/Container.js"],"sourcesContent":["import {Table} from 'semantic-ui-react'\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction TableBody(props){\r\n    //uniqueID is requested for Table items so that React can optimize rendering process \r\n    //It is used for the key property which must be set and be unique \r\n    let uniqueID = 0;\r\n    let navigate = useNavigate();\r\n    const tableRowBasePath = props[\"baserowpathlink\"];\r\n\r\n    function tableRowHandler(ev){\r\n        navigate(tableRowBasePath + \"/\" + ev.currentTarget.getAttribute(\"rowid\"),{state: {data: props[\"rowlinkdata\"]}})\r\n    }\r\n\r\n    //style={{cursor:\"pointer\"}} onClick={tableRowHandler}\r\n    function renderRow(rowItemData){\r\n        let tableHeaders = props[\"tableHeaders\"]\r\n        return (\r\n            <Table.Row  \r\n            {\r\n                ...tableRowBasePath !== undefined ? \r\n                {\r\n                    style: {cursor:\"pointer\"},\r\n                    onClick: tableRowHandler\r\n                } \r\n                : null\r\n            } \r\n            rowid={rowItemData[tableHeaders[0]]} \r\n            key={uniqueID++}>\r\n                {\r\n                    //for each row item, get the values for the header attributes respecting the table headers order\r\n                    tableHeaders.map(headerName => renderRowCell(headerName,rowItemData))\r\n                }\r\n            </Table.Row>\r\n        )\r\n    }\r\n\r\n    function renderRowCell(headerName,rowItemData){\r\n        return <Table.Cell key={uniqueID++}> {rowItemData[headerName]} </Table.Cell>\r\n    }\r\n\r\n    return(\r\n        <Table.Body>\r\n            {\r\n                //iterate over the result list to access each row item; props[\"data\"] => list of entities\r\n                props[\"data\"].map((rowItemData) => renderRow(rowItemData))\r\n            }\r\n        </Table.Body>\r\n    )\r\n}\r\n\r\nexport default TableBody","import {Table} from 'semantic-ui-react'\r\n\r\nfunction TableHeader(props){\r\n    let uniqueId = 0;\r\n    function returnTableHeader(headerName){\r\n        //key property must be set and be unique because React uses it to optimize rendering process \r\n        return <Table.HeaderCell key={uniqueId++}> {headerName}</Table.HeaderCell>\r\n    }\r\n\r\n    return(\r\n    <Table.Header>\r\n      <Table.Row>\r\n        {props[\"tableHeaders\"].map(headerName => returnTableHeader(headerName))}\r\n      </Table.Row>\r\n    </Table.Header>\r\n    )\r\n}\r\n\r\nexport default TableHeader","import {Icon, Menu, Table} from 'semantic-ui-react'\r\nimport {useState} from \"react\"\r\n\r\nfunction TablePagination(props){\r\n    const [paginationItems, setPaginationItems] = useState([1,2,3]);\r\n    const [currIndex,setCurrIndex] = useState(0);\r\n    \r\n    function paginationPageHandler(ev, atts){\r\n        setCurrIndex(atts[\"index\"])\r\n    }\r\n\r\n    function goBackPaginationHandler(ev, atts){\r\n        if(currIndex === 0){\r\n            let paginationItemsCopy = [...paginationItems];\r\n            for (let i =0; i< paginationItems.length; i++){\r\n                paginationItemsCopy[i] = paginationItemsCopy[i] - 1\r\n            }\r\n            setPaginationItems(paginationItemsCopy)\r\n        }\r\n        else{\r\n            setCurrIndex(currIndex - 1)\r\n        }\r\n    }\r\n\r\n    function goForwardPaginationHandler(ev, atts){\r\n        if(currIndex === 2){\r\n            let paginationItemsCopy = [...paginationItems];\r\n            for (let i =0; i< paginationItems.length; i++){\r\n                paginationItemsCopy[i] = paginationItemsCopy[i] + 1\r\n            }\r\n            setPaginationItems(paginationItemsCopy)\r\n        }\r\n        else{\r\n            setCurrIndex(currIndex + 1)\r\n        }\r\n    }\r\n    \r\n    return(\r\n        null\r\n        /* uncomment and remove \"null\" from above to show pagination menu\r\n        <Table.Footer>\r\n            <Table.Row>\r\n                <Table.HeaderCell colSpan={props[\"numberOfColumns\"]}>\r\n                    <Menu pointing secondary compact stackable>\r\n                        <Menu.Item \r\n                            as={(currIndex === 0 && paginationItems[0] === 1) ? \"div\" : \"a\" }\r\n                            disabled = {currIndex === 0 && paginationItems[0] === 1 } icon onClick={goBackPaginationHandler}>\r\n                            <Icon name='chevron left' />\r\n                        </Menu.Item>\r\n                        \r\n                        <Menu.Item as='a' index = {0} active={ 0 === currIndex } onClick={paginationPageHandler}>\r\n                            {paginationItems[0]}\r\n                        </Menu.Item>\r\n                        \r\n                        <Menu.Item as='a' index = {1} active={ 1 === currIndex } onClick={paginationPageHandler}> \r\n                            {paginationItems[1]}\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item as='a' index = {2} active={ 2 === currIndex } onClick={paginationPageHandler}> \r\n                            {paginationItems[2]}\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item as='a' icon onClick={goForwardPaginationHandler}>\r\n                            <Icon name='chevron right' />\r\n                        </Menu.Item>\r\n                    </Menu>\r\n                </Table.HeaderCell>\r\n            </Table.Row>\r\n        </Table.Footer>*/\r\n    )\r\n}\r\n\r\nexport default TablePagination;","import { Loader, Divider, Table, Icon, Header, Button, Grid, Form, Container, Segment, GridColumn} from 'semantic-ui-react'\r\nimport ApiModule from \"../../utils/api/ApiModule\"\r\nimport {useState, useEffect, useRef} from \"react\"\r\nimport TableHeader from \"../../components/tables/TableHeader\"\r\nimport TableBody from \"../../components/tables/TableBody\"\r\nimport TablePagination from '../../components/tables/TablePagination'\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction ListMetricsPage(props){\r\n    let navigate = useNavigate();\r\n    const currpath = props[\"currpath\"]\r\n    \r\n    const tableBodyJSONProps = [\"metricId\",\"metricName\"] \r\n    //above add the following strings: \"blockLevel\"\r\n    //and add below:\"Block Level\" to show these properties\r\n    const tableHeaders = [\"Id\",\"Name\"] \r\n    \r\n    const [apiData, setAPIData] = useState(null);\r\n\r\n    const [metricFilter, setMetricFilter] = useState(\"\");\r\n\r\n    async function makeAPIRequest(queryParams){\r\n        let res = await ApiModule().getMetrics(queryParams)\r\n        setAPIData(res)\r\n    }\r\n    \r\n    //Execute upon component rendering\r\n    useEffect(() => {\r\n        //perform API request\r\n        makeAPIRequest(null)\r\n    },[]);\r\n    \r\n    function filterChangeHandler(ev,atts){\r\n        setMetricFilter(atts[\"value\"])\r\n    }\r\n\r\n    function filterButtonHandler(){\r\n        let queryParams = {\"filter\": metricFilter}\r\n        makeAPIRequest(queryParams)\r\n    }\r\n    \r\n    function createMetricButtonHandler(){\r\n        navigate(\"/createMetric\")\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <Grid centered>\r\n            <Grid.Row >\r\n                <Grid.Column width={15}>\r\n                <Divider section horizontal>\r\n                    <Header as=\"h1\" textAlign=\"center\">List of Metrics</Header> \r\n                </Divider>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            </Grid>\r\n            {\r\n                //if apiData is null, then it is because the response from the API hasn't arrived\r\n                apiData === null ? <Loader active inline='centered'> Retrieving content</Loader> :\r\n\r\n                <Grid columns={1}> \r\n                    <Grid.Column>\r\n                        <Container>\r\n                            <p align=\"right\">\r\n                                <Button color='blue' onClick={createMetricButtonHandler}> Create Metric </Button>\r\n                            </p>\r\n                            <Form widths='equal'>\r\n                                <Form.Group>\r\n                                    <Form.Input name=\"metricFilter\" onChange={filterChangeHandler} label=\"Filter by name or Id\"/>\r\n                                    <Form.Field style={{marginTop: \"auto\"}}>\r\n                                        <Form.Button color='blue' type='submit' icon onClick={filterButtonHandler}>\r\n                                            Filter\r\n                                            <Icon name='filter' />\r\n                                        </Form.Button>\r\n                                    </Form.Field>\r\n                                </Form.Group>\r\n                            </Form>\r\n                            <Table textAlign=\"center\" compact celled selectable> \r\n                                <TableHeader tableHeaders = {tableHeaders} ></TableHeader>\r\n                                <TableBody baserowpathlink={currpath} data={apiData} tableHeaders = {tableBodyJSONProps}></TableBody>\r\n                                <TablePagination numberOfColumns={tableHeaders.length}/>\r\n                            </Table>\r\n                        </Container>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            }\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListMetricsPage;","import axios from 'axios';\r\nimport Configurations from '../../configurations/Configurations';\r\n\r\nfunction ApiModule() {\r\n  const apiURL = Configurations().API_BASE_URL;\r\n\r\n  //return list of metrics\r\n  function getMetrics(queryParams){\r\n    let endpoint = apiURL + \"getMetrics\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"metrics\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single metric\r\n  function getMetricById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getMetrics/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"metric\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //create a metric\r\n  function createMetric(body){\r\n    let endpoint = apiURL + \"createMetric\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of descriptions\r\n  function getDescriptions(queryParams){\r\n    let endpoint = apiURL + \"getDescriptions\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"descriptions\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of quality models\r\n  function getQualityModels(queryParams, setStateFunction){\r\n    let endpoint = apiURL + \"getQualityModels\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"qualityModels\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single quality model\r\n  function getQualityModelById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getQualityModels/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"qualityModel\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n  \r\n  //create a quality model\r\n  function createQualityModel(body){\r\n    let endpoint = apiURL + \"createQualityModel\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //create a configuration profile for a quality model\r\n  function createConfigurationProfile(body){\r\n    let endpoint = apiURL + \"createConfigurationProfile\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single quality model\r\n  function getConfigurationProfileById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getConfigurationProfile/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"configurationProfile\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of currently monitored resources. queryParams specify if the resources to be retrieved should have actions\r\n  //associated in the case of creating a rule ('createRule' param should be set to true). \r\n  function getActiveResources(queryParams){\r\n    let endpoint = apiURL + \"getResources\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"resources\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of weights and metric tree associated to the resource\r\n  function getResourceWeightsAndMetricsTree(id){\r\n    let endpoint = apiURL + \"getResources/\" + id + \"/weightedTree\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a list of metrics that can be either leaf attribute or \"normal\" metrics exclusively\r\n  function getConfigurationProfileListOfMetrics(configurationProfileId, queryParams){\r\n    let endpoint = apiURL + \"getConfigurationProfile/\" + configurationProfileId + \"/listOfMetrics\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"listOfMetrics\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getResourceData(resourceId, queryParams){\r\n    let endpoint = apiURL + \"getResources/\" + resourceId + \"/data\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"plotData\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getSimulationData(body){\r\n    let endpoint = apiURL + \"simulateData\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.patch(endpoint,body).then((res) => \r\n        {\r\n          return res.data[\"simulationData\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getPlotsConfigs(){\r\n    let endpoint = apiURL + \"getPlotsConfigs\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data[\"plotsConfigs\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function savePlotConfig(body){\r\n    let endpoint = apiURL + \"addPlotConfig\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return error.response\r\n        }\r\n      )\r\n  }\r\n\r\n  function replacePlotConfig(body){\r\n    let endpoint = apiURL + \"replacePlotConfig\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.put(endpoint,body).then((res) => \r\n        {\r\n          return res\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return error.response\r\n        }\r\n      )\r\n  }\r\n\r\n  function deletePlotConfig(id){\r\n    let endpoint = apiURL + \"deletePlotConfig/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.delete(endpoint).then((res) => \r\n        {\r\n          return res.status\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of rules names\r\n  function getRulesNames(queryParams){\r\n    let endpoint = apiURL + \"getRules\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"rulesNames\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return deatils of a rule\r\n  function getRuleCode(ruleName){\r\n    let endpoint = apiURL + \"getRules/\" + ruleName\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data[\"ruleDetail\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function removeRule(ruleName){\r\n    let endpoint = apiURL + \"removeRule/\" + ruleName\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.delete(endpoint).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getActionsAndConfigsByResource(queryParams){\r\n    let endpoint = apiURL + \"getActions/\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //create an adaptation rule\r\n  function createRule(body){\r\n    let endpoint = apiURL + \"addRule\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  return {\r\n    getMetrics,\r\n    getMetricById,\r\n    createMetric,\r\n    getDescriptions,\r\n    getQualityModels,\r\n    getQualityModelById,\r\n    createQualityModel,\r\n    createConfigurationProfile,\r\n    getConfigurationProfileById,\r\n    getActiveResources,\r\n    getResourceWeightsAndMetricsTree,\r\n    getConfigurationProfileListOfMetrics,\r\n    getResourceData,\r\n    getSimulationData,\r\n    getPlotsConfigs,\r\n    savePlotConfig,\r\n    replacePlotConfig,\r\n    deletePlotConfig,\r\n    getRulesNames,\r\n    getRuleCode,\r\n    removeRule,\r\n    getActionsAndConfigsByResource,\r\n    createRule,\r\n  };\r\n\r\n}\r\n\r\nexport default ApiModule","export default function Configurations() {\r\n    const API_IP_ADDRESS = \"192.168.1.68\" //\"10.3.3.68\"\r\n    const API_PORT = \"8080\"\r\n\r\n    const configData = {\r\n        \"API_BASE_URL\": \"http://\" + API_IP_ADDRESS + \":\" + API_PORT + \"/\",\r\n    }\r\n\r\n    return configData;\r\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\n/**\n * A container limits content to a maximum width.\n */\n\nfunction Container(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      fluid = props.fluid,\n      text = props.text,\n      textAlign = props.textAlign;\n  var classes = cx('ui', useKeyOnly(text, 'text'), useKeyOnly(fluid, 'fluid'), useTextAlignProp(textAlign), 'container', className);\n  var rest = getUnhandledProps(Container, props);\n  var ElementType = getElementType(Container, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nContainer.handledProps = [\"as\", \"children\", \"className\", \"content\", \"fluid\", \"text\", \"textAlign\"];\nContainer.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Container has no maximum width. */\n  fluid: PropTypes.bool,\n\n  /** Reduce maximum width to more naturally accommodate text. */\n  text: PropTypes.bool,\n\n  /** Align container text. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS)\n} : {};\nexport default Container;"],"names":["props","uniqueID","navigate","useNavigate","tableRowBasePath","tableRowHandler","ev","currentTarget","getAttribute","state","data","renderRow","rowItemData","tableHeaders","undefined","style","cursor","onClick","rowid","key","map","headerName","renderRowCell","uniqueId","returnTableHeader","useState","currpath","apiData","setAPIData","metricFilter","setMetricFilter","makeAPIRequest","queryParams","ApiModule","getMetrics","res","useEffect","centered","width","section","horizontal","as","textAlign","active","inline","columns","align","color","widths","name","onChange","atts","label","marginTop","type","icon","compact","celled","selectable","baserowpathlink","numberOfColumns","length","apiURL","axios","params","then","catch","error","console","log","message","getMetricById","id","setStateFunction","endpoint","createMetric","body","response","getDescriptions","getQualityModels","getQualityModelById","createQualityModel","createConfigurationProfile","getConfigurationProfileById","getActiveResources","getResourceWeightsAndMetricsTree","getConfigurationProfileListOfMetrics","configurationProfileId","getResourceData","resourceId","getSimulationData","getPlotsConfigs","savePlotConfig","replacePlotConfig","deletePlotConfig","status","getRulesNames","getRuleCode","ruleName","removeRule","getActionsAndConfigsByResource","createRule","Container","children","className","content","fluid","text","classes","cx","useKeyOnly","useTextAlignProp","rest","getUnhandledProps","ElementType","getElementType","React","_extends","childrenUtils","handledProps","propTypes"],"sourceRoot":""}