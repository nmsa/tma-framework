{"version":3,"file":"static/js/7.4c870ac1.chunk.js","mappings":"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","sources":["components/CustomModal.js","components/tables/TableHeader.js","pages/ConfigurationProfiles/CreateConfigurationProfilePage.js","utils/ValidInputs.js","utils/api/ApiModule.js","configurations/Configurations.js","utils/treeRendering/TreeLabel.js","utils/treeRendering/TreeRender.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableBody.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableCell.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableHeader.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableFooter.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableHeaderCell.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableRow.js","../node_modules/semantic-ui-react/dist/es/collections/Table/Table.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {Button, Modal, Message} from 'semantic-ui-react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction CustomModal(props){\r\n\r\n    let navigate = useNavigate();\r\n\r\n    const [modalState, setModalState] = useState(\r\n        {\r\n            successPath: props.successPath,\r\n            openModal: false,\r\n            messageType: null,\r\n            message: null\r\n        }\r\n    )  \r\n\r\n    function modalCloseHandler(ev,atts){\r\n        if(modalState.messageType === \"success\"){\r\n            navigate(modalState.successPath)\r\n        }\r\n        props.modalInfo.openModal = false\r\n        setModalState(\r\n            {\r\n                ...modalState,\r\n                openModal: false\r\n            }\r\n        )\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setModalState({\r\n            ...modalState,\r\n            openModal: props.modalInfo.openModal,\r\n            messageType: props.modalInfo.messageType,\r\n            message: props.modalInfo.message\r\n        })\r\n    },[props])\r\n\r\n    return(\r\n        <Modal centered={false} closeIcon open={modalState[\"openModal\"]} onClose={modalCloseHandler}>\r\n            <Modal.Header>Message</Modal.Header>\r\n            <Modal.Content>\r\n                <Message \r\n                color= {\r\n                        modalState[\"messageType\"] === \"success\" ? \r\n                        \"green\"\r\n                        :modalState[\"messageType\"] === \"warning\" ?\r\n                        \"orange\"\r\n                        : \"red\" \r\n                    }\r\n                >\r\n                    <Message.Header>{modalState[\"message\"]}</Message.Header>\r\n                </Message>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button color='grey' onClick={modalCloseHandler}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default CustomModal;","import {Table} from 'semantic-ui-react'\r\n\r\nfunction TableHeader(props){\r\n    let uniqueId = 0;\r\n    function returnTableHeader(headerName){\r\n        //key property must be set and be unique because React uses it to optimize rendering process \r\n        return <Table.HeaderCell key={uniqueId++}> {headerName}</Table.HeaderCell>\r\n    }\r\n\r\n    return(\r\n    <Table.Header>\r\n      <Table.Row>\r\n        {props[\"tableHeaders\"].map(headerName => returnTableHeader(headerName))}\r\n      </Table.Row>\r\n    </Table.Header>\r\n    )\r\n}\r\n\r\nexport default TableHeader","import {Divider, Label, Header, Grid, Form, Container, Segment,Table} from 'semantic-ui-react'\r\nimport ApiModule from \"../../utils/api/ApiModule\"\r\nimport React, {useState, useEffect, useRef} from \"react\"\r\nimport {useLocation} from \"react-router-dom\"\r\nimport TreeRender from '../../utils/treeRendering/TreeRender';\r\nimport TableHeader from \"../../components/tables/TableHeader\"\r\nimport ValidInputs from '../../utils/ValidInputs';\r\nimport CustomModal from '../../components/CustomModal';\r\n\r\nfunction CreateConfigurationProfilePage(){\r\n    const tableHeaders = [\r\n        \"Name\", \r\n        <p>weight<font color='#990000'>*</font></p>\r\n    ]\r\n    //add above: \"<p>threshold<font color='#990000'>*</font></p> to show threshold on table form\r\n\r\n    //formData\r\n    const [preferences,setPreferences] = useState(null)\r\n    const [profileName,setProfileName] = useState(\"\")\r\n    \r\n    \r\n    const [qualityModelListOfMetrics,setQualityModelListOfMetrics] = useState(null)\r\n    \r\n    const [formErrorDisplay, setFormErrorDisplay] = useState(false);\r\n\r\n    //holds message from API response to request and any other messages to be presented to the user\r\n    const [postResponseMessage, setPostResponseMessage] = useState({\"openModal\": false})\r\n\r\n    //read quality model from passed variable\r\n    const qm = useLocation()[\"state\"][\"qm\"]\r\n\r\n    //ref for the metric tree representation, so updates can be performed during form filling\r\n    const metricsTreeRef = useRef();\r\n\r\n    useEffect(()=>{\r\n        let listOfMetrics = []\r\n        getMetricsList(qm[\"metric\"], listOfMetrics);\r\n        let newPreferencesTemp = {}\r\n        for(let metric of listOfMetrics){\r\n            newPreferencesTemp[metric[\"metricId\"]]= {}\r\n        }\r\n        setQualityModelListOfMetrics(listOfMetrics)\r\n        setPreferences(newPreferencesTemp)\r\n    },[])\r\n\r\n\r\n    //from quality model's tree of metrics, find all the metric nodes and their names and ids, to later construct the form\r\n    function getMetricsList(metric, listOfMetrics){\r\n        listOfMetrics.push(\r\n            {\r\n                \"metricName\": metric[\"metricName\"],\r\n                \"metricId\": metric[\"metricId\"]\r\n            })\r\n        for(let child of metric[\"childMetrics\"]){\r\n            getMetricsList(child,listOfMetrics)\r\n        }\r\n    }\r\n\r\n\r\n    function generateCustomTableBody(){\r\n        let uniqueId = -4;\r\n        return (\r\n            <Table.Body>\r\n                {\r\n                    qualityModelListOfMetrics.map((metric) => \r\n                        {\r\n                            uniqueId = uniqueId+4\r\n                            return generateCustomTableRow(metric,uniqueId); \r\n                        }\r\n                    )\r\n                }\r\n            </Table.Body>\r\n        )\r\n    }\r\n\r\n    function generateCustomTableRow(metric,uniqueId){\r\n        return(\r\n            <Table.Row key={uniqueId++}>\r\n                <Table.Cell key={uniqueId++}>\r\n                    {metric[\"metricName\"]}\r\n                </Table.Cell>\r\n                <Table.Cell key={uniqueId++}>\r\n                    <Form.Input name=\"weight\" metricid={metric[\"metricId\"]} \r\n                    onChange={formFieldInputChangeHandler} required\r\n                    error={validInput(\"weight\",metric[\"metricId\"])}\r\n                    />\r\n                </Table.Cell>\r\n                {/* uncomment to add the \"threshold\" column to the table form\r\n                <Table.Cell key={uniqueId++}>\r\n                    <Form.Input name=\"threshold\" metricid={metric[\"metricId\"]} \r\n                    onChange={formFieldInputChangeHandler} required\r\n                    error={validInput(\"threshold\",metric[\"metricId\"])}\r\n                    />\r\n                </Table.Cell>\r\n                */}\r\n            </Table.Row>\r\n        )\r\n    }\r\n    \r\n    function validInput(formInputName,metricId){\r\n        if(formErrorDisplay){\r\n            if (formInputName === \"weight\" || formInputName === \"threshold\"){\r\n                if(!ValidInputs().validFloatBetweenZeroAndOne(preferences[metricId][formInputName])){\r\n                    return { content: 'Please enter a float number where  0.0 <= number <= 1.0', pointing: 'above' }\r\n                }\r\n            }\r\n            else if (formInputName === \"profileName\"){\r\n                if(!ValidInputs().validStringOrDropDownSelection(profileName)){\r\n                    return { content: 'Please enter a name for the Configuration Profile', pointing: 'above' }\r\n                }\r\n            }\r\n        }\r\n        //null => doesn't show error/tip message\r\n        return null;\r\n    }\r\n\r\n    async function formFieldInputChangeHandler(ev,atts){\r\n        //then it is the weight or threshold field\r\n        if(\"metricid\" in atts){     \r\n            let newPreferences = {...preferences}\r\n            newPreferences[atts[\"metricid\"]][atts[\"name\"]]  = atts[\"value\"]\r\n            setPreferences(newPreferences)\r\n            //update metrics tree if change was made on weight field\r\n            if(atts[\"name\"] === \"weight\"){\r\n                metricsTreeRef.current.updateWeightsHandler(atts[\"metricid\"], atts[\"value\"])\r\n            }\r\n        }\r\n        else{\r\n            setProfileName(ev.currentTarget.value)\r\n        }\r\n    }\r\n    \r\n    //used to validate that childs of a parent metric have a sum of weights = 1\r\n    function validWeightsSum(parentMetric){\r\n        //reached a leaf metric\r\n        if(parentMetric.childMetrics.length === 0){\r\n            return true\r\n        }\r\n        else{\r\n            let sum = 0\r\n            for(let child of parentMetric.childMetrics){\r\n                if(!validWeightsSum(child))\r\n                    return false\r\n                sum += parseFloat(preferences[child.metricId][\"weight\"])\r\n            }\r\n            if(sum !== 1){\r\n                console.log(sum)\r\n                return false\r\n            }\r\n            return true\r\n        }\r\n    }\r\n\r\n    async function submitHandler(ev){\r\n        ev.preventDefault()\r\n        let valid = true\r\n        //validate form fields => maybe not necessary because as the form fields show errors it is not allowed to submit\r\n        if (ValidInputs().validStringOrDropDownSelection(profileName)){\r\n            let aux\r\n            for(let metricId in preferences){\r\n                aux = ValidInputs().validFloatBetweenZeroAndOne(preferences[metricId][\"weight\"]) \r\n                /* uncomment to add validation on \"threshold\" attribute\r\n                && ValidInputs().validFloatBetweenZeroAndOne(preferences[metricId][\"threshold\"]);\r\n                */\r\n               if(aux === false){\r\n                    valid=false\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            valid = false\r\n        }\r\n\r\n        if(valid){\r\n            //then it is not valid and customize message\r\n            if(!validWeightsSum(qm.metric)){\r\n                setPostResponseMessage(\r\n                    {\r\n                        messageType: \"error\",\r\n                        message: \"Sibling metrics must have the sum of their weights equal to 1. Please, adjust the weights.\",\r\n                        openModal: true\r\n                    }\r\n                )\r\n                return\r\n            }\r\n\r\n            //process data into a format acceptable by the API\r\n            let postData = {preferences:[]}\r\n            for(let [key, value] of Object.entries(preferences)){\r\n                postData.preferences.push(\r\n                    {\r\n                        metricId: key,\r\n                        weight: value[\"weight\"],\r\n                        threshold: value[\"threshold\"]\r\n\r\n                    }\r\n                )\r\n            }\r\n            postData[\"qualityModelId\"] = qm[\"qualityModelId\"]\r\n            postData[\"profileName\"] = profileName\r\n\r\n            //contains message and messageType\r\n            let resData = await ApiModule().createConfigurationProfile(postData)\r\n            resData[\"openModal\"] = true\r\n            setPostResponseMessage(resData)\r\n        }\r\n        else{\r\n            setPostResponseMessage(\r\n                {\r\n                    messageType: \"error\",\r\n                    message: \"Please fill in all the required fields (marked with  * ) and respect the fields notes\",\r\n                    openModal: true\r\n                }\r\n            )\r\n            setFormErrorDisplay(true)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <Grid centered>\r\n                <Grid.Row >\r\n                    <Grid.Column width={15}>\r\n                        <Divider section horizontal>\r\n                            <Header as=\"h1\" textAlign=\"center\">Create Configuration Profile </Header> \r\n                        </Divider>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n            <Container >\r\n                <Grid columns={2}>\r\n                    <Grid.Column>\r\n                        <Segment >\r\n                            <Header as=\"h3\" textAlign=\"center\"> Quality Model information</Header>\r\n                            <Divider/>\r\n                            <Form widths='equal'>\r\n                                <Form.Group >\r\n                                    <Form.Field>\r\n                                        <label>Id:</label>\r\n                                        {qm[\"qualityModelId\"]}\r\n                                    </Form.Field>\r\n                                    <Form.Field>\r\n                                        <label>Name:</label>\r\n                                        {qm[\"modelName\"]}\r\n                                    </Form.Field>\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </Segment>\r\n                        <Segment>\r\n                            <Header as=\"h3\" textAlign=\"center\"> Weighted metrics tree</Header>\r\n                            <Divider/>\r\n                            <TreeRender ref={metricsTreeRef} width={\"100%\"} height={\"50vh\"} data={qm[\"metric\"]}/>\r\n                        </Segment>\r\n                    </Grid.Column>\r\n                    <Grid.Column> \r\n                        <Segment compact >\r\n                            <Header as=\"h3\" textAlign=\"center\"> Configuration Profile</Header>\r\n                            <Divider/>\r\n                            <Form widths='equal'>\r\n                                <Form.Group>\r\n                                    <Form.Input  required label='Name' name=\"profileName\"\r\n                                        onChange={formFieldInputChangeHandler}\r\n                                        error={validInput(\"profileName\",null)} \r\n                                    />\r\n                                \r\n                                    <Form.Button\r\n                                    color= \"grey\" circular type='submit' floated=\"right\" onClick={submitHandler}> \r\n                                        Create Profile\r\n                                    </Form.Button> \r\n                                </Form.Group>\r\n                                <Divider section horizontal>\r\n                                    <Header as=\"h5\" textAlign=\"center\">Set metrics weigths \r\n                                    {/* uncomment to add the text \"and thresholds\" to the interface\r\n                                        and thresholds\r\n                                    */}\r\n                                    </Header>     \r\n                                </Divider>\r\n                                {preferences !== null ?\r\n                                    <Grid columns={1}>\r\n                                        <Grid.Column>\r\n                                        <Table textAlign=\"center\" \r\n                                            compact   \r\n                                            celled \r\n                                            selectable\r\n                                            collapsing\r\n                                        > \r\n                                            <TableHeader tableHeaders = {tableHeaders} ></TableHeader>\r\n                                            {generateCustomTableBody()}\r\n                                        </Table> \r\n                                    </Grid.Column>\r\n                                    </Grid>  \r\n                                :null}\r\n                            </Form>\r\n                        </Segment> \r\n                    </Grid.Column>          \r\n                </Grid>\r\n                <CustomModal \r\n                    successPath={\"/getQualityModels/\" + qm[\"qualityModelId\"]}\r\n                    modalInfo={postResponseMessage} \r\n                />\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateConfigurationProfilePage;","\r\nfunction ValidInputs(){\r\n    function validIntGreaterThanZero(value){\r\n        //^pattern$ => using pattern between '^' and '$' means the complete word has to match the pattern and not just a substring\r\n        let pattern = \"^[0]*[1-9][0-9]*$\"\r\n        let regex = new RegExp(pattern);\r\n        if(regex.test(value)){\r\n            //regex matches\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    function validIntGreaterOrEqualThanZero(value){\r\n        //^pattern$ => using pattern between '^' and '$' means the complete word has to match the pattern and not just a substring\r\n        let pattern = \"^[0-9]+$\"\r\n        let regex = new RegExp(pattern);\r\n        if(regex.test(value)){\r\n            //regex matches\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    function validFloatBetweenZeroAndOne(value){\r\n        //^pattern$ => using pattern between '^' and '$' means the complete word has to match the pattern and not just a substring\r\n        let pattern = \"(^0((\\\\.?)|(\\\\.[0-9]*))$)|(^1((\\\\.?)|(\\\\.0*))$)\"\r\n        let regex = new RegExp(pattern);\r\n        if(regex.test(value)){\r\n            //regex matches\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    function validFloat(value){\r\n        //^pattern$ => using pattern between '^' and '$' means the complete word has to match the pattern and not just a substring\r\n        let pattern = \"^[0-9]+(\\\\.?)[0-9]*$\"\r\n        let regex = new RegExp(pattern);\r\n        if(regex.test(value)){\r\n            //regex matches\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    function validStringOrDropDownSelection(value){\r\n        //It just needs to exist and not be empty\r\n        if(value === undefined || value === null || value === \"\"){\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    function validDropDownMultipleSelection(value){\r\n        //Value is an array and thereby must not be empty\r\n        if(value.length === 0){\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    function validTimeStamp(value){\r\n        if(value === null)\r\n            return false\r\n        //Value is a input of type \"datetime-local\"\r\n        let dateAndTime = value.split(\"T\");\r\n        if(dateAndTime.length === 2){\r\n            let dateSplited = dateAndTime[0].split(\"-\")\r\n            let timeSplited = dateAndTime[1].split(\":\")\r\n            //according to month verify if day is valid\r\n            let month = parseInt(dateSplited[1])\r\n            let day = parseInt(dateSplited[2])\r\n            if(month <= 7){\r\n                if(month % 2 === 0){\r\n                    if(month === 2){\r\n                        if(isLeapYear(parseInt(dateSplited[0]))){\r\n                            if(day > 29){\r\n                                return false\r\n                            }  \r\n                        }\r\n                        else{\r\n                            if(day > 28){\r\n                                return false\r\n                            }  \r\n                        }\r\n                    }\r\n                    else{\r\n                        if(day > 30){\r\n                            return false\r\n                        }\r\n                    }   \r\n                }\r\n            }\r\n            else{\r\n                if(month % 2 === 1){\r\n                    if(day > 30){\r\n                        return false\r\n                    }\r\n                }\r\n            }\r\n            //verify time\r\n            if(timeSplited[2] > 59){ //verify seconds\r\n                return false\r\n            }\r\n        }\r\n        else{\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    //leap year => 366 days\r\n    function isLeapYear(year){\r\n        if(year % 4 === 0){\r\n            if(year % 100 === 0){\r\n                if(year % 400 === 0){\r\n                    return true\r\n                }\r\n            }\r\n            else{\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    return {validIntGreaterThanZero,validIntGreaterOrEqualThanZero,validFloatBetweenZeroAndOne,\r\n        validStringOrDropDownSelection,validFloat,validDropDownMultipleSelection, validTimeStamp}\r\n}\r\n\r\nexport default ValidInputs;","import axios from 'axios';\r\nimport Configurations from '../../configurations/Configurations';\r\n\r\nfunction ApiModule() {\r\n  const apiURL = Configurations().API_BASE_URL;\r\n\r\n  //return list of metrics\r\n  function getMetrics(queryParams){\r\n    let endpoint = apiURL + \"getMetrics\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"metrics\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single metric\r\n  function getMetricById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getMetrics/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"metric\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //create a metric\r\n  function createMetric(body){\r\n    let endpoint = apiURL + \"createMetric\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of descriptions\r\n  function getDescriptions(queryParams){\r\n    let endpoint = apiURL + \"getDescriptions\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"descriptions\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of quality models\r\n  function getQualityModels(queryParams, setStateFunction){\r\n    let endpoint = apiURL + \"getQualityModels\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"qualityModels\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single quality model\r\n  function getQualityModelById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getQualityModels/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"qualityModel\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n  \r\n  //create a quality model\r\n  function createQualityModel(body){\r\n    let endpoint = apiURL + \"createQualityModel\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //create a configuration profile for a quality model\r\n  function createConfigurationProfile(body){\r\n    let endpoint = apiURL + \"createConfigurationProfile\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single quality model\r\n  function getConfigurationProfileById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getConfigurationProfile/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"configurationProfile\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of currently monitored resources. queryParams specify if the resources to be retrieved should have actions\r\n  //associated in the case of creating a rule ('createRule' param should be set to true). \r\n  function getActiveResources(queryParams){\r\n    let endpoint = apiURL + \"getResources\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"resources\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of weights and metric tree associated to the resource\r\n  function getResourceWeightsAndMetricsTree(id){\r\n    let endpoint = apiURL + \"getResources/\" + id + \"/weightedTree\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a list of metrics that can be either leaf attribute or \"normal\" metrics exclusively\r\n  function getConfigurationProfileListOfMetrics(configurationProfileId, queryParams){\r\n    let endpoint = apiURL + \"getConfigurationProfile/\" + configurationProfileId + \"/listOfMetrics\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"listOfMetrics\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getResourceData(resourceId, queryParams){\r\n    let endpoint = apiURL + \"getResources/\" + resourceId + \"/data\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"plotData\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getSimulationData(body){\r\n    let endpoint = apiURL + \"simulateData\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.patch(endpoint,body).then((res) => \r\n        {\r\n          return res.data[\"simulationData\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getPlotsConfigs(){\r\n    let endpoint = apiURL + \"getPlotsConfigs\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data[\"plotsConfigs\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function savePlotConfig(body){\r\n    let endpoint = apiURL + \"addPlotConfig\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return error.response\r\n        }\r\n      )\r\n  }\r\n\r\n  function replacePlotConfig(body){\r\n    let endpoint = apiURL + \"replacePlotConfig\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.put(endpoint,body).then((res) => \r\n        {\r\n          return res\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return error.response\r\n        }\r\n      )\r\n  }\r\n\r\n  function deletePlotConfig(id){\r\n    let endpoint = apiURL + \"deletePlotConfig/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.delete(endpoint).then((res) => \r\n        {\r\n          return res.status\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of rules names\r\n  function getRulesNames(queryParams){\r\n    let endpoint = apiURL + \"getRules\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"rulesNames\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return deatils of a rule\r\n  function getRuleCode(ruleName){\r\n    let endpoint = apiURL + \"getRules/\" + ruleName\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data[\"ruleDetail\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function removeRule(ruleName){\r\n    let endpoint = apiURL + \"removeRule/\" + ruleName\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.delete(endpoint).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getActionsAndConfigsByResource(queryParams){\r\n    let endpoint = apiURL + \"getActions/\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //create an adaptation rule\r\n  function createRule(body){\r\n    let endpoint = apiURL + \"addRule\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  return {\r\n    getMetrics,\r\n    getMetricById,\r\n    createMetric,\r\n    getDescriptions,\r\n    getQualityModels,\r\n    getQualityModelById,\r\n    createQualityModel,\r\n    createConfigurationProfile,\r\n    getConfigurationProfileById,\r\n    getActiveResources,\r\n    getResourceWeightsAndMetricsTree,\r\n    getConfigurationProfileListOfMetrics,\r\n    getResourceData,\r\n    getSimulationData,\r\n    getPlotsConfigs,\r\n    savePlotConfig,\r\n    replacePlotConfig,\r\n    deletePlotConfig,\r\n    getRulesNames,\r\n    getRuleCode,\r\n    removeRule,\r\n    getActionsAndConfigsByResource,\r\n    createRule,\r\n  };\r\n\r\n}\r\n\r\nexport default ApiModule","export default function Configurations() {\r\n    const API_IP_ADDRESS = \"192.168.1.68\" //\"10.3.3.68\"\r\n    const API_PORT = \"8080\"\r\n\r\n    const configData = {\r\n        \"API_BASE_URL\": \"http://\" + API_IP_ADDRESS + \":\" + API_PORT + \"/\",\r\n    }\r\n\r\n    return configData;\r\n}","import React, { useEffect, useState } from \"react\";\r\n\r\nfunction TreeLabel(props){\r\n    const [extraLabelForNodes, setExtraLabelForNodes] = useState(\r\n            {\r\n                text: (props[\"text\"].toString().split(\"\\n\")[0])\r\n            }\r\n        )\r\n\r\n    useEffect(()=>{\r\n        //if this is a node's label, it might be needed to add an extra label to represent weights. Thereby, check if this is\r\n        // a node's label and then split received text by \"\\n\". If the size is > 1, it means it has an extra label to render.\r\n        //Then, save both texts, the original and the extra label. In the return statement add extra label if its set on the \r\n        //state variable\r\n        if(props.node === true){\r\n            let labelsText = props.text.split(\"\\n\")\r\n            let extraLabelForNodesTemp = JSON.parse(JSON.stringify(extraLabelForNodes))\r\n            extraLabelForNodesTemp.text = labelsText[0]\r\n            if(labelsText.length > 1){\r\n                extraLabelForNodesTemp.weightLabel = labelsText[1]\r\n            }\r\n            setExtraLabelForNodes(extraLabelForNodesTemp)\r\n        }    \r\n    },[props.text])\r\n    \r\n    //Default customization of <Canvas> tag from reaflow library generated graphically bad labels. The examples were followed and\r\n    //used for edge property => <Edge \r\n    //                    style={{ stroke: 'black', strokeWidth: 2 }}\r\n    //                    label={<Label style={{ fill: 'red', fontWeight: \"900\"}} />}\r\n    //                  />}\r\n    //Thereby html tags generated with the default configs were analyzed, and found out the node graphs were being \r\n    //generated with SVG. \r\n    //Next, props being passed to the label were analyzed to understand the way the library renders the graph. Found \r\n    //out 'transform=\"translate(x,y)\" was used to position the labels.\r\n    //All the information passed to the label is retrieved from the props, which are the 'x' and 'y' assigned positions \r\n    //for the label inside the canvas, and the 'text' which the label presents on the screen.\r\n    //Finally, used svg elements to customize the labels in a own way. \r\n    return props[\"node\"] === false ?\r\n        <g transform={\"translate(\" + props.x + \",\" + props.y + \")\"}> \r\n            <circle fill=\"white\" stroke=\"#4287f5\" strokeWidth=\"2\" r=\"20\" /> \r\n            <text textAnchor=\"middle\" dominantBaseline = \"middle\" fill=\"black\">{props.text}</text>   \r\n        </g>\r\n        : \r\n        (\r\n            <React.Fragment>\r\n                <g transform={\"translate(\" + props.x + \",\" + props.y + \")\"}> \r\n                    <text fill=\"black\">{extraLabelForNodes.text}</text>   \r\n                </g>\r\n                {\r\n                    extraLabelForNodes.weightLabel !== undefined && extraLabelForNodes.weightLabel !== \"\" ?\r\n                    <g transform={\"translate(\" + props.x + \",\" + props.y + \")\"}> \r\n                        <circle cx= {props.x + props.width} cy={props.y + 6*props.height} fill=\"white\" stroke=\"#4287f5\" strokeWidth=\"2\" r=\"20\" />\r\n                        <text \r\n                            textAnchor=\"middle\"\r\n                            dominantBaseline = \"middle\"\r\n                            x={props.x + props.width} \r\n                            y={props.y + 6*props.height} \r\n                            fill=\"black\">\r\n                                {extraLabelForNodes.weightLabel}\r\n                        </text>      \r\n                    </g>\r\n                    :null\r\n                }               \r\n            </React.Fragment>\r\n        ) \r\n}\r\n\r\nexport default TreeLabel;","import { useEffect, useRef, useState, forwardRef, useImperativeHandle } from 'react';\r\nimport { Canvas, Edge, Node, Label } from 'reaflow';\r\nimport {Loader, Button, Icon} from \"semantic-ui-react\"\r\nimport TreeLabel from \"./TreeLabel\"\r\n\r\n\r\nfunction TreeRender (props,ref) {\r\n    const data = props[\"data\"];\r\n    const [nodes, setNodes] = useState([]);\r\n    const [edges, setEdges] = useState([]);\r\n    const [treeReady,setTreeReady] = useState(false);\r\n    const canvasRef = useRef();\r\n    const canvasDivRef = useRef();\r\n\r\n    //If it is to render a configuration profile, show the weights\r\n    const configurationProfile = props[\"configurationProfile\"];\r\n    const preferences = props[\"preferences\"];\r\n    \r\n    //Use of auxiliar variables to hold nodes and edges information while that information is being retrieved\r\n    //Later, once all the information is retrieved, use state variables \"edges\" and \"nodes\" to render \r\n    var nodesaux = [];\r\n    var edgesaux = [];\r\n    \r\n    //function that allows formating received data into the format requested by reaflow (tree rendering library)\r\n    function processData(parent){\r\n\r\n      //add current node (which is the parent) to list of nodes\r\n      let nodeToAdd = {\r\n        id: parent[\"metricId\"].toString(),\r\n        text: parent[\"metricName\"]\r\n      }\r\n      nodesaux.push(nodeToAdd);\r\n\r\n      //iterate over each child of parent node, add edge information and recursively call this function \"processData\"\r\n      //for each child to repeat the process\r\n      for(let child of parent[\"childMetrics\"]){\r\n        let edgeToAdd = {\r\n          id: parent[\"metricId\"].toString() + child[\"metricId\"].toString(),\r\n          from: child[\"metricId\"].toString(),\r\n          to: parent[\"metricId\"].toString(),\r\n        }\r\n        if(configurationProfile){\r\n          edgeToAdd.text = preferences.find(preference => preference.metricId === child.metricId).weight;\r\n        }\r\n        edgesaux.push(edgeToAdd)\r\n        processData(child)\r\n      }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        //Once the component is rendered, deal with the transformation of the format of the data received from the API \r\n        //into the format needed by the tree library \r\n        processData(data)\r\n        if(configurationProfile){\r\n          let rootNode = nodesaux.find(node => parseInt(node.id) === data.metricId)\r\n          rootNode.text = rootNode.text.split(\"\\n\")[0] + \"\\n\" + \r\n            preferences.find(preference => preference.metricId === parseInt(rootNode.id)).weight;\r\n        }\r\n        //use state to set and render processed nodes and edges information  \r\n        setNodes(nodesaux)\r\n        setEdges(edgesaux)\r\n        setTreeReady(true)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[data]);\r\n\r\n    useEffect(() => {\r\n      //if the Tree has been rendered, the div is no longer undefined and thereby wheel event can be added\r\n      // to later allow CRTL + MOUSEWHEEl to zoom in/out on the canvas, if buttons aren't wished to be used\r\n      if(canvasDivRef.current !== undefined){\r\n        canvasDivRef.current.addEventListener('wheel', mouseWheelHandler,{passive:false});\r\n      }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[treeReady]);\r\n    \r\n    const zoomIn = () => {\r\n      canvasRef.current.zoomIn()\r\n    }\r\n\r\n    const zoomOut = () => {\r\n      canvasRef.current.zoomOut()\r\n    }\r\n\r\n    const fitCanvas = () => {\r\n      canvasRef.current.fitCanvas()\r\n    }\r\n\r\n    function mouseWheelHandler(event){\r\n      if(event.ctrlKey === true){\r\n        event.preventDefault();\r\n        //Wheel down\r\n        if(event.wheelDelta < 0) {\r\n            zoomOut()\r\n        }\r\n        //Wheel up\r\n        else {\r\n          zoomIn()\r\n        }\r\n      }\r\n    }\r\n\r\n    function updateWeightsHandler(metricIdToUpdateWeight,weightToApply){\r\n      let newEdges = JSON.parse(JSON.stringify(edges))\r\n      let foundEdge = false\r\n      for(let edgeInfo of newEdges){\r\n        if(edgeInfo.id.endsWith(metricIdToUpdateWeight)){\r\n          foundEdge = true\r\n          edgeInfo.text = weightToApply\r\n          setEdges(newEdges)\r\n          fitCanvas()\r\n          break;\r\n        }\r\n      }\r\n      //didn't found Edge, which means the weight its being applied on the root node. Thereby, add an extra label to\r\n      //show the node's weight assigned\r\n      if(!foundEdge){\r\n        //copy state variable and find the node to which the extra label will be added\r\n        let newNodes = JSON.parse(JSON.stringify(nodes))\r\n        let nodeRef = newNodes.find(node => parseInt(node.id) === metricIdToUpdateWeight)\r\n        //after finding the node split its display text by '\\n' and take the 1st word which is the original text. Then, add the\r\n        //text of the weight to show on the extra label. This split by '\\n' is needed as multiple changes would add multiple\r\n        //'\\n' to the text and that would render multiple extra labels\r\n        nodeRef.text = nodeRef.text.split(\"\\n\")[0] + \"\\n\" + weightToApply\r\n        setNodes(newNodes)\r\n      }\r\n    }\r\n\r\n    //Needed to expose tree update functions to outside components\r\n    useImperativeHandle(ref, () => ({\r\n      updateWeightsHandler\r\n    }));\r\n\r\n    //Followed the demos and docs of reaflow libray at https://reaflow.dev/?path=/story/docs-getting-started-components--page\r\n    return (\r\n      treeReady === true ?\r\n      <div>\r\n        <div>\r\n          <p style={{marginBottom:\"5px\"}} align=\"right\">\r\n            <Button icon color='blue' onClick={zoomIn}> \r\n              <Icon name='zoom-in'/>\r\n            </Button>\r\n            <Button icon color='blue' onClick={zoomOut}> \r\n              <Icon name='zoom-out'/>\r\n            </Button>\r\n          </p>\r\n        </div>  \r\n        <div ref={canvasDivRef}>\r\n          <Canvas\r\n              disabled={true}\r\n              arrow={null}\r\n              height={ props[\"height\"]}\r\n              width={ props[\"width\"]}\r\n              nodes={nodes}\r\n              edges={edges}\r\n              readonly = {true}\r\n              animated = {false}\r\n              direction= \"UP\"\r\n              ref= {canvasRef}\r\n              fit = {true}\r\n              minZoom = {-0.9}\r\n              zoomable = {false}\r\n              node={\r\n                <Node\r\n                  style={{ stroke: 'black', fill: '#ffe6cc', strokeWidth: 3}}\r\n                  label={<TreeLabel node={true}/>}\r\n                />\r\n              }\r\n              edge={<Edge \r\n                      style={{ stroke: 'black', strokeWidth: 2 }}\r\n                      label={<TreeLabel node={false}/>}\r\n                    />}\r\n          />\r\n          {/* NODE LABEL:            label={<Label style={{ fill: 'black', fontWeight: \"900\"}}>*/ }\r\n        </div> \r\n      </div>: <Loader active inline='centered'> Constructing tree </Loader>\r\n    )\r\n}\r\n\r\n//forwardRef necessary so that methods can be invoked and state variables be accessed\r\nexport default forwardRef(TreeRender);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getElementType, getUnhandledProps } from '../../lib';\n\nfunction TableBody(props) {\n  var children = props.children,\n      className = props.className;\n  var classes = cx(className);\n  var rest = getUnhandledProps(TableBody, props);\n  var ElementType = getElementType(TableBody, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nTableBody.handledProps = [\"as\", \"children\", \"className\"];\nTableBody.defaultProps = {\n  as: 'tbody'\n};\nTableBody.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string\n} : {};\nexport default TableBody;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport Icon from '../../elements/Icon';\n/**\n * A table row can have cells.\n */\n\nfunction TableCell(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      content = props.content,\n      disabled = props.disabled,\n      error = props.error,\n      icon = props.icon,\n      negative = props.negative,\n      positive = props.positive,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      warning = props.warning,\n      width = props.width;\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(warning, 'warning'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(width, 'wide'), className);\n  var rest = getUnhandledProps(TableCell, props);\n  var ElementType = getElementType(TableCell, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), Icon.create(icon), content);\n}\n\nTableCell.handledProps = [\"active\", \"as\", \"children\", \"className\", \"collapsing\", \"content\", \"disabled\", \"error\", \"icon\", \"negative\", \"positive\", \"selectable\", \"singleLine\", \"textAlign\", \"verticalAlign\", \"warning\", \"width\"];\nTableCell.defaultProps = {\n  as: 'td'\n};\nTableCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A cell can be active or selected by a user. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A cell can be collapsing so that it only uses as much space as required. */\n  collapsing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A cell can be disabled. */\n  disabled: PropTypes.bool,\n\n  /** A cell may call attention to an error or a negative value. */\n  error: PropTypes.bool,\n\n  /** Add an Icon by name, props object, or pass an <Icon /> */\n  icon: customPropTypes.itemShorthand,\n\n  /** A cell may let a user know whether a value is bad. */\n  negative: PropTypes.bool,\n\n  /** A cell may let a user know whether a value is good. */\n  positive: PropTypes.bool,\n\n  /** A cell can be selectable. */\n  selectable: PropTypes.bool,\n\n  /** A cell can specify that its contents should remain on a single line and not wrap. */\n  singleLine: PropTypes.bool,\n\n  /** A table cell can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table cell can adjust its text alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A cell may warn a user. */\n  warning: PropTypes.bool,\n\n  /** A table can specify the width of individual columns independently. */\n  width: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nTableCell.create = createShorthandFactory(TableCell, function (content) {\n  return {\n    content: content\n  };\n});\nexport default TableCell;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A table can have a header.\n */\n\nfunction TableHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      fullWidth = props.fullWidth;\n  var classes = cx(useKeyOnly(fullWidth, 'full-width'), className);\n  var rest = getUnhandledProps(TableHeader, props);\n  var ElementType = getElementType(TableHeader, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nTableHeader.handledProps = [\"as\", \"children\", \"className\", \"content\", \"fullWidth\"];\nTableHeader.defaultProps = {\n  as: 'thead'\n};\nTableHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A definition table can have a full width header or footer, filling in the gap left by the first column. */\n  fullWidth: PropTypes.bool\n} : {};\nexport default TableHeader;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getUnhandledProps } from '../../lib';\nimport TableHeader from './TableHeader';\n/**\n * A table can have a footer.\n */\n\nfunction TableFooter(props) {\n  var as = props.as;\n  var rest = getUnhandledProps(TableFooter, props);\n  return /*#__PURE__*/React.createElement(TableHeader, _extends({}, rest, {\n    as: as\n  }));\n}\n\nTableFooter.handledProps = [\"as\"];\nTableFooter.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType\n} : {};\nTableFooter.defaultProps = {\n  as: 'tfoot'\n};\nexport default TableFooter;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getUnhandledProps, useValueAndKey } from '../../lib';\nimport TableCell from './TableCell';\n/**\n * A table can have a header cell.\n */\n\nfunction TableHeaderCell(props) {\n  var as = props.as,\n      className = props.className,\n      sorted = props.sorted;\n  var classes = cx(useValueAndKey(sorted, 'sorted'), className);\n  var rest = getUnhandledProps(TableHeaderCell, props);\n  return /*#__PURE__*/React.createElement(TableCell, _extends({}, rest, {\n    as: as,\n    className: classes\n  }));\n}\n\nTableHeaderCell.handledProps = [\"as\", \"className\", \"sorted\"];\nTableHeaderCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A header cell can be sorted in ascending or descending order. */\n  sorted: PropTypes.oneOf(['ascending', 'descending'])\n} : {};\nTableHeaderCell.defaultProps = {\n  as: 'th'\n};\nexport default TableHeaderCell;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport _map from \"lodash-es/map\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useVerticalAlignProp } from '../../lib';\nimport TableCell from './TableCell';\n/**\n * A table can have rows.\n */\n\nfunction TableRow(props) {\n  var active = props.active,\n      cellAs = props.cellAs,\n      cells = props.cells,\n      children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      error = props.error,\n      negative = props.negative,\n      positive = props.positive,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      warning = props.warning;\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(warning, 'warning'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), className);\n  var rest = getUnhandledProps(TableRow, props);\n  var ElementType = getElementType(TableRow, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), _map(cells, function (cell) {\n    return TableCell.create(cell, {\n      defaultProps: {\n        as: cellAs\n      }\n    });\n  }));\n}\n\nTableRow.handledProps = [\"active\", \"as\", \"cellAs\", \"cells\", \"children\", \"className\", \"disabled\", \"error\", \"negative\", \"positive\", \"textAlign\", \"verticalAlign\", \"warning\"];\nTableRow.defaultProps = {\n  as: 'tr',\n  cellAs: 'td'\n};\nTableRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A row can be active or selected by a user. */\n  active: PropTypes.bool,\n\n  /** An element type to render as (string or function). */\n  cellAs: PropTypes.elementType,\n\n  /** Shorthand array of props for TableCell. */\n  cells: customPropTypes.collectionShorthand,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A row can be disabled. */\n  disabled: PropTypes.bool,\n\n  /** A row may call attention to an error or a negative value. */\n  error: PropTypes.bool,\n\n  /** A row may let a user know whether a value is bad. */\n  negative: PropTypes.bool,\n\n  /** A row may let a user know whether a value is good. */\n  positive: PropTypes.bool,\n\n  /** A table row can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table row can adjust its vertical alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A row may warn a user. */\n  warning: PropTypes.bool\n} : {};\nTableRow.create = createShorthandFactory(TableRow, function (cells) {\n  return {\n    cells: cells\n  };\n});\nexport default TableRow;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport _map from \"lodash-es/map\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport TableBody from './TableBody';\nimport TableCell from './TableCell';\nimport TableFooter from './TableFooter';\nimport TableHeader from './TableHeader';\nimport TableHeaderCell from './TableHeaderCell';\nimport TableRow from './TableRow';\n/**\n * A table displays a collections of data grouped into rows.\n */\n\nfunction Table(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      celled = props.celled,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      color = props.color,\n      columns = props.columns,\n      compact = props.compact,\n      definition = props.definition,\n      fixed = props.fixed,\n      footerRow = props.footerRow,\n      headerRow = props.headerRow,\n      headerRows = props.headerRows,\n      inverted = props.inverted,\n      padded = props.padded,\n      renderBodyRow = props.renderBodyRow,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      size = props.size,\n      sortable = props.sortable,\n      stackable = props.stackable,\n      striped = props.striped,\n      structured = props.structured,\n      tableData = props.tableData,\n      textAlign = props.textAlign,\n      unstackable = props.unstackable,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', color, size, useKeyOnly(celled, 'celled'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(definition, 'definition'), useKeyOnly(fixed, 'fixed'), useKeyOnly(inverted, 'inverted'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(sortable, 'sortable'), useKeyOnly(stackable, 'stackable'), useKeyOnly(striped, 'striped'), useKeyOnly(structured, 'structured'), useKeyOnly(unstackable, 'unstackable'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(basic, 'basic'), useKeyOrValueAndKey(compact, 'compact'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column'), 'table', className);\n  var rest = getUnhandledProps(Table, props);\n  var ElementType = getElementType(Table, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  var hasHeaderRows = headerRow || headerRows;\n  var headerShorthandOptions = {\n    defaultProps: {\n      cellAs: 'th'\n    }\n  };\n  var headerElement = hasHeaderRows && /*#__PURE__*/React.createElement(TableHeader, null, TableRow.create(headerRow, headerShorthandOptions), _map(headerRows, function (data) {\n    return TableRow.create(data, headerShorthandOptions);\n  }));\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), headerElement, /*#__PURE__*/React.createElement(TableBody, null, renderBodyRow && _map(tableData, function (data, index) {\n    return TableRow.create(renderBodyRow(data, index));\n  })), footerRow && /*#__PURE__*/React.createElement(TableFooter, null, TableRow.create(footerRow)));\n}\n\nTable.handledProps = [\"as\", \"attached\", \"basic\", \"celled\", \"children\", \"className\", \"collapsing\", \"color\", \"columns\", \"compact\", \"definition\", \"fixed\", \"footerRow\", \"headerRow\", \"headerRows\", \"inverted\", \"padded\", \"renderBodyRow\", \"selectable\", \"singleLine\", \"size\", \"sortable\", \"stackable\", \"striped\", \"structured\", \"tableData\", \"textAlign\", \"unstackable\", \"verticalAlign\"];\nTable.defaultProps = {\n  as: 'table'\n};\nTable.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Attach table to other content */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** A table can reduce its complexity to increase readability. */\n  basic: PropTypes.oneOfType([PropTypes.oneOf(['very']), PropTypes.bool]),\n\n  /** A table may be divided into individual cells. */\n  celled: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A table can be collapsing, taking up only as much space as its rows. */\n  collapsing: PropTypes.bool,\n\n  /** A table can be given a color to distinguish it from other tables. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A table can specify its column count to divide its content evenly. */\n  columns: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A table may sometimes need to be more compact to make more rows visible at a time. */\n  compact: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A table may be formatted to emphasize a first column that defines a rows content. */\n  definition: PropTypes.bool,\n\n  /**\n   * A table can use fixed a special faster form of table rendering that does not resize table cells based on content\n   */\n  fixed: PropTypes.bool,\n\n  /** Shorthand for a TableRow to be placed within Table.Footer. */\n  footerRow: customPropTypes.itemShorthand,\n\n  /** Shorthand for a TableRow to be placed within Table.Header. */\n  headerRow: customPropTypes.every([customPropTypes.disallow(['headerRows']), customPropTypes.itemShorthand]),\n\n  /** Shorthand for multiple TableRows to be placed within Table.Header. */\n  headerRows: customPropTypes.every([customPropTypes.disallow(['headerRow']), customPropTypes.collectionShorthand]),\n\n  /** A table's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A table may sometimes need to be more padded for legibility. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /**\n   * Mapped over `tableData` and should return shorthand for each Table.Row to be placed within Table.Body.\n   *\n   * @param {*} data - An element in the `tableData` array.\n   * @param {number} index - The index of the current element in `tableData`.\n   * @returns {*} Shorthand for a Table.Row.\n   */\n  renderBodyRow: customPropTypes.every([customPropTypes.disallow(['children']), customPropTypes.demand(['tableData']), PropTypes.func]),\n\n  /** A table can have its rows appear selectable. */\n  selectable: PropTypes.bool,\n\n  /** A table can specify that its cell contents should remain on a single line and not wrap. */\n  singleLine: PropTypes.bool,\n\n  /** A table can also be small or large. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'mini', 'tiny', 'medium', 'big', 'huge', 'massive')),\n\n  /** A table may allow a user to sort contents by clicking on a table header. */\n  sortable: PropTypes.bool,\n\n  /** A table can specify how it stacks table content responsively. */\n  stackable: PropTypes.bool,\n\n  /** A table can stripe alternate rows of content with a darker color to increase contrast. */\n  striped: PropTypes.bool,\n\n  /** A table can be formatted to display complex structured data. */\n  structured: PropTypes.bool,\n\n  /** Data to be passed to the renderBodyRow function. */\n  tableData: customPropTypes.every([customPropTypes.disallow(['children']), customPropTypes.demand(['renderBodyRow']), PropTypes.array]),\n\n  /** A table can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table can specify how it stacks table content responsively. */\n  unstackable: PropTypes.bool,\n\n  /** A table can adjust its text alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nTable.Body = TableBody;\nTable.Cell = TableCell;\nTable.Footer = TableFooter;\nTable.Header = TableHeader;\nTable.HeaderCell = TableHeaderCell;\nTable.Row = TableRow;\nexport default Table;"],"names":["props","navigate","useNavigate","useState","successPath","openModal","messageType","message","modalState","setModalState","modalCloseHandler","ev","atts","modalInfo","useEffect","centered","closeIcon","open","onClose","color","onClick","uniqueId","map","headerName","returnTableHeader","tableHeaders","preferences","setPreferences","profileName","setProfileName","qualityModelListOfMetrics","setQualityModelListOfMetrics","formErrorDisplay","setFormErrorDisplay","postResponseMessage","setPostResponseMessage","qm","useLocation","metricsTreeRef","useRef","getMetricsList","metric","listOfMetrics","push","validInput","formInputName","metricId","ValidInputs","validFloatBetweenZeroAndOne","content","pointing","validStringOrDropDownSelection","formFieldInputChangeHandler","newPreferences","current","updateWeightsHandler","currentTarget","value","validWeightsSum","parentMetric","childMetrics","length","sum","child","parseFloat","console","log","preventDefault","valid","postData","Object","entries","key","weight","threshold","ApiModule","createConfigurationProfile","resData","newPreferencesTemp","width","section","horizontal","as","textAlign","columns","widths","ref","height","data","compact","required","label","name","onChange","error","circular","type","floated","celled","selectable","collapsing","metricid","generateCustomTableRow","generateCustomTableBody","validIntGreaterThanZero","RegExp","test","validIntGreaterOrEqualThanZero","undefined","validFloat","validDropDownMultipleSelection","validTimeStamp","dateAndTime","split","dateSplited","timeSplited","month","parseInt","day","year","isLeapYear","apiURL","getMetrics","queryParams","axios","params","then","res","catch","getMetricById","id","setStateFunction","endpoint","createMetric","body","response","getDescriptions","getQualityModels","getQualityModelById","createQualityModel","getConfigurationProfileById","getActiveResources","getResourceWeightsAndMetricsTree","getConfigurationProfileListOfMetrics","configurationProfileId","getResourceData","resourceId","getSimulationData","getPlotsConfigs","savePlotConfig","replacePlotConfig","deletePlotConfig","status","getRulesNames","getRuleCode","ruleName","removeRule","getActionsAndConfigsByResource","createRule","text","toString","extraLabelForNodes","setExtraLabelForNodes","node","labelsText","extraLabelForNodesTemp","JSON","parse","stringify","weightLabel","transform","x","y","fill","stroke","strokeWidth","r","textAnchor","dominantBaseline","cx","cy","TreeRender","nodes","setNodes","edges","setEdges","treeReady","setTreeReady","canvasRef","canvasDivRef","configurationProfile","nodesaux","edgesaux","processData","parent","nodeToAdd","edgeToAdd","from","to","find","preference","rootNode","addEventListener","mouseWheelHandler","passive","zoomIn","zoomOut","event","ctrlKey","wheelDelta","metricIdToUpdateWeight","weightToApply","newEdges","foundEdge","edgeInfo","endsWith","fitCanvas","newNodes","nodeRef","useImperativeHandle","style","marginBottom","align","Button","icon","Icon","Canvas","disabled","arrow","readonly","animated","direction","fit","minZoom","zoomable","Node","edge","Edge","Loader","active","inline","forwardRef","TableBody","children","className","classes","rest","getUnhandledProps","ElementType","getElementType","React","_extends","handledProps","defaultProps","propTypes","TableCell","negative","positive","singleLine","verticalAlign","warning","useKeyOnly","useTextAlignProp","useVerticalAlignProp","useWidthProp","childrenUtils","create","createShorthandFactory","TableHeader","fullWidth","TableFooter","TableHeaderCell","sorted","useValueAndKey","TableRow","cellAs","cells","_map","cell","Table","attached","basic","definition","fixed","footerRow","headerRow","headerRows","inverted","padded","renderBodyRow","size","sortable","stackable","striped","structured","tableData","unstackable","useKeyOrValueAndKey","headerShorthandOptions","headerElement","index","Body","Cell","Footer","Header","HeaderCell","Row"],"sourceRoot":""}