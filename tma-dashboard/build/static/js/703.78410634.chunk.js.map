{"version":3,"file":"static/js/703.78410634.chunk.js","mappings":"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","sources":["components/tables/TableBody.js","components/tables/TableHeader.js","components/tables/TablePagination.js","pages/QualityModels/ListQualityModelsPage.js","utils/api/ApiModule.js","configurations/Configurations.js","../node_modules/semantic-ui-react/dist/es/elements/Container/Container.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["import {Table} from 'semantic-ui-react'\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction TableBody(props){\r\n    //uniqueID is requested for Table items so that React can optimize rendering process \r\n    //It is used for the key property which must be set and be unique \r\n    let uniqueID = 0;\r\n    let navigate = useNavigate();\r\n    const tableRowBasePath = props[\"baserowpathlink\"];\r\n\r\n    function tableRowHandler(ev){\r\n        navigate(tableRowBasePath + \"/\" + ev.currentTarget.getAttribute(\"rowid\"),{state: {data: props[\"rowlinkdata\"]}})\r\n    }\r\n\r\n    //style={{cursor:\"pointer\"}} onClick={tableRowHandler}\r\n    function renderRow(rowItemData){\r\n        let tableHeaders = props[\"tableHeaders\"]\r\n        return (\r\n            <Table.Row  \r\n            {\r\n                ...tableRowBasePath !== undefined ? \r\n                {\r\n                    style: {cursor:\"pointer\"},\r\n                    onClick: tableRowHandler\r\n                } \r\n                : null\r\n            } \r\n            rowid={rowItemData[tableHeaders[0]]} \r\n            key={uniqueID++}>\r\n                {\r\n                    //for each row item, get the values for the header attributes respecting the table headers order\r\n                    tableHeaders.map(headerName => renderRowCell(headerName,rowItemData))\r\n                }\r\n            </Table.Row>\r\n        )\r\n    }\r\n\r\n    function renderRowCell(headerName,rowItemData){\r\n        return <Table.Cell key={uniqueID++}> {rowItemData[headerName]} </Table.Cell>\r\n    }\r\n\r\n    return(\r\n        <Table.Body>\r\n            {\r\n                //iterate over the result list to access each row item; props[\"data\"] => list of entities\r\n                props[\"data\"].map((rowItemData) => renderRow(rowItemData))\r\n            }\r\n        </Table.Body>\r\n    )\r\n}\r\n\r\nexport default TableBody","import {Table} from 'semantic-ui-react'\r\n\r\nfunction TableHeader(props){\r\n    let uniqueId = 0;\r\n    function returnTableHeader(headerName){\r\n        //key property must be set and be unique because React uses it to optimize rendering process \r\n        return <Table.HeaderCell key={uniqueId++}> {headerName}</Table.HeaderCell>\r\n    }\r\n\r\n    return(\r\n    <Table.Header>\r\n      <Table.Row>\r\n        {props[\"tableHeaders\"].map(headerName => returnTableHeader(headerName))}\r\n      </Table.Row>\r\n    </Table.Header>\r\n    )\r\n}\r\n\r\nexport default TableHeader","import {Icon, Menu, Table} from 'semantic-ui-react'\r\nimport {useState} from \"react\"\r\n\r\nfunction TablePagination(props){\r\n    const [paginationItems, setPaginationItems] = useState([1,2,3]);\r\n    const [currIndex,setCurrIndex] = useState(0);\r\n    \r\n    function paginationPageHandler(ev, atts){\r\n        setCurrIndex(atts[\"index\"])\r\n    }\r\n\r\n    function goBackPaginationHandler(ev, atts){\r\n        if(currIndex === 0){\r\n            let paginationItemsCopy = [...paginationItems];\r\n            for (let i =0; i< paginationItems.length; i++){\r\n                paginationItemsCopy[i] = paginationItemsCopy[i] - 1\r\n            }\r\n            setPaginationItems(paginationItemsCopy)\r\n        }\r\n        else{\r\n            setCurrIndex(currIndex - 1)\r\n        }\r\n    }\r\n\r\n    function goForwardPaginationHandler(ev, atts){\r\n        if(currIndex === 2){\r\n            let paginationItemsCopy = [...paginationItems];\r\n            for (let i =0; i< paginationItems.length; i++){\r\n                paginationItemsCopy[i] = paginationItemsCopy[i] + 1\r\n            }\r\n            setPaginationItems(paginationItemsCopy)\r\n        }\r\n        else{\r\n            setCurrIndex(currIndex + 1)\r\n        }\r\n    }\r\n    \r\n    return(\r\n        null\r\n        /* uncomment and remove \"null\" from above to show pagination menu\r\n        <Table.Footer>\r\n            <Table.Row>\r\n                <Table.HeaderCell colSpan={props[\"numberOfColumns\"]}>\r\n                    <Menu pointing secondary compact stackable>\r\n                        <Menu.Item \r\n                            as={(currIndex === 0 && paginationItems[0] === 1) ? \"div\" : \"a\" }\r\n                            disabled = {currIndex === 0 && paginationItems[0] === 1 } icon onClick={goBackPaginationHandler}>\r\n                            <Icon name='chevron left' />\r\n                        </Menu.Item>\r\n                        \r\n                        <Menu.Item as='a' index = {0} active={ 0 === currIndex } onClick={paginationPageHandler}>\r\n                            {paginationItems[0]}\r\n                        </Menu.Item>\r\n                        \r\n                        <Menu.Item as='a' index = {1} active={ 1 === currIndex } onClick={paginationPageHandler}> \r\n                            {paginationItems[1]}\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item as='a' index = {2} active={ 2 === currIndex } onClick={paginationPageHandler}> \r\n                            {paginationItems[2]}\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item as='a' icon onClick={goForwardPaginationHandler}>\r\n                            <Icon name='chevron right' />\r\n                        </Menu.Item>\r\n                    </Menu>\r\n                </Table.HeaderCell>\r\n            </Table.Row>\r\n        </Table.Footer>*/\r\n    )\r\n}\r\n\r\nexport default TablePagination;","import { Loader, Divider, Table, Icon, Header, Button, Grid, Form, Container, Segment} from 'semantic-ui-react'\r\nimport ApiModule from \"../../utils/api/ApiModule\"\r\nimport {useState, useEffect} from \"react\"\r\nimport TableHeader from \"../../components/tables/TableHeader\"\r\nimport TableBody from \"../../components/tables/TableBody\"\r\nimport TablePagination from '../../components/tables/TablePagination'\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction ListQualityModelsPage(props){\r\n    let navigate = useNavigate();\r\n    const currpath = props[\"currpath\"]\r\n    \r\n    const tableBodyJSONProps = [\"qualityModelId\",\"modelName\",\"metricId\",\"metricName\"]; \r\n    //above add the following strings: \"modelDescriptionReference\",\"businessThreshold\"\r\n    //and add below: \"Description Reference\", \"Business Threshold\" to show these properties\r\n    const tableHeaders = [\"Id\", \"Name\", \"Metric Id\", \"Metric Name\"];\r\n\r\n    \r\n    const [apiData, setAPIData] = useState(null);\r\n    const [apiDataProcessed, setAPIDataProcessed] = useState(false);\r\n    const [filters, setFilters] = useState({\r\n        \"qualityModelsFilter\": \"\",\r\n        \"metricsFilter\": \"\"\r\n    });\r\n    \r\n    \r\n    function makeAPIRequest(queryParams){\r\n        ApiModule().getQualityModels(queryParams, setAPIData)\r\n    }\r\n    \r\n    //Execute upon component rendering\r\n    useEffect(() => {\r\n        //perform API request\r\n        makeAPIRequest(null)\r\n    },[]);\r\n    \r\n    useEffect(() => {\r\n        if(apiData !== null && apiDataProcessed === false){\r\n            processAPIData()\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[apiData]);\r\n\r\n    function processAPIData(){\r\n        let apiDataNew = []\r\n        for(let apiDataElem of apiData){\r\n            apiDataElem[\"metricId\"] =  apiDataElem[\"metric\"][\"metricId\"]\r\n            apiDataElem[\"metricName\"] = apiDataElem[\"metric\"][\"metricName\"]\r\n            delete apiDataElem[\"metric\"]\r\n            apiDataNew.push(apiDataElem)\r\n        }\r\n        setAPIData(apiDataNew);\r\n        setAPIDataProcessed(true);\r\n    }\r\n\r\n    function filterChangeHandler(ev,atts){\r\n        if(atts[\"name\"] === \"qualityModelsFilter\"){\r\n            setFilters({\r\n                    ...filters,\r\n                    \"qualityModelsFilter\": atts[\"value\"]\r\n                })\r\n        }\r\n        else{\r\n            setFilters({\r\n                    ...filters,\r\n                    \"metricsFilter\": atts[\"value\"]\r\n                })\r\n        }\r\n    }\r\n\r\n    function filterSubmitHandler(ev){\r\n        let queryParams = {\r\n            \"qualityModelsFilter\": filters[\"qualityModelsFilter\"],\r\n            \"metricsFilter\": filters[\"metricsFilter\"]\r\n        }\r\n        setAPIDataProcessed(false)\r\n        makeAPIRequest(queryParams)\r\n    }\r\n    \r\n    function createQualityModelButtonHandler(){\r\n        navigate(\"/createQualityModel\")\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <Grid centered>\r\n                <Grid.Row >\r\n                    <Grid.Column>\r\n                        <Divider section horizontal>\r\n                            <Header as=\"h1\" textAlign=\"center\">List of Quality Models</Header> \r\n                        </Divider>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n            {\r\n            //if apiData is null, then it is because the response from the API hasn't arrived\r\n            apiData === null ? <Loader active inline='centered'> Retrieving content</Loader> :\r\n                <Grid columns={1} centered> \r\n                    <Grid.Column>\r\n                        <Container>\r\n                            <p align=\"right\">\r\n                                <Button color='blue' onClick={createQualityModelButtonHandler}> \r\n                                    Create Quality Model \r\n                                </Button>\r\n                            </p>\r\n                            <Form widths='equal'  onSubmit={filterSubmitHandler}> \r\n                                <Form.Group>\r\n                                    <Form.Input name=\"qualityModelsFilter\" onChange={filterChangeHandler} label=\"Filter by name or id\"/>\r\n                                    <Form.Input name = \"metricsFilter\" onChange={filterChangeHandler} label=\"Filter by Metric's name or id\"/>\r\n                                    <Form.Field style={{marginTop: \"auto\"}}>\r\n                                        <Form.Button color='blue' type='submit' icon>\r\n                                            Filter\r\n                                            <Icon name='filter' />\r\n                                        </Form.Button>\r\n                                    </Form.Field>\r\n                                </Form.Group>\r\n                            </Form>\r\n                            { \r\n                            apiDataProcessed === false ? <Loader active inline='centered'> Retrieving content </Loader>:\r\n                            \r\n                            <Table textAlign=\"center\" celled selectable> \r\n                                <TableHeader tableHeaders = {tableHeaders} ></TableHeader>\r\n                                <TableBody baserowpathlink={currpath} data={apiData} tableHeaders = {tableBodyJSONProps}></TableBody>\r\n                                <TablePagination numberOfColumns={tableHeaders.length}/>\r\n                            </Table>   \r\n                            }\r\n                        </Container>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            }\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListQualityModelsPage;","import axios from 'axios';\r\nimport Configurations from '../../configurations/Configurations';\r\n\r\nfunction ApiModule() {\r\n  const apiURL = Configurations().API_BASE_URL;\r\n\r\n  //return list of metrics\r\n  function getMetrics(queryParams){\r\n    let endpoint = apiURL + \"getMetrics\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"metrics\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single metric\r\n  function getMetricById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getMetrics/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"metric\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //create a metric\r\n  function createMetric(body){\r\n    let endpoint = apiURL + \"createMetric\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of descriptions\r\n  function getDescriptions(queryParams){\r\n    let endpoint = apiURL + \"getDescriptions\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"descriptions\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of quality models\r\n  function getQualityModels(queryParams, setStateFunction){\r\n    let endpoint = apiURL + \"getQualityModels\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"qualityModels\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single quality model\r\n  function getQualityModelById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getQualityModels/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"qualityModel\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n  \r\n  //create a quality model\r\n  function createQualityModel(body){\r\n    let endpoint = apiURL + \"createQualityModel\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //create a configuration profile for a quality model\r\n  function createConfigurationProfile(body){\r\n    let endpoint = apiURL + \"createConfigurationProfile\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single quality model\r\n  function getConfigurationProfileById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getConfigurationProfile/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"configurationProfile\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of currently monitored resources. queryParams specify if the resources to be retrieved should have actions\r\n  //associated in the case of creating a rule ('createRule' param should be set to true). \r\n  function getActiveResources(queryParams){\r\n    let endpoint = apiURL + \"getResources\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"resources\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of weights and metric tree associated to the resource\r\n  function getResourceWeightsAndMetricsTree(id){\r\n    let endpoint = apiURL + \"getResources/\" + id + \"/weightedTree\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a list of metrics that can be either leaf attribute or \"normal\" metrics exclusively\r\n  function getConfigurationProfileListOfMetrics(configurationProfileId, queryParams){\r\n    let endpoint = apiURL + \"getConfigurationProfile/\" + configurationProfileId + \"/listOfMetrics\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"listOfMetrics\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getResourceData(resourceId, queryParams){\r\n    let endpoint = apiURL + \"getResources/\" + resourceId + \"/data\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"plotData\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getSimulationData(body){\r\n    let endpoint = apiURL + \"simulateData\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.patch(endpoint,body).then((res) => \r\n        {\r\n          return res.data[\"simulationData\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getPlotsConfigs(){\r\n    let endpoint = apiURL + \"getPlotsConfigs\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data[\"plotsConfigs\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function savePlotConfig(body){\r\n    let endpoint = apiURL + \"addPlotConfig\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return error.response\r\n        }\r\n      )\r\n  }\r\n\r\n  function replacePlotConfig(body){\r\n    let endpoint = apiURL + \"replacePlotConfig\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.put(endpoint,body).then((res) => \r\n        {\r\n          return res\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return error.response\r\n        }\r\n      )\r\n  }\r\n\r\n  function deletePlotConfig(id){\r\n    let endpoint = apiURL + \"deletePlotConfig/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.delete(endpoint).then((res) => \r\n        {\r\n          return res.status\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of rules names\r\n  function getRulesNames(queryParams){\r\n    let endpoint = apiURL + \"getRules\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"rulesNames\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return deatils of a rule\r\n  function getRuleCode(ruleName){\r\n    let endpoint = apiURL + \"getRules/\" + ruleName\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data[\"ruleDetail\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function removeRule(ruleName){\r\n    let endpoint = apiURL + \"removeRule/\" + ruleName\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.delete(endpoint).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getActionsAndConfigsByResource(queryParams){\r\n    let endpoint = apiURL + \"getActions/\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //create an adaptation rule\r\n  function createRule(body){\r\n    let endpoint = apiURL + \"addRule\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  return {\r\n    getMetrics,\r\n    getMetricById,\r\n    createMetric,\r\n    getDescriptions,\r\n    getQualityModels,\r\n    getQualityModelById,\r\n    createQualityModel,\r\n    createConfigurationProfile,\r\n    getConfigurationProfileById,\r\n    getActiveResources,\r\n    getResourceWeightsAndMetricsTree,\r\n    getConfigurationProfileListOfMetrics,\r\n    getResourceData,\r\n    getSimulationData,\r\n    getPlotsConfigs,\r\n    savePlotConfig,\r\n    replacePlotConfig,\r\n    deletePlotConfig,\r\n    getRulesNames,\r\n    getRuleCode,\r\n    removeRule,\r\n    getActionsAndConfigsByResource,\r\n    createRule,\r\n  };\r\n\r\n}\r\n\r\nexport default ApiModule","export default function Configurations() {\r\n    const API_IP_ADDRESS = \"192.168.1.68\" //\"10.3.3.68\"\r\n    const API_PORT = \"8080\"\r\n\r\n    const configData = {\r\n        \"API_BASE_URL\": \"http://\" + API_IP_ADDRESS + \":\" + API_PORT + \"/\",\r\n    }\r\n\r\n    return configData;\r\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\n/**\n * A container limits content to a maximum width.\n */\n\nfunction Container(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      fluid = props.fluid,\n      text = props.text,\n      textAlign = props.textAlign;\n  var classes = cx('ui', useKeyOnly(text, 'text'), useKeyOnly(fluid, 'fluid'), useTextAlignProp(textAlign), 'container', className);\n  var rest = getUnhandledProps(Container, props);\n  var ElementType = getElementType(Container, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nContainer.handledProps = [\"as\", \"children\", \"className\", \"content\", \"fluid\", \"text\", \"textAlign\"];\nContainer.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Container has no maximum width. */\n  fluid: PropTypes.bool,\n\n  /** Reduce maximum width to more naturally accommodate text. */\n  text: PropTypes.bool,\n\n  /** Align container text. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS)\n} : {};\nexport default Container;","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["props","uniqueID","navigate","useNavigate","tableRowBasePath","tableRowHandler","ev","currentTarget","getAttribute","state","data","renderRow","rowItemData","tableHeaders","undefined","style","cursor","onClick","rowid","key","map","headerName","renderRowCell","uniqueId","returnTableHeader","useState","currpath","apiData","setAPIData","apiDataProcessed","setAPIDataProcessed","filters","setFilters","makeAPIRequest","queryParams","ApiModule","getQualityModels","filterChangeHandler","atts","useEffect","apiDataNew","apiDataElem","push","processAPIData","centered","section","horizontal","as","textAlign","active","inline","columns","align","color","widths","onSubmit","name","onChange","label","marginTop","type","icon","celled","selectable","baserowpathlink","numberOfColumns","length","apiURL","getMetrics","axios","params","then","res","catch","error","console","log","message","getMetricById","id","setStateFunction","endpoint","createMetric","body","response","getDescriptions","getQualityModelById","createQualityModel","createConfigurationProfile","getConfigurationProfileById","getActiveResources","getResourceWeightsAndMetricsTree","getConfigurationProfileListOfMetrics","configurationProfileId","getResourceData","resourceId","getSimulationData","getPlotsConfigs","savePlotConfig","replacePlotConfig","deletePlotConfig","status","getRulesNames","getRuleCode","ruleName","removeRule","getActionsAndConfigsByResource","createRule","Container","children","className","content","fluid","text","classes","cx","useKeyOnly","useTextAlignProp","rest","getUnhandledProps","ElementType","getElementType","React","_extends","childrenUtils","handledProps","propTypes","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2"],"sourceRoot":""}