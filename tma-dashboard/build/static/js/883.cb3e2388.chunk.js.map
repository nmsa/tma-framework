{"version":3,"file":"static/js/883.cb3e2388.chunk.js","mappings":"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","sources":["utils/ValidInputs.js","utils/api/ApiModule.js","configurations/Configurations.js","utils/dropDownDataFormat/DropDownDataFormat.js","utils/treeRendering/TreeLabel.js","utils/treeRendering/TreeRender.js"],"sourcesContent":["\r\nfunction ValidInputs(){\r\n    function validIntGreaterThanZero(value){\r\n        //^pattern$ => using pattern between '^' and '$' means the complete word has to match the pattern and not just a substring\r\n        let pattern = \"^[0]*[1-9][0-9]*$\"\r\n        let regex = new RegExp(pattern);\r\n        if(regex.test(value)){\r\n            //regex matches\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    function validIntGreaterOrEqualThanZero(value){\r\n        //^pattern$ => using pattern between '^' and '$' means the complete word has to match the pattern and not just a substring\r\n        let pattern = \"^[0-9]+$\"\r\n        let regex = new RegExp(pattern);\r\n        if(regex.test(value)){\r\n            //regex matches\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    function validFloatBetweenZeroAndOne(value){\r\n        //^pattern$ => using pattern between '^' and '$' means the complete word has to match the pattern and not just a substring\r\n        let pattern = \"(^0((\\\\.?)|(\\\\.[0-9]*))$)|(^1((\\\\.?)|(\\\\.0*))$)\"\r\n        let regex = new RegExp(pattern);\r\n        if(regex.test(value)){\r\n            //regex matches\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    function validFloat(value){\r\n        //^pattern$ => using pattern between '^' and '$' means the complete word has to match the pattern and not just a substring\r\n        let pattern = \"^[0-9]+(\\\\.?)[0-9]*$\"\r\n        let regex = new RegExp(pattern);\r\n        if(regex.test(value)){\r\n            //regex matches\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    function validStringOrDropDownSelection(value){\r\n        //It just needs to exist and not be empty\r\n        if(value === undefined || value === null || value === \"\"){\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    function validDropDownMultipleSelection(value){\r\n        //Value is an array and thereby must not be empty\r\n        if(value.length === 0){\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    function validTimeStamp(value){\r\n        if(value === null)\r\n            return false\r\n        //Value is a input of type \"datetime-local\"\r\n        let dateAndTime = value.split(\"T\");\r\n        if(dateAndTime.length === 2){\r\n            let dateSplited = dateAndTime[0].split(\"-\")\r\n            let timeSplited = dateAndTime[1].split(\":\")\r\n            //according to month verify if day is valid\r\n            let month = parseInt(dateSplited[1])\r\n            let day = parseInt(dateSplited[2])\r\n            if(month <= 7){\r\n                if(month % 2 === 0){\r\n                    if(month === 2){\r\n                        if(isLeapYear(parseInt(dateSplited[0]))){\r\n                            if(day > 29){\r\n                                return false\r\n                            }  \r\n                        }\r\n                        else{\r\n                            if(day > 28){\r\n                                return false\r\n                            }  \r\n                        }\r\n                    }\r\n                    else{\r\n                        if(day > 30){\r\n                            return false\r\n                        }\r\n                    }   \r\n                }\r\n            }\r\n            else{\r\n                if(month % 2 === 1){\r\n                    if(day > 30){\r\n                        return false\r\n                    }\r\n                }\r\n            }\r\n            //verify time\r\n            if(timeSplited[2] > 59){ //verify seconds\r\n                return false\r\n            }\r\n        }\r\n        else{\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    //leap year => 366 days\r\n    function isLeapYear(year){\r\n        if(year % 4 === 0){\r\n            if(year % 100 === 0){\r\n                if(year % 400 === 0){\r\n                    return true\r\n                }\r\n            }\r\n            else{\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    return {validIntGreaterThanZero,validIntGreaterOrEqualThanZero,validFloatBetweenZeroAndOne,\r\n        validStringOrDropDownSelection,validFloat,validDropDownMultipleSelection, validTimeStamp}\r\n}\r\n\r\nexport default ValidInputs;","import axios from 'axios';\r\nimport Configurations from '../../configurations/Configurations';\r\n\r\nfunction ApiModule() {\r\n  const apiURL = Configurations().API_BASE_URL;\r\n\r\n  //return list of metrics\r\n  function getMetrics(queryParams){\r\n    let endpoint = apiURL + \"getMetrics\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"metrics\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single metric\r\n  function getMetricById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getMetrics/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"metric\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //create a metric\r\n  function createMetric(body){\r\n    let endpoint = apiURL + \"createMetric\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of descriptions\r\n  function getDescriptions(queryParams){\r\n    let endpoint = apiURL + \"getDescriptions\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"descriptions\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of quality models\r\n  function getQualityModels(queryParams, setStateFunction){\r\n    let endpoint = apiURL + \"getQualityModels\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"qualityModels\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single quality model\r\n  function getQualityModelById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getQualityModels/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"qualityModel\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n  \r\n  //create a quality model\r\n  function createQualityModel(body){\r\n    let endpoint = apiURL + \"createQualityModel\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //create a configuration profile for a quality model\r\n  function createConfigurationProfile(body){\r\n    let endpoint = apiURL + \"createConfigurationProfile\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single quality model\r\n  function getConfigurationProfileById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getConfigurationProfile/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"configurationProfile\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of currently monitored resources. queryParams specify if the resources to be retrieved should have actions\r\n  //associated in the case of creating a rule ('createRule' param should be set to true). \r\n  function getActiveResources(queryParams){\r\n    let endpoint = apiURL + \"getResources\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"resources\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of weights and metric tree associated to the resource\r\n  function getResourceWeightsAndMetricsTree(id){\r\n    let endpoint = apiURL + \"getResources/\" + id + \"/weightedTree\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a list of metrics that can be either leaf attribute or \"normal\" metrics exclusively\r\n  function getConfigurationProfileListOfMetrics(configurationProfileId, queryParams){\r\n    let endpoint = apiURL + \"getConfigurationProfile/\" + configurationProfileId + \"/listOfMetrics\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"listOfMetrics\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getResourceData(resourceId, queryParams){\r\n    let endpoint = apiURL + \"getResources/\" + resourceId + \"/data\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"plotData\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getSimulationData(body){\r\n    let endpoint = apiURL + \"simulateData\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.patch(endpoint,body).then((res) => \r\n        {\r\n          return res.data[\"simulationData\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getPlotsConfigs(){\r\n    let endpoint = apiURL + \"getPlotsConfigs\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data[\"plotsConfigs\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function savePlotConfig(body){\r\n    let endpoint = apiURL + \"addPlotConfig\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return error.response\r\n        }\r\n      )\r\n  }\r\n\r\n  function replacePlotConfig(body){\r\n    let endpoint = apiURL + \"replacePlotConfig\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.put(endpoint,body).then((res) => \r\n        {\r\n          return res\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return error.response\r\n        }\r\n      )\r\n  }\r\n\r\n  function deletePlotConfig(id){\r\n    let endpoint = apiURL + \"deletePlotConfig/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.delete(endpoint).then((res) => \r\n        {\r\n          return res.status\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of rules names\r\n  function getRulesNames(queryParams){\r\n    let endpoint = apiURL + \"getRules\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"rulesNames\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return deatils of a rule\r\n  function getRuleCode(ruleName){\r\n    let endpoint = apiURL + \"getRules/\" + ruleName\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data[\"ruleDetail\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function removeRule(ruleName){\r\n    let endpoint = apiURL + \"removeRule/\" + ruleName\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.delete(endpoint).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getActionsAndConfigsByResource(queryParams){\r\n    let endpoint = apiURL + \"getActions/\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //create an adaptation rule\r\n  function createRule(body){\r\n    let endpoint = apiURL + \"addRule\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  return {\r\n    getMetrics,\r\n    getMetricById,\r\n    createMetric,\r\n    getDescriptions,\r\n    getQualityModels,\r\n    getQualityModelById,\r\n    createQualityModel,\r\n    createConfigurationProfile,\r\n    getConfigurationProfileById,\r\n    getActiveResources,\r\n    getResourceWeightsAndMetricsTree,\r\n    getConfigurationProfileListOfMetrics,\r\n    getResourceData,\r\n    getSimulationData,\r\n    getPlotsConfigs,\r\n    savePlotConfig,\r\n    replacePlotConfig,\r\n    deletePlotConfig,\r\n    getRulesNames,\r\n    getRuleCode,\r\n    removeRule,\r\n    getActionsAndConfigsByResource,\r\n    createRule,\r\n  };\r\n\r\n}\r\n\r\nexport default ApiModule","export default function Configurations() {\r\n    const API_IP_ADDRESS = \"192.168.1.68\" //\"10.3.3.68\"\r\n    const API_PORT = \"8080\"\r\n\r\n    const configData = {\r\n        \"API_BASE_URL\": \"http://\" + API_IP_ADDRESS + \":\" + API_PORT + \"/\",\r\n    }\r\n\r\n    return configData;\r\n}","function DropDownDataFormat(){\r\n\r\n    function convertMetrics(originalMetrics, setMetricsFunc){\r\n        let formattedMetrics = []\r\n        for(var metric of originalMetrics){\r\n            let metricTemp = {\r\n                key: metric[\"metricId\"].toString(),\r\n                value: metric[\"metricId\"].toString(),\r\n                text:  \"[id = \" + metric[\"metricId\"].toString() \r\n                    + \"] \" + metric[\"metricName\"]\r\n            }\r\n            formattedMetrics.push(metricTemp)\r\n        }\r\n        setMetricsFunc(formattedMetrics)\r\n    }\r\n\r\n    function convertDescriptions(originalDescriptions, setDescriptionsFunc){\r\n        let formattedDescriptions = []\r\n        for(var description of originalDescriptions){\r\n            let descriptionTemp = {\r\n                key: description[\"descriptionId\"].toString(),\r\n                value: description[\"descriptionId\"].toString(),\r\n                text:  \"[id = \" + description[\"descriptionId\"].toString() \r\n                + \"] \" + description[\"descriptionName\"] + \" (\" + description[\"unit\"] + \")\"\r\n            }\r\n            formattedDescriptions.push(descriptionTemp)\r\n        }\r\n        setDescriptionsFunc(formattedDescriptions)\r\n    }\r\n\r\n    function convertResources(originalResources, setResourcesFunc){\r\n        let formattedResources = []\r\n        for(var resource of originalResources){\r\n            let resourceTemp = {\r\n                key: resource[\"resourceId\"].toString(),\r\n                value: resource[\"resourceId\"].toString(),\r\n                text:  \"[id = \" + resource[\"resourceId\"].toString() \r\n                + \"] \" + resource[\"resourceName\"] + \" (\" + resource[\"resourceAddress\"] + \")\"\r\n            }\r\n            formattedResources.push(resourceTemp)\r\n        }\r\n        setResourcesFunc(formattedResources)\r\n    }\r\n\r\n    function convertActions(originalActions, setActionsFunc){\r\n        let formattedActions = []\r\n        for(var action of originalActions){\r\n            let resourceTemp = {\r\n                chosen: \"false\",\r\n                key: action[\"actionId\"],\r\n                value: action[\"actionId\"],\r\n                text:  \"[id = \" + action[\"actionId\"].toString() \r\n                + \"] \" + action[\"actionName\"]\r\n            }\r\n            formattedActions.push(resourceTemp)\r\n        }\r\n        setActionsFunc(formattedActions)\r\n    }\r\n\r\n    return{convertMetrics,convertDescriptions,convertResources,convertActions}\r\n}\r\n\r\nexport default DropDownDataFormat;","import React, { useEffect, useState } from \"react\";\r\n\r\nfunction TreeLabel(props){\r\n    const [extraLabelForNodes, setExtraLabelForNodes] = useState(\r\n            {\r\n                text: (props[\"text\"].toString().split(\"\\n\")[0])\r\n            }\r\n        )\r\n\r\n    useEffect(()=>{\r\n        //if this is a node's label, it might be needed to add an extra label to represent weights. Thereby, check if this is\r\n        // a node's label and then split received text by \"\\n\". If the size is > 1, it means it has an extra label to render.\r\n        //Then, save both texts, the original and the extra label. In the return statement add extra label if its set on the \r\n        //state variable\r\n        if(props.node === true){\r\n            let labelsText = props.text.split(\"\\n\")\r\n            let extraLabelForNodesTemp = JSON.parse(JSON.stringify(extraLabelForNodes))\r\n            extraLabelForNodesTemp.text = labelsText[0]\r\n            if(labelsText.length > 1){\r\n                extraLabelForNodesTemp.weightLabel = labelsText[1]\r\n            }\r\n            setExtraLabelForNodes(extraLabelForNodesTemp)\r\n        }    \r\n    },[props.text])\r\n    \r\n    //Default customization of <Canvas> tag from reaflow library generated graphically bad labels. The examples were followed and\r\n    //used for edge property => <Edge \r\n    //                    style={{ stroke: 'black', strokeWidth: 2 }}\r\n    //                    label={<Label style={{ fill: 'red', fontWeight: \"900\"}} />}\r\n    //                  />}\r\n    //Thereby html tags generated with the default configs were analyzed, and found out the node graphs were being \r\n    //generated with SVG. \r\n    //Next, props being passed to the label were analyzed to understand the way the library renders the graph. Found \r\n    //out 'transform=\"translate(x,y)\" was used to position the labels.\r\n    //All the information passed to the label is retrieved from the props, which are the 'x' and 'y' assigned positions \r\n    //for the label inside the canvas, and the 'text' which the label presents on the screen.\r\n    //Finally, used svg elements to customize the labels in a own way. \r\n    return props[\"node\"] === false ?\r\n        <g transform={\"translate(\" + props.x + \",\" + props.y + \")\"}> \r\n            <circle fill=\"white\" stroke=\"#4287f5\" strokeWidth=\"2\" r=\"20\" /> \r\n            <text textAnchor=\"middle\" dominantBaseline = \"middle\" fill=\"black\">{props.text}</text>   \r\n        </g>\r\n        : \r\n        (\r\n            <React.Fragment>\r\n                <g transform={\"translate(\" + props.x + \",\" + props.y + \")\"}> \r\n                    <text fill=\"black\">{extraLabelForNodes.text}</text>   \r\n                </g>\r\n                {\r\n                    extraLabelForNodes.weightLabel !== undefined && extraLabelForNodes.weightLabel !== \"\" ?\r\n                    <g transform={\"translate(\" + props.x + \",\" + props.y + \")\"}> \r\n                        <circle cx= {props.x + props.width} cy={props.y + 6*props.height} fill=\"white\" stroke=\"#4287f5\" strokeWidth=\"2\" r=\"20\" />\r\n                        <text \r\n                            textAnchor=\"middle\"\r\n                            dominantBaseline = \"middle\"\r\n                            x={props.x + props.width} \r\n                            y={props.y + 6*props.height} \r\n                            fill=\"black\">\r\n                                {extraLabelForNodes.weightLabel}\r\n                        </text>      \r\n                    </g>\r\n                    :null\r\n                }               \r\n            </React.Fragment>\r\n        ) \r\n}\r\n\r\nexport default TreeLabel;","import { useEffect, useRef, useState, forwardRef, useImperativeHandle } from 'react';\r\nimport { Canvas, Edge, Node, Label } from 'reaflow';\r\nimport {Loader, Button, Icon} from \"semantic-ui-react\"\r\nimport TreeLabel from \"./TreeLabel\"\r\n\r\n\r\nfunction TreeRender (props,ref) {\r\n    const data = props[\"data\"];\r\n    const [nodes, setNodes] = useState([]);\r\n    const [edges, setEdges] = useState([]);\r\n    const [treeReady,setTreeReady] = useState(false);\r\n    const canvasRef = useRef();\r\n    const canvasDivRef = useRef();\r\n\r\n    //If it is to render a configuration profile, show the weights\r\n    const configurationProfile = props[\"configurationProfile\"];\r\n    const preferences = props[\"preferences\"];\r\n    \r\n    //Use of auxiliar variables to hold nodes and edges information while that information is being retrieved\r\n    //Later, once all the information is retrieved, use state variables \"edges\" and \"nodes\" to render \r\n    var nodesaux = [];\r\n    var edgesaux = [];\r\n    \r\n    //function that allows formating received data into the format requested by reaflow (tree rendering library)\r\n    function processData(parent){\r\n\r\n      //add current node (which is the parent) to list of nodes\r\n      let nodeToAdd = {\r\n        id: parent[\"metricId\"].toString(),\r\n        text: parent[\"metricName\"]\r\n      }\r\n      nodesaux.push(nodeToAdd);\r\n\r\n      //iterate over each child of parent node, add edge information and recursively call this function \"processData\"\r\n      //for each child to repeat the process\r\n      for(let child of parent[\"childMetrics\"]){\r\n        let edgeToAdd = {\r\n          id: parent[\"metricId\"].toString() + child[\"metricId\"].toString(),\r\n          from: child[\"metricId\"].toString(),\r\n          to: parent[\"metricId\"].toString(),\r\n        }\r\n        if(configurationProfile){\r\n          edgeToAdd.text = preferences.find(preference => preference.metricId === child.metricId).weight;\r\n        }\r\n        edgesaux.push(edgeToAdd)\r\n        processData(child)\r\n      }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        //Once the component is rendered, deal with the transformation of the format of the data received from the API \r\n        //into the format needed by the tree library \r\n        processData(data)\r\n        if(configurationProfile){\r\n          let rootNode = nodesaux.find(node => parseInt(node.id) === data.metricId)\r\n          rootNode.text = rootNode.text.split(\"\\n\")[0] + \"\\n\" + \r\n            preferences.find(preference => preference.metricId === parseInt(rootNode.id)).weight;\r\n        }\r\n        //use state to set and render processed nodes and edges information  \r\n        setNodes(nodesaux)\r\n        setEdges(edgesaux)\r\n        setTreeReady(true)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[data]);\r\n\r\n    useEffect(() => {\r\n      //if the Tree has been rendered, the div is no longer undefined and thereby wheel event can be added\r\n      // to later allow CRTL + MOUSEWHEEl to zoom in/out on the canvas, if buttons aren't wished to be used\r\n      if(canvasDivRef.current !== undefined){\r\n        canvasDivRef.current.addEventListener('wheel', mouseWheelHandler,{passive:false});\r\n      }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[treeReady]);\r\n    \r\n    const zoomIn = () => {\r\n      canvasRef.current.zoomIn()\r\n    }\r\n\r\n    const zoomOut = () => {\r\n      canvasRef.current.zoomOut()\r\n    }\r\n\r\n    const fitCanvas = () => {\r\n      canvasRef.current.fitCanvas()\r\n    }\r\n\r\n    function mouseWheelHandler(event){\r\n      if(event.ctrlKey === true){\r\n        event.preventDefault();\r\n        //Wheel down\r\n        if(event.wheelDelta < 0) {\r\n            zoomOut()\r\n        }\r\n        //Wheel up\r\n        else {\r\n          zoomIn()\r\n        }\r\n      }\r\n    }\r\n\r\n    function updateWeightsHandler(metricIdToUpdateWeight,weightToApply){\r\n      let newEdges = JSON.parse(JSON.stringify(edges))\r\n      let foundEdge = false\r\n      for(let edgeInfo of newEdges){\r\n        if(edgeInfo.id.endsWith(metricIdToUpdateWeight)){\r\n          foundEdge = true\r\n          edgeInfo.text = weightToApply\r\n          setEdges(newEdges)\r\n          fitCanvas()\r\n          break;\r\n        }\r\n      }\r\n      //didn't found Edge, which means the weight its being applied on the root node. Thereby, add an extra label to\r\n      //show the node's weight assigned\r\n      if(!foundEdge){\r\n        //copy state variable and find the node to which the extra label will be added\r\n        let newNodes = JSON.parse(JSON.stringify(nodes))\r\n        let nodeRef = newNodes.find(node => parseInt(node.id) === metricIdToUpdateWeight)\r\n        //after finding the node split its display text by '\\n' and take the 1st word which is the original text. Then, add the\r\n        //text of the weight to show on the extra label. This split by '\\n' is needed as multiple changes would add multiple\r\n        //'\\n' to the text and that would render multiple extra labels\r\n        nodeRef.text = nodeRef.text.split(\"\\n\")[0] + \"\\n\" + weightToApply\r\n        setNodes(newNodes)\r\n      }\r\n    }\r\n\r\n    //Needed to expose tree update functions to outside components\r\n    useImperativeHandle(ref, () => ({\r\n      updateWeightsHandler\r\n    }));\r\n\r\n    //Followed the demos and docs of reaflow libray at https://reaflow.dev/?path=/story/docs-getting-started-components--page\r\n    return (\r\n      treeReady === true ?\r\n      <div>\r\n        <div>\r\n          <p style={{marginBottom:\"5px\"}} align=\"right\">\r\n            <Button icon color='blue' onClick={zoomIn}> \r\n              <Icon name='zoom-in'/>\r\n            </Button>\r\n            <Button icon color='blue' onClick={zoomOut}> \r\n              <Icon name='zoom-out'/>\r\n            </Button>\r\n          </p>\r\n        </div>  \r\n        <div ref={canvasDivRef}>\r\n          <Canvas\r\n              disabled={true}\r\n              arrow={null}\r\n              height={ props[\"height\"]}\r\n              width={ props[\"width\"]}\r\n              nodes={nodes}\r\n              edges={edges}\r\n              readonly = {true}\r\n              animated = {false}\r\n              direction= \"UP\"\r\n              ref= {canvasRef}\r\n              fit = {true}\r\n              minZoom = {-0.9}\r\n              zoomable = {false}\r\n              node={\r\n                <Node\r\n                  style={{ stroke: 'black', fill: '#ffe6cc', strokeWidth: 3}}\r\n                  label={<TreeLabel node={true}/>}\r\n                />\r\n              }\r\n              edge={<Edge \r\n                      style={{ stroke: 'black', strokeWidth: 2 }}\r\n                      label={<TreeLabel node={false}/>}\r\n                    />}\r\n          />\r\n          {/* NODE LABEL:            label={<Label style={{ fill: 'black', fontWeight: \"900\"}}>*/ }\r\n        </div> \r\n      </div>: <Loader active inline='centered'> Constructing tree </Loader>\r\n    )\r\n}\r\n\r\n//forwardRef necessary so that methods can be invoked and state variables be accessed\r\nexport default forwardRef(TreeRender);"],"names":["validIntGreaterThanZero","value","RegExp","test","validIntGreaterOrEqualThanZero","validFloatBetweenZeroAndOne","validStringOrDropDownSelection","undefined","validFloat","validDropDownMultipleSelection","length","validTimeStamp","dateAndTime","split","dateSplited","timeSplited","month","parseInt","day","year","isLeapYear","apiURL","getMetrics","queryParams","axios","params","then","res","data","catch","error","console","log","message","getMetricById","id","setStateFunction","endpoint","createMetric","body","response","getDescriptions","getQualityModels","getQualityModelById","createQualityModel","createConfigurationProfile","getConfigurationProfileById","getActiveResources","getResourceWeightsAndMetricsTree","getConfigurationProfileListOfMetrics","configurationProfileId","getResourceData","resourceId","getSimulationData","getPlotsConfigs","savePlotConfig","replacePlotConfig","deletePlotConfig","status","getRulesNames","getRuleCode","ruleName","removeRule","getActionsAndConfigsByResource","createRule","convertMetrics","originalMetrics","setMetricsFunc","formattedMetrics","metric","metricTemp","key","toString","text","push","convertDescriptions","originalDescriptions","setDescriptionsFunc","formattedDescriptions","description","descriptionTemp","convertResources","originalResources","setResourcesFunc","formattedResources","resource","resourceTemp","convertActions","originalActions","setActionsFunc","formattedActions","action","chosen","props","useState","extraLabelForNodes","setExtraLabelForNodes","useEffect","node","labelsText","extraLabelForNodesTemp","JSON","parse","stringify","weightLabel","transform","x","y","fill","stroke","strokeWidth","r","textAnchor","dominantBaseline","cx","width","cy","height","TreeRender","ref","nodes","setNodes","edges","setEdges","treeReady","setTreeReady","canvasRef","useRef","canvasDivRef","configurationProfile","preferences","nodesaux","edgesaux","processData","parent","nodeToAdd","child","edgeToAdd","from","to","find","preference","metricId","weight","rootNode","current","addEventListener","mouseWheelHandler","passive","zoomIn","zoomOut","event","ctrlKey","preventDefault","wheelDelta","updateWeightsHandler","metricIdToUpdateWeight","weightToApply","newEdges","foundEdge","edgeInfo","endsWith","fitCanvas","newNodes","nodeRef","useImperativeHandle","style","marginBottom","align","Button","icon","color","onClick","Icon","name","Canvas","disabled","arrow","readonly","animated","direction","fit","minZoom","zoomable","Node","label","edge","Edge","Loader","active","inline","forwardRef"],"sourceRoot":""}