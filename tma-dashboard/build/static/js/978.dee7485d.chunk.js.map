{"version":3,"file":"static/js/978.dee7485d.chunk.js","mappings":"oMAgEA,IA5DA,SAAqBA,GAEjB,IAAIC,GAAWC,EAAAA,EAAAA,MAEf,GAAoCC,EAAAA,EAAAA,UAChC,CACIC,YAAaJ,EAAMI,YACnBC,WAAW,EACXC,YAAa,KACbC,QAAS,OALjB,eAAOC,EAAP,KAAmBC,EAAnB,KASA,SAASC,EAAkBC,EAAGC,GACI,YAA3BJ,EAAWF,aACVL,EAASO,EAAWJ,aAExBJ,EAAMa,UAAUR,WAAY,EAC5BI,GAAc,kBAEHD,GAFE,IAGLH,WAAW,KAcvB,OATAS,EAAAA,EAAAA,YAAU,WACNL,GAAc,kBACPD,GADM,IAETH,UAAWL,EAAMa,UAAUR,UAC3BC,YAAaN,EAAMa,UAAUP,YAC7BC,QAASP,EAAMa,UAAUN,aAE/B,CAACP,KAGC,UAAC,IAAD,CAAOe,UAAU,EAAOC,WAAS,EAACC,KAAMT,EAAU,UAAeU,QAASR,EAA1E,WACI,SAAC,WAAD,uBACA,SAAC,YAAD,WACI,SAAC,IAAD,CACAS,MACsC,YAA9BX,EAAU,YACV,QAC+B,YAA9BA,EAAU,YACX,SACE,MANV,UASI,SAAC,WAAD,UAAiBA,EAAU,eAGnC,SAAC,YAAD,WACI,SAAC,IAAD,CAAQW,MAAM,OAAOC,QAASV,EAA9B,0B,uPCvBhB,MAhCA,WAYI,SAASW,EAA0BC,EAAcC,GAC7C,GAAGA,EAAUC,SAASF,EAAa,UAC/B,OAAO,EAGPC,EAAUE,KAAKH,EAAa,UAD5B,gBAEuBA,EAAa,cAFpC,IAEA,IAAI,EAAJ,qBAAqD,CACjD,IAAwD,IAArDD,EAD8C,QACRE,GACrC,OAAO,GAJf,8BAQJ,OAAO,EAGX,MAAO,CACHG,kBA1BJ,SAA2BC,GACvB,IAD0C,EACtCJ,EAAY,GAD0B,UAEnBI,GAFmB,IAE1C,IAAI,EAAJ,qBAA0C,CACtC,IAAwD,IAArDN,EADmC,QACGE,GACrC,OAAO,GAJ2B,8BAO1C,OAAO,K,uCCgdf,MAjdA,SAA0BvB,GAItB,OAAwCG,EAAAA,EAAAA,UAAS,MAAjD,eAAOyB,EAAP,KAAqBC,EAArB,KACA,GAA8B1B,EAAAA,EAAAA,UAAS,MAAvC,eAAO2B,EAAP,KAAgBC,EAAhB,KA6CA,GAA4C5B,EAAAA,EAAAA,UACxC,CAEI,OAAS,EAET,UAAa,EACb,WAAc,GACd,aAAgB,GAChB,6BAAgC,GAChC,0BAA6B,GAC7B,WAAc,KACd,oBAAuB,GACvB,kBAAqB,GACrB,iBAAoB,KACpB,iBAAoB,KACpB,cAAkB,KAf1B,eAAO6B,EAAP,KAAuBC,EAAvB,KAoBA,GAAyC9B,EAAAA,EAAAA,WAAS,GAAlD,eAAM+B,EAAN,KAAqBC,EAArB,KAEA,GAAgDhC,EAAAA,EAAAA,WAAS,GAAzD,eAAOiC,EAAP,KAAyBC,EAAzB,KAEA,GAAsDlC,EAAAA,EAAAA,UAAS,CAAC,WAAa,IAA7E,eAAOmC,EAAP,KAA4BC,EAA5B,KA1E4B,wCA8E5B,sGACwCC,EAA2B,MADnE,cACQC,EADR,gBAEmCC,EAAsB,MAFzD,OAEQC,EAFR,QAGIC,EAAAA,EAAAA,KAAqBC,eAAeF,EAAoBZ,IACxDa,EAAAA,EAAAA,KAAqBE,oBAAoBL,EAAyBZ,GAJtE,4CA9E4B,sBA4F5B,SAASW,EAA2BO,GAChC,OAAOC,EAAAA,EAAAA,KAAYC,gBAAgBF,GAGvC,SAASL,EAAsBK,GAC3B,OAAOC,EAAAA,EAAAA,KAAYE,WAAWH,GAjGN,wCAgI5B,WAAyCpC,EAAIC,GAA7C,mFAEQuC,EAAkBvC,EAAI,MAIpBwC,EAAS,SAACC,GAAgBC,EAAMD,GAGlCE,EAAe,GATvB,UAUwBJ,GAVxB,gEAUYK,EAVZ,mBAYcR,EAAAA,EAAAA,KAAYS,cAAcD,EAAUJ,GAZlD,QAaQG,EAAa9B,KAAK6B,GAb1B,+IAiBOI,IAA2BhC,kBAAkB6B,GAC5CtB,GAAkB,kBAAID,GAAL,IAAqB,aAAgBuB,EAAa,OAAS,KAG5EtB,GAAkB,kBAAID,GAAL,IAAqB,aAAgBuB,EAAa,OAAS,KArBpF,iEAhI4B,8DA0J5B,WAA6B5C,GAA7B,gFACIA,EAAGgD,kBAGAzB,EAJP,sBAKY0B,EAAAA,EAAAA,KAAcC,+BAA+B7B,EAAc,YALvE,sBAMmB4B,EAAAA,EAAAA,KAAcC,+BAA+B7B,EAAc,eAN9E,sBAOuB4B,EAAAA,EAAAA,KAAcC,+BAA+B7B,EAAc,2BAPlF,sBAQ2B4B,EAAAA,EAAAA,KAAcE,+BAA+B9B,EAAc,YARtF,sBAS+B4B,EAAAA,EAAAA,KAAcC,+BAA+B7B,EAAc,qBAT1F,sBAUmC4B,EAAAA,EAAAA,KAAcC,+BAA+B7B,EAAc,mBAV9F,sBAWuC4B,EAAAA,EAAAA,KAAcG,WAAW/B,EAAc,kBAX9E,sBAY2C4B,EAAAA,EAAAA,KAAcG,WAAW/B,EAAc,kBAZlF,wBAcgDgC,EACA,CACI,WAAehC,EAAc,WAC7B,aAAgBA,EAAc,aAC9B,cACI,CACI,0BAA6BA,EAAc,0BAC3C,WAAcA,EAAc,WAC5B,oBAAuBA,EAAc,oBACrC,kBAAqBA,EAAc,kBACnC,iBAAoBA,EAAc,iBAClC,iBAAoBA,EAAc,iBAClC,YACI,CACI,cAAkBA,EAAc,iBA5BpG,WAkCgEgB,EAAAA,EAAAA,KAAYiB,aAAaD,GAlCzF,eAkCgDE,EAlChD,QAmCmD,WAAgB,EACvB3B,EAAuB2B,GApCnE,wDA0CYN,EAAAA,EAAAA,KAAcC,+BAA+B7B,EAAc,YA1CvE,sBA2CgB4B,EAAAA,EAAAA,KAAcC,+BAA+B7B,EAAc,8BA3C3E,sBA4CoB4B,EAAAA,EAAAA,KAAcO,+BAA+BnC,EAAc,cA5C/E,qBA6CuBA,EAAeoC,MA7CtC,wBA8C4BJ,EACJ,CACI,WAAehC,EAAc,WAC7B,aAAgBA,EAAc,aAC9B,6BAAgCA,EAAc,8BAlD1E,WAqD4CgB,EAAAA,EAAAA,KAAYiB,aAAaD,GArDrE,eAqD4BE,EArD5B,QAsD+B,WAAgB,EACvB3B,EAAuB2B,GAvD/C,kCA2DwB3B,EACI,CACIjC,YAAa,QACbC,QAAS,8GAETF,WAAW,IAhE3C,2BAyEIkC,EACI,CACIjC,YAAa,QACbC,QAAS,wFACTF,WAAW,IAGnBgC,GAAoB,GAhFxB,6CA1J4B,sBA8O5B,SAASgC,EAA4B1D,EAAGC,GACpC,IAAI0D,EAAcC,KAAKC,MAAMD,KAAKE,UAAUzC,IAC5CsC,EAAY1D,EAAK8D,MAAQ9D,EAAK+D,MAC9B1C,EAAkBqC,GAGtB,OA/JAxD,EAAAA,EAAAA,YAAU,YArFkB,mCAsFxB8D,KACF,KA8JE,4BACI,SAACC,EAAA,EAAD,CAAM9D,UAAQ,EAAd,UACA,SAAC8D,EAAA,MAAD,WACI,SAACA,EAAA,SAAD,CAAaC,MAAO,GAApB,UACA,SAACC,EAAA,EAAD,CAASC,SAAO,EAACC,YAAU,EAA3B,UACI,SAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,UAAU,SAA1B,mCAKK,OAAZtD,GAAqC,OAAjBF,GACrB,4BACI,SAACyD,EAAA,EAAD,CAAQC,QAAM,EAACC,OAAO,WAAtB,mCACA,sBAGJ,UAACC,EAAA,EAAD,YACI,SAACC,EAAA,EAAD,WACI,UAACC,EAAA,EAAD,CAAMC,OAAO,QAAb,WACI,UAACD,EAAA,QAAD,YACI,SAACA,EAAA,QAAD,CAAYE,UAAQ,EAChBlB,KAAK,aACLmB,MAAM,cACNC,SAAUzB,EACV0B,MACI3D,KAAqBwB,EAAAA,EAAAA,KAAcC,+BAA+B7B,EAAegE,YACjF,CAAEC,QAAS,qCAAsCC,SAAU,SAE3D,QAGR,SAACR,EAAA,SAAD,CAAavE,MAAM,OAAOgF,UAAQ,EAACC,KAAK,SAASC,QAAQ,QAAQjF,QApR7D,4CAoRJ,+BAIJ,SAACsE,EAAA,WAAD,CAAetE,QAjLnC,WACI,IAAIkF,EAAqB/B,KAAKC,MAAMD,KAAKE,UAAUzC,IAE/CE,GAQAoE,EAAmB/C,aAAe,GAClC+C,EAAmBC,0BAA6B,GAChDD,EAAmBE,WAAa,KAChCF,EAAmBG,oBAAsB,GACzCH,EAAmBI,kBAAqB,GACxCJ,EAAmBK,iBAAmB,KACtCL,EAAmBM,iBAAmB,KACtC3E,EAAkBqE,KAdlBA,EAAmBO,6BAA+B,GAClDP,EAAkB,aAAmB,GACrCA,EAAmBlC,OAAQ,EAC3BnC,EAAkBqE,IAatBnE,GAAkBD,IA6JkD4E,QAAM,EAACjB,MAAM,oBAC/D3D,GACF,4BACI,UAACwD,EAAA,QAAD,YACI,SAACA,EAAA,WAAD,CACIqB,cAAc,EACdC,oBAAoB,EACpBpB,UAAQ,EACRqB,WAAS,EACTC,QAAM,EACNC,WAAS,EACTC,QAASxF,EACTyF,YAAY,mCACZxB,MAAM,wBACNC,SAAUzB,EACVK,KAAK,gBACLqB,MACI3D,KAAqBwB,EAAAA,EAAAA,KAAcC,+BAA+B7B,EAAesF,eACjF,CAAErB,QAAS,8BAA+BC,SAAU,SAEpD,QAGR,SAACR,EAAA,WAAD,CACIqB,cAAc,EACdC,oBAAoB,EACpBpB,UAAQ,EACRqB,WAAS,EACTE,WAAS,EACTC,QA9SD,CAC3B,CACIG,IAAK,EAAG5C,MAAO,EAAG6C,KAAM,WAE5B,CACID,IAAK,EAAG5C,MAAO,EAAG6C,KAAM,WAE5B,CACID,IAAK,EAAG5C,MAAO,EAAG6C,KAAM,WAE5B,CACID,IAAK,EAAG5C,MAAO,EAAG6C,KAAM,QAoSA3B,MAAM,8BACNC,SAAUzB,EACVK,KAAK,4BACLqB,MACI3D,KAAqBwB,EAAAA,EAAAA,KAAcC,+BAA+B7B,EAAeuE,2BACjF,CAAEN,QAAS,wCAAyCC,SAAU,SAE9D,QAGR,SAACR,EAAA,WAAD,CACIqB,cAAc,EACdC,oBAAoB,EACpBpB,UAAQ,EACRqB,WAAS,EACTE,WAAS,EACTC,QAhTO,CACnC,CACIG,IAAK,EAAG5C,MAAO,UAAW6C,KAAM,YA+SR3B,MAAM,uBACNC,SAAUzB,EACVK,KAAK,sBACLqB,MACI3D,KAAqBwB,EAAAA,EAAAA,KAAcC,+BAA+B7B,EAAeyE,qBACjF,CAAER,QAAS,uCAAwCC,SAAU,SAE7D,QAGR,SAACR,EAAA,WAAD,CACIqB,cAAc,EACdC,oBAAoB,EACpBpB,UAAQ,EACRqB,WAAS,EACTE,WAAS,EACTC,QA3TK,CACjC,CACIG,IAAK,EAAG5C,MAAO,EAAG6C,KAAM,WAE5B,CACID,IAAK,EAAG5C,MAAO,EAAG6C,KAAM,SAuTA3B,MAAM,qBACNC,SAAUzB,EACVK,KAAK,oBACLqB,MACI3D,KAAqBwB,EAAAA,EAAAA,KAAcC,+BAA+B7B,EAAe0E,mBACjF,CAAET,QAAS,qCAAsCC,SAAU,SAE3D,WAIZ,UAACR,EAAA,QAAD,YACI,SAACA,EAAA,QAAD,CAAYE,UAAQ,EAChBlB,KAAK,aACLmB,MAAM,oBACNC,SAAUzB,EACV0B,MACI3D,KAAqBwB,EAAAA,EAAAA,KAAc6D,wBAAwBzF,EAAewE,YAC1E,CAAEP,QAAS,qCAAsCC,SAAU,SAE3D,QAGR,SAACR,EAAA,QAAD,CAAaE,UAAQ,EACjBlB,KAAK,mBACLmB,MAAM,oBACNC,SAAUzB,EACV0B,MACI3D,KAAqBwB,EAAAA,EAAAA,KAAcG,WAAW/B,EAAe2E,kBAC7D,CAAEV,QAAS,wCAAyCC,SAAU,SAE9D,QAGR,SAACR,EAAA,QAAD,CAAYE,UAAQ,EAChBlB,KAAK,mBACLmB,MAAM,oBACNC,SAAUzB,EACV0B,MACI3D,KAAqBwB,EAAAA,EAAAA,KAAcG,WAAW/B,EAAe4E,kBAC7D,CAAEX,QAAS,wCAAyCC,SAAU,SAE9D,cAOhB,4BACI,SAACnB,EAAA,EAAD,CAASC,SAAO,EAACC,YAAU,EAA3B,UACI,SAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,UAAU,SAA1B,iEAEJ,UAACM,EAAA,QAAD,YACI,SAACA,EAAA,WAAD,CACII,SA/YJ,8CAgZIiB,cAAc,EACdC,oBAAoB,EACpBpB,UAAQ,EACRqB,WAAS,EACTC,QAAM,EACNC,WAAS,EACTO,UAAQ,EACRN,QAAStF,EACTuF,YAAY,8BACZxB,MAAM,0BACNnB,KAAK,eACLqB,MACI3D,KAAqBwB,EAAAA,EAAAA,KAAcO,+BAA+BnC,EAAeuB,cACjF,CAAE0C,QAAS,4CAA6CC,SAAU,SAElE,QAGR,SAACR,EAAA,WAAD,CACIqB,cAAc,EACdC,oBAAoB,EACpBpB,UAAQ,EACRqB,WAAS,EACTE,WAAS,EACTC,QAnYC,CAC7B,CACIG,IAAK,EAAG5C,MAAO,EAAG6C,KAAM,cAE5B,CACID,IAAK,EAAG5C,MAAO,EAAG6C,KAAM,gBAE5B,CACID,IAAK,EAAG5C,MAAO,EAAG6C,KAAM,mBA4XA3B,MAAM,iCACNC,SAAUzB,EACVK,KAAK,+BACLqB,MACI3D,KAAqBwB,EAAAA,EAAAA,KAAcC,+BAA+B7B,EAAe6E,8BACjF,CAAEZ,QAAS,kDAAmDC,SAAU,SAExE,UAIuB,KAAjClE,EAAc,YAAgE,IAAvCA,EAAeuB,aAAaoE,QACrE,UAACC,EAAA,EAAD,CAAOC,QAAM,EAAC1C,GAAG,IAAIhE,MAAM,OAA3B,WACI,SAAC+D,EAAA,EAAD,CAAQC,GAAG,KAAX,wBADJ,wHAKEnD,EAAeoC,OACjB,SAAC0D,EAAA,EAAD,CAAYhD,MAAO,OAAQiD,OAAQ,OAAQC,KAAMhG,KAEjD,UAACiG,EAAA,EAAD,CAASC,UAAQ,EAAjB,WACI,SAACD,EAAA,SAAD,0CACA,wIAQhB,SAACE,EAAA,EAAD,CACI/H,YAAY,cACZS,UAAWyB","sources":["components/CustomModal.js","utils/treeRendering/TreeRenderFunctionsUtils.js","pages/Metrics/CreateMetricPage.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {Button, Modal, Message} from 'semantic-ui-react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction CustomModal(props){\r\n\r\n    let navigate = useNavigate();\r\n\r\n    const [modalState, setModalState] = useState(\r\n        {\r\n            successPath: props.successPath,\r\n            openModal: false,\r\n            messageType: null,\r\n            message: null\r\n        }\r\n    )  \r\n\r\n    function modalCloseHandler(ev,atts){\r\n        if(modalState.messageType === \"success\"){\r\n            navigate(modalState.successPath)\r\n        }\r\n        props.modalInfo.openModal = false\r\n        setModalState(\r\n            {\r\n                ...modalState,\r\n                openModal: false\r\n            }\r\n        )\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setModalState({\r\n            ...modalState,\r\n            openModal: props.modalInfo.openModal,\r\n            messageType: props.modalInfo.messageType,\r\n            message: props.modalInfo.message\r\n        })\r\n    },[props])\r\n\r\n    return(\r\n        <Modal centered={false} closeIcon open={modalState[\"openModal\"]} onClose={modalCloseHandler}>\r\n            <Modal.Header>Message</Modal.Header>\r\n            <Modal.Content>\r\n                <Message \r\n                color= {\r\n                        modalState[\"messageType\"] === \"success\" ? \r\n                        \"green\"\r\n                        :modalState[\"messageType\"] === \"warning\" ?\r\n                        \"orange\"\r\n                        : \"red\" \r\n                    }\r\n                >\r\n                    <Message.Header>{modalState[\"message\"]}</Message.Header>\r\n                </Message>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button color='grey' onClick={modalCloseHandler}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default CustomModal;","\r\nfunction TreeRenderFunctionsUtils() {\r\n\r\n    function validChildMetrics(listOfChildMetrics){\r\n        let metricIds = []\r\n        for(let childMetric of listOfChildMetrics){ \r\n            if(validCompositionOfMetrics(childMetric,metricIds )=== false){\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    function validCompositionOfMetrics(currentMetric,metricIds){\r\n        if(metricIds.includes(currentMetric[\"metricId\"])){\r\n            return false\r\n        }\r\n        else{\r\n            metricIds.push(currentMetric[\"metricId\"])\r\n            for(let childMetric of currentMetric[\"childMetrics\"]){\r\n                if(validCompositionOfMetrics(childMetric,metricIds) === false){\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    return {\r\n        validChildMetrics,\r\n    };\r\n}\r\n      \r\nexport default TreeRenderFunctionsUtils\r\n","import { Loader, Divider, Label, Header, Grid, Form, Container, Segment, Message} from 'semantic-ui-react'\r\nimport ApiModule from \"../../utils/api/ApiModule\"\r\nimport React, {useState, useEffect} from \"react\"\r\nimport TreeRender from '../../utils/treeRendering/TreeRender';\r\nimport TreeRenderFunctionsUtils from '../../utils/treeRendering/TreeRenderFunctionsUtils';\r\nimport DropDownDataFormat from '../../utils/dropDownDataFormat/DropDownDataFormat';\r\nimport ValidInputs from '../../utils/ValidInputs'\r\nimport CustomModal from '../../components/CustomModal';\r\n\r\nfunction CreateMetricPage(props){\r\n    //============================================= VARIABLES DECLARATIONS ============================================//\r\n\r\n    //variables used to control the pre-load of the descriptions and metrics\r\n    const [descriptions, setDescriptions] = useState(null);\r\n    const [metrics, setMetrics] = useState(null);\r\n\r\n    const leafAggregationOptions = [\r\n        {\r\n            key: 0, value: 0, text: \"Average\"\r\n        },\r\n        {\r\n            key: 1, value: 1, text: \"Minimum\"\r\n        },\r\n        {\r\n            key: 2, value: 2, text: \"Maximum\"\r\n        },\r\n        {\r\n            key: 3, value: 3, text: \"Sum\"\r\n        }\r\n    ]\r\n\r\n    const leafNormalizationMethodOptions = [\r\n        {\r\n            key: 0, value: \"MIN-MAX\", text: \"MIN-MAX\"\r\n        },\r\n    ]\r\n\r\n    const leafNormalizationKindOptions = [\r\n        {\r\n            key: 0, value: 0, text: \"BENEFIT\"\r\n        },\r\n        {\r\n            key: 1, value: 1, text: \"COST\"\r\n        },\r\n    ]\r\n\r\n    const metricAggregationOptions = [\r\n        {\r\n            key: 0, value: 0, text: \"Neutrality\"\r\n        },\r\n        {\r\n            key: 1, value: 1, text: \"Simultaneity\"\r\n        },\r\n        {\r\n            key: 2, value: 2, text: \"Replaceability\"\r\n        },\r\n    ]\r\n\r\n    //variables used to save and get form data. \"metricToCreate\" also used for rendering preview metric tree\r\n    const [metricToCreate, setMetricToCreate] = useState(\r\n        {\r\n            //variable for adjusting preview metric tree with currently selected childs\r\n            \"valid\": false,\r\n            //only required for the metrics tree rendering\r\n            \"metricId\": -1,\r\n            \"metricName\": \"\",\r\n            \"childMetrics\": [],\r\n            \"attributeAggregationOperator\": \"\",\r\n            \"metricAggregationOperator\": \"\",\r\n            \"numSamples\": null,\r\n            \"normalizationMethod\": \"\",\r\n            \"normalizationKind\": \"\",\r\n            \"minimumThreshold\": null,\r\n            \"maximumThreshold\": null,\r\n            \"descriptionId\" : \"\"\r\n        }\r\n    );\r\n\r\n    //Variable use to toggle different views on the form fields depending of the choice of creatint or not a Leaf Metric\r\n    const[leafAttribute, setLeafAttribute] = useState(false);\r\n\r\n    const [formErrorDisplay, setFormErrorDisplay] = useState(false);\r\n\r\n    const [postResponseMessage, setPostResponseMessage] = useState({\"openModal\": false})\r\n\r\n    //=========================================== PRE-LOAD OF DESCRIPTIONS AND METRICS ========================================//\r\n    \r\n    async function preLoadData(){\r\n        let unprocessedDescriptions = await makeAPIRequestDescriptions(null);\r\n        let unprocessedMetrics = await makeAPIRequestMetrics(null);\r\n        DropDownDataFormat().convertMetrics(unprocessedMetrics, setMetrics)\r\n        DropDownDataFormat().convertDescriptions(unprocessedDescriptions, setDescriptions)\r\n    }\r\n    //Execute API REQUESTS to pre-load necessary data upon component rendering\r\n    useEffect(() => {\r\n        preLoadData()\r\n    },[]);\r\n\r\n    //functions for performing api requests to retrieve data necessary before being able to interact with the page\r\n    //[TODO ?] - Leverage these functions for making some kind of pagination by not retrieving all the contents from\r\n    //         the database for each entity.\r\n    function makeAPIRequestDescriptions(queryParams){\r\n        return ApiModule().getDescriptions(queryParams);\r\n    }\r\n\r\n    function makeAPIRequestMetrics(queryParams){\r\n        return ApiModule().getMetrics(queryParams);\r\n    }\r\n    \r\n    //============================================= HANDLERS ============================================//\r\n\r\n    //toggle different form fields depending of being or not a leaf metric \r\n    function leafAttributeToggleHandler(){\r\n        let metricToCreateTemp = JSON.parse(JSON.stringify(metricToCreate))\r\n        //transiting to leaf attribute form from metric childs association form\r\n        if(!leafAttribute){\r\n            metricToCreateTemp.attributeAggregationOperator = \"\"\r\n            metricToCreateTemp[\"childMetrics\"] = []\r\n            metricToCreateTemp.valid = true\r\n            setMetricToCreate(metricToCreateTemp)\r\n        }\r\n        //going from leaf attribue form to metric child association form\r\n        else{\r\n            metricToCreateTemp.childMetrics = []\r\n            metricToCreateTemp.metricAggregationOperator =  \"\"\r\n            metricToCreateTemp.numSamples = null\r\n            metricToCreateTemp.normalizationMethod = \"\"\r\n            metricToCreateTemp.normalizationKind =  \"\"\r\n            metricToCreateTemp.minimumThreshold = null\r\n            metricToCreateTemp.maximumThreshold = null\r\n            setMetricToCreate(metricToCreateTemp)\r\n        }\r\n        setLeafAttribute(!leafAttribute);\r\n    }\r\n\r\n    //whenever the list of child metrics is changed, it becomes necessary to check validity because a descendant metric \r\n    //might become repeated\r\n    async function childMetricsChangeHandler(ev, atts){\r\n        //get current selected metrics, represented by their ids\r\n        let childMetricsIds = atts[\"value\"]\r\n\r\n        //auxiliar variable and function to help retrieving each selected metric's childs \r\n        let aux\r\n        const setAux = (tempMetric) => {aux = tempMetric}\r\n\r\n        //hold currently selected child metrics data to later replace the old array  \r\n        let childMetrics = []\r\n        for(let metricId of childMetricsIds){\r\n            //wait for response\r\n            await ApiModule().getMetricById(metricId, setAux)\r\n            childMetrics.push(aux)   \r\n        }\r\n\r\n        //check if there are repeated descendant nodes with currently selected childs\r\n        if(TreeRenderFunctionsUtils().validChildMetrics(childMetrics)){\r\n            setMetricToCreate({...metricToCreate, \"childMetrics\": childMetrics,\"valid\": true})\r\n        }\r\n        else{\r\n            setMetricToCreate({...metricToCreate, \"childMetrics\": childMetrics,\"valid\": false})\r\n        }\r\n    }\r\n    \r\n    //Form submit verifications\r\n    async function submitHandler(ev){\r\n        ev.preventDefault()\r\n\r\n        //valid current formData depending on being a leaf attribute or not\r\n        if(leafAttribute){\r\n            if (ValidInputs().validStringOrDropDownSelection(metricToCreate[\"metricName\"])){\r\n                    if(ValidInputs().validStringOrDropDownSelection(metricToCreate[\"descriptionId\"]))\r\n                        if(ValidInputs().validStringOrDropDownSelection(metricToCreate[\"metricAggregationOperator\"]))\r\n                            if(ValidInputs().validIntGreaterOrEqualThanZero(metricToCreate[\"numSamples\"]))\r\n                                if(ValidInputs().validStringOrDropDownSelection(metricToCreate[\"normalizationMethod\"]))\r\n                                    if(ValidInputs().validStringOrDropDownSelection(metricToCreate[\"normalizationKind\"]))\r\n                                        if(ValidInputs().validFloat(metricToCreate[\"minimumThreshold\"]))\r\n                                            if(ValidInputs().validFloat(metricToCreate[\"maximumThreshold\"])){\r\n                                                //process data into a format acceptable by the API\r\n                                                let postData =\r\n                                                    {\r\n                                                        \"metricName\" : metricToCreate[\"metricName\"],\r\n                                                        \"childMetrics\": metricToCreate[\"childMetrics\"],\r\n                                                        \"leafAttribute\": \r\n                                                            {\r\n                                                                \"metricAggregationOperator\": metricToCreate[\"metricAggregationOperator\"],\r\n                                                                \"numSamples\": metricToCreate[\"numSamples\"],\r\n                                                                \"normalizationMethod\": metricToCreate[\"normalizationMethod\"],\r\n                                                                \"normalizationKind\": metricToCreate[\"normalizationKind\"],\r\n                                                                \"minimumThreshold\": metricToCreate[\"minimumThreshold\"],\r\n                                                                \"maximumThreshold\": metricToCreate[\"maximumThreshold\"],\r\n                                                                \"description\": \r\n                                                                    {\r\n                                                                        \"descriptionId\" : metricToCreate[\"descriptionId\"]\r\n                                                                    }\r\n                                                            }\r\n                                                    }\r\n                                                \r\n                                                //contains message and messageType\r\n                                                let resData = await ApiModule().createMetric(postData)\r\n                                                resData[\"openModal\"] = true\r\n                                                setPostResponseMessage(resData)\r\n                                                return\r\n                                            }\r\n            }\r\n        }\r\n        else{\r\n            if (ValidInputs().validStringOrDropDownSelection(metricToCreate[\"metricName\"])){\r\n                if (ValidInputs().validStringOrDropDownSelection(metricToCreate[\"attributeAggregationOperator\"]))\r\n                    if (ValidInputs().validDropDownMultipleSelection(metricToCreate[\"childMetrics\"]))\r\n                        if(metricToCreate.valid){\r\n                            let postData =\r\n                            {\r\n                                \"metricName\" : metricToCreate[\"metricName\"],\r\n                                \"childMetrics\": metricToCreate[\"childMetrics\"],\r\n                                \"attributeAggregationOperator\": metricToCreate[\"attributeAggregationOperator\"]\r\n                            }\r\n                            //contains message and messageType\r\n                            let resData = await ApiModule().createMetric(postData)\r\n                            resData[\"openModal\"] = true\r\n                            setPostResponseMessage(resData)\r\n                            return\r\n                        }\r\n                        else{\r\n                            setPostResponseMessage(\r\n                                {\r\n                                    messageType: \"error\",\r\n                                    message: \"Currently selected child metrics are not valid because, at least, \" +\r\n                                    \"one of the descendant nodes gets repeated\",\r\n                                    openModal: true\r\n                                }\r\n                            )\r\n                            return\r\n                        }\r\n            }\r\n        }\r\n        \r\n        //When form fields aren't valid \r\n        setPostResponseMessage(\r\n            {\r\n                messageType: \"error\",\r\n                message: \"Please fill in all the required fields (marked with  * ) and respect the fields notes\",\r\n                openModal: true\r\n            }\r\n        )\r\n        setFormErrorDisplay(true)\r\n        \r\n    }\r\n\r\n    function formFieldInputChangeHandler(ev,atts){\r\n        let newFormData = JSON.parse(JSON.stringify(metricToCreate))\r\n        newFormData[atts.name] = atts.value\r\n        setMetricToCreate(newFormData)\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n            <Grid centered>\r\n            <Grid.Row >\r\n                <Grid.Column width={15}>\r\n                <Divider section horizontal>\r\n                    <Header as=\"h1\" textAlign=\"center\">Create Metric</Header> \r\n                </Divider>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            </Grid>\r\n            {metrics === null || descriptions === null ?\r\n            <div>\r\n                <Loader active inline='centered'> Retrieving content </Loader>\r\n                <br/>\r\n            </div>\r\n            :\r\n            <Container >\r\n                <Segment>\r\n                    <Form widths=\"equal\">  \r\n                        <Form.Group >\r\n                            <Form.Input required\r\n                                name=\"metricName\"  \r\n                                label='Metric name'\r\n                                onChange={formFieldInputChangeHandler}\r\n                                error={\r\n                                    formErrorDisplay && !ValidInputs().validStringOrDropDownSelection(metricToCreate.metricName) ?\r\n                                    { content: 'Please enter a name for the Metric', pointing: 'above' }\r\n                                    :\r\n                                    null\r\n                                }\r\n                            />\r\n                            <Form.Button color=\"grey\" circular type='submit' floated=\"right\" onClick={submitHandler}> \r\n                                Create Metric\r\n                            </Form.Button>\r\n                        </Form.Group>\r\n                        <Form.Checkbox onClick={leafAttributeToggleHandler} toggle label=\"Leaf Attribute?\"/>\r\n                        { leafAttribute ? \r\n                        <div>\r\n                            <Form.Group>\r\n                                <Form.Dropdown\r\n                                    selectOnBlur={false}\r\n                                    selectOnNavigation={false}\r\n                                    required\r\n                                    clearable\r\n                                    search\r\n                                    selection\r\n                                    options={descriptions}\r\n                                    placeholder='Filter descriptions by something'\r\n                                    label='Associate Description'\r\n                                    onChange={formFieldInputChangeHandler}\r\n                                    name=\"descriptionId\"\r\n                                    error={\r\n                                        formErrorDisplay && !ValidInputs().validStringOrDropDownSelection(metricToCreate.descriptionId) ?\r\n                                        { content: 'Please choose a description', pointing: 'above' }\r\n                                        :\r\n                                        null\r\n                                    }\r\n                                />\r\n                                <Form.Dropdown\r\n                                    selectOnBlur={false}\r\n                                    selectOnNavigation={false}\r\n                                    required\r\n                                    clearable\r\n                                    selection\r\n                                    options={leafAggregationOptions}\r\n                                    label='Metric Aggregation Operator'\r\n                                    onChange={formFieldInputChangeHandler}\r\n                                    name=\"metricAggregationOperator\"\r\n                                    error={\r\n                                        formErrorDisplay && !ValidInputs().validStringOrDropDownSelection(metricToCreate.metricAggregationOperator) ?\r\n                                        { content: 'Please select an aggregation operator', pointing: 'above' }\r\n                                        :\r\n                                        null\r\n                                    }\r\n                                />\r\n                                <Form.Dropdown\r\n                                    selectOnBlur={false}\r\n                                    selectOnNavigation={false}\r\n                                    required\r\n                                    clearable\r\n                                    selection\r\n                                    options={leafNormalizationMethodOptions}\r\n                                    label='Normalization Method'\r\n                                    onChange={formFieldInputChangeHandler}\r\n                                    name=\"normalizationMethod\"\r\n                                    error={\r\n                                        formErrorDisplay && !ValidInputs().validStringOrDropDownSelection(metricToCreate.normalizationMethod) ?\r\n                                        { content: 'Please select a normalization method', pointing: 'above' }\r\n                                        :\r\n                                        null\r\n                                    }\r\n                                />\r\n                                <Form.Dropdown\r\n                                    selectOnBlur={false}\r\n                                    selectOnNavigation={false}\r\n                                    required\r\n                                    clearable\r\n                                    selection\r\n                                    options={leafNormalizationKindOptions}\r\n                                    label='Normalization Kind'\r\n                                    onChange={formFieldInputChangeHandler}\r\n                                    name=\"normalizationKind\"\r\n                                    error={\r\n                                        formErrorDisplay && !ValidInputs().validStringOrDropDownSelection(metricToCreate.normalizationKind) ?\r\n                                        { content: 'Please select a normalization kind', pointing: 'above' }\r\n                                        :\r\n                                        null\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Form.Input required \r\n                                    name=\"numSamples\"\r\n                                    label='Number of Samples'\r\n                                    onChange={formFieldInputChangeHandler}\r\n                                    error={\r\n                                        formErrorDisplay && !ValidInputs().validIntGreaterThanZero(metricToCreate.numSamples) ?\r\n                                        { content: 'Please enter an integer number > 0', pointing: 'above' }\r\n                                        :\r\n                                        null\r\n                                    }\r\n                                />\r\n                                <Form.Input  required\r\n                                    name=\"minimumThreshold\"\r\n                                    label='Minimum Threshold'\r\n                                    onChange={formFieldInputChangeHandler}\r\n                                    error={\r\n                                        formErrorDisplay && !ValidInputs().validFloat(metricToCreate.minimumThreshold) ?\r\n                                        { content: 'Please enter a float number like 2.33', pointing: 'above' }\r\n                                        :\r\n                                        null\r\n                                    }\r\n                                />\r\n                                <Form.Input required \r\n                                    name=\"maximumThreshold\"\r\n                                    label='Maximum Threshold' \r\n                                    onChange={formFieldInputChangeHandler}\r\n                                    error={\r\n                                        formErrorDisplay && !ValidInputs().validFloat(metricToCreate.maximumThreshold) ?\r\n                                        { content: 'Please enter a float number like 2.33', pointing: 'above' }\r\n                                        :\r\n                                        null\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                            \r\n                        </div>\r\n                        : \r\n                        <div>\r\n                            <Divider section horizontal>\r\n                                <Header as=\"h3\" textAlign=\"center\"> Associate child metrics and preview metric tree</Header> \r\n                            </Divider>\r\n                            <Form.Group>\r\n                                <Form.Dropdown\r\n                                    onChange={childMetricsChangeHandler}\r\n                                    selectOnBlur={false}\r\n                                    selectOnNavigation={false}\r\n                                    required\r\n                                    clearable\r\n                                    search\r\n                                    selection\r\n                                    multiple\r\n                                    options={metrics}\r\n                                    placeholder='Filter metrics by something'\r\n                                    label='Associate child metrics'\r\n                                    name=\"childMetrics\"\r\n                                    error={\r\n                                        formErrorDisplay && !ValidInputs().validDropDownMultipleSelection(metricToCreate.childMetrics) ?\r\n                                        { content: 'Please choose, at least, one child metric', pointing: 'above' }\r\n                                        :\r\n                                        null\r\n                                    }\r\n                                />\r\n                                <Form.Dropdown\r\n                                    selectOnBlur={false}\r\n                                    selectOnNavigation={false}\r\n                                    required\r\n                                    clearable\r\n                                    selection\r\n                                    options={metricAggregationOptions}\r\n                                    label='Attribute Aggregation Operator'\r\n                                    onChange={formFieldInputChangeHandler}\r\n                                    name=\"attributeAggregationOperator\"\r\n                                    error={\r\n                                        formErrorDisplay && !ValidInputs().validStringOrDropDownSelection(metricToCreate.attributeAggregationOperator) ?\r\n                                        { content: 'Please select an attribute aggregation operator', pointing: 'above' }\r\n                                        :\r\n                                        null\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                            { metricToCreate[\"metricName\"] === \"\" || metricToCreate.childMetrics.length === 0 ?\r\n                            <Label ribbon as='b' color='grey'>\r\n                                <Header as=\"h3\"> Warning! </Header> \r\n                                Metric tree will only be displayed once a name is given for the metric and, at least, one \r\n                                child metric is selected\r\n                            </Label>\r\n                            : metricToCreate.valid ?\r\n                            <TreeRender width={\"100%\"} height={\"50vh\"} data={metricToCreate}></TreeRender>\r\n                            :\r\n                            <Message negative>\r\n                                <Message.Header>Can't generate metric tree</Message.Header>\r\n                                <p>At least one of the descendant metrics is repeated with the \r\n                                    current list of chosen child metrics</p>\r\n                            </Message>\r\n                            } \r\n                        </div>\r\n                        }\r\n                    </Form>\r\n                </Segment>\r\n                <CustomModal \r\n                    successPath=\"/getMetrics\" \r\n                    modalInfo={postResponseMessage} \r\n                />\r\n            </Container>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateMetricPage;"],"names":["props","navigate","useNavigate","useState","successPath","openModal","messageType","message","modalState","setModalState","modalCloseHandler","ev","atts","modalInfo","useEffect","centered","closeIcon","open","onClose","color","onClick","validCompositionOfMetrics","currentMetric","metricIds","includes","push","validChildMetrics","listOfChildMetrics","descriptions","setDescriptions","metrics","setMetrics","metricToCreate","setMetricToCreate","leafAttribute","setLeafAttribute","formErrorDisplay","setFormErrorDisplay","postResponseMessage","setPostResponseMessage","makeAPIRequestDescriptions","unprocessedDescriptions","makeAPIRequestMetrics","unprocessedMetrics","DropDownDataFormat","convertMetrics","convertDescriptions","queryParams","ApiModule","getDescriptions","getMetrics","childMetricsIds","setAux","tempMetric","aux","childMetrics","metricId","getMetricById","TreeRenderFunctionsUtils","preventDefault","ValidInputs","validStringOrDropDownSelection","validIntGreaterOrEqualThanZero","validFloat","postData","createMetric","resData","validDropDownMultipleSelection","valid","formFieldInputChangeHandler","newFormData","JSON","parse","stringify","name","value","preLoadData","Grid","width","Divider","section","horizontal","Header","as","textAlign","Loader","active","inline","Container","Segment","Form","widths","required","label","onChange","error","metricName","content","pointing","circular","type","floated","metricToCreateTemp","metricAggregationOperator","numSamples","normalizationMethod","normalizationKind","minimumThreshold","maximumThreshold","attributeAggregationOperator","toggle","selectOnBlur","selectOnNavigation","clearable","search","selection","options","placeholder","descriptionId","key","text","validIntGreaterThanZero","multiple","length","Label","ribbon","TreeRender","height","data","Message","negative","CustomModal"],"sourceRoot":""}