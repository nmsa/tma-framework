{"version":3,"file":"static/js/996.1878fb7f.chunk.js","mappings":"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","sources":["pages/Metrics/ViewMetricPage.js","utils/api/ApiModule.js","configurations/Configurations.js","utils/treeRendering/TreeLabel.js","utils/treeRendering/TreeRender.js"],"sourcesContent":["import { Loader, Divider, Container, Header, Grid, Segment, Form, Icon} from 'semantic-ui-react'\r\nimport ApiModule from \"../../utils/api/ApiModule\"\r\nimport {useState, useEffect} from \"react\"\r\nimport {useParams} from \"react-router-dom\"\r\nimport TreeRender from '../../utils/treeRendering/TreeRender';\r\n\r\nfunction ViewMetricPage(){\r\n    \r\n    const [apiData, setAPIData] = useState(null);\r\n    const metricId = useParams()[\"id\"];\r\n\r\n    const leafAggregationOptions = {\r\n        0: \"Average\",\r\n        1: \"Minimum\",\r\n        2: \"Maximum\",\r\n        3: \"Sum\"\r\n    }\r\n\r\n    const leafNormalizationKindOptions = {\r\n        0: \"BENEFIT\",\r\n        1: \"COST\",\r\n        2: \"Maximum\",\r\n        3: \"Sum\"\r\n    }\r\n\r\n    const metricAggregationOptions = {\r\n        0: \"Neutrality\",\r\n        1: \"Simultaneity\",\r\n        2: \"Replaceability\",\r\n    }\r\n\r\n    function makeAPIRequest(){\r\n        ApiModule().getMetricById(metricId, setAPIData)\r\n    }\r\n    \r\n    //Execute upon component rendering\r\n    useEffect(() => {\r\n        //perform API request\r\n        makeAPIRequest()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[]);\r\n    \r\n    useEffect(()=>{\r\n        console.log(apiData)\r\n    },[apiData])\r\n\r\n    return(\r\n        <div>\r\n            <Grid centered>\r\n            <Grid.Row >\r\n                <Grid.Column width={15}>\r\n                <Divider section horizontal>\r\n                    <Header as=\"h1\" textAlign=\"center\"> Metric Details</Header> \r\n                </Divider>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            </Grid>\r\n            <br/>\r\n            {\r\n            //if apiData is null, then it is because the response from the API hasn't arrived\r\n            apiData === null ? <Loader active inline='centered'> Retrieving content</Loader> :\r\n            <Container>\r\n                <Grid stackable columns={2}>\r\n                    <Grid.Column>\r\n                        <Segment>\r\n                            <Header as=\"h3\" textAlign=\"center\"> Metric Information</Header>\r\n                            <Divider/>\r\n                            <Form widths=\"equal\">\r\n                                <Form.Group >\r\n                                    <Form.Field>\r\n                                        <label>Id:</label>\r\n                                        {apiData[\"metricId\"]}\r\n                                    </Form.Field>\r\n                                    <Form.Field>\r\n                                        <label>Name:</label>\r\n                                        {apiData[\"metricName\"]}\r\n                                    </Form.Field>\r\n                                    {/* uncomment to show Metric's \"Block level\" attribute\r\n                                    <Form.Field>\r\n                                        <label>Block Level:</label>\r\n                                        {apiData[\"blockLevel\"]}\r\n                                    </Form.Field>\r\n                                    */}\r\n                                    <Form.Field>\r\n                                        <label>Leaf Attribute:</label>\r\n                                        {\r\n                                            apiData[\"leafAttribute\"] === null ?\r\n                                            <Icon \r\n                                                color='red' \r\n                                                size='big' \r\n                                                name='remove' \r\n                                            />\r\n                                            :   \r\n                                            <Icon\r\n                                                color='green' \r\n                                                size='big'\r\n                                                name='checkmark' \r\n                                            />\r\n                                        }\r\n                                    </Form.Field>\r\n                                    {apiData[\"leafAttribute\"] === null ? \r\n                                    <Form.Field>\r\n                                        <label>Attribute Aggregation Operator:</label>\r\n                                        { metricAggregationOptions[apiData[\"attributeAggregationOperator\"]]}\r\n                                    </Form.Field>\r\n                                    :\r\n                                    null\r\n                                    }\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </Segment>\r\n                    </Grid.Column>\r\n                    {apiData[\"leafAttribute\"] === null ?\r\n                    <Grid.Column>\r\n                        <Segment>\r\n                            <Header as=\"h3\" textAlign=\"center\"> Metrics tree</Header>\r\n                            <Divider/>\r\n                            <TreeRender width={\"100%\"} height={\"50vh\"} data={apiData}/>\r\n                        </Segment>\r\n                    </Grid.Column>\r\n                    :   \r\n                    <Grid.Column>\r\n                        <Segment>\r\n                            <Header as=\"h3\" textAlign=\"center\"> Leaf Attribute information</Header>\r\n                            <Divider/>\r\n                            <Form widths=\"equal\">\r\n                                <Form.Group>\r\n                                    <Form.Field>\r\n                                        <label>Description:</label>\r\n                                        {\r\n                                            \"[id = \" + apiData[\"leafAttribute\"][\"description\"][\"descriptionId\"] + \"] \" + \r\n                                            apiData[\"leafAttribute\"][\"description\"][\"descriptionName\"] + \" (\" + \r\n                                            apiData[\"leafAttribute\"][\"description\"][\"unit\"] + \")\"\r\n                                        }\r\n                                    </Form.Field>\r\n                                    <Form.Field>\r\n                                        <label>Metric Aggregation Operator:</label>\r\n                                        {leafAggregationOptions[apiData[\"leafAttribute\"][\"metricAggregationOperator\"]]}\r\n                                    </Form.Field>\r\n                                    <Form.Field>\r\n                                        <label>Number of Samples:</label>\r\n                                        {apiData[\"leafAttribute\"][\"numSamples\"]}\r\n                                    </Form.Field>\r\n                                    <Form.Field>\r\n                                        <label>Normalization Method:</label>\r\n                                        {apiData[\"leafAttribute\"][\"normalizationMethod\"]}\r\n                                    </Form.Field>\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Field>\r\n                                        <label>Normalization Kind:</label>\r\n                                        {leafNormalizationKindOptions[apiData[\"leafAttribute\"][\"normalizationKind\"]]}\r\n                                    </Form.Field>\r\n                                    <Form.Field>\r\n                                        <label>Minimum Threshold:</label>\r\n                                        {apiData[\"leafAttribute\"][\"minimumThreshold\"]}\r\n                                    </Form.Field>\r\n                                    <Form.Field>\r\n                                        <label>Maximum Threshold:</label>\r\n                                        {apiData[\"leafAttribute\"][\"maximumThreshold\"]}\r\n                                    </Form.Field>\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </Segment>\r\n                    </Grid.Column>\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n            }\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewMetricPage;","import axios from 'axios';\r\nimport Configurations from '../../configurations/Configurations';\r\n\r\nfunction ApiModule() {\r\n  const apiURL = Configurations().API_BASE_URL;\r\n\r\n  //return list of metrics\r\n  function getMetrics(queryParams){\r\n    let endpoint = apiURL + \"getMetrics\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"metrics\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single metric\r\n  function getMetricById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getMetrics/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"metric\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //create a metric\r\n  function createMetric(body){\r\n    let endpoint = apiURL + \"createMetric\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of descriptions\r\n  function getDescriptions(queryParams){\r\n    let endpoint = apiURL + \"getDescriptions\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"descriptions\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of quality models\r\n  function getQualityModels(queryParams, setStateFunction){\r\n    let endpoint = apiURL + \"getQualityModels\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"qualityModels\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single quality model\r\n  function getQualityModelById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getQualityModels/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"qualityModel\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n  \r\n  //create a quality model\r\n  function createQualityModel(body){\r\n    let endpoint = apiURL + \"createQualityModel\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //create a configuration profile for a quality model\r\n  function createConfigurationProfile(body){\r\n    let endpoint = apiURL + \"createConfigurationProfile\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a single quality model\r\n  function getConfigurationProfileById(id, setStateFunction){\r\n    let endpoint = apiURL + \"getConfigurationProfile/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          setStateFunction(res.data[\"configurationProfile\"])\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of currently monitored resources. queryParams specify if the resources to be retrieved should have actions\r\n  //associated in the case of creating a rule ('createRule' param should be set to true). \r\n  function getActiveResources(queryParams){\r\n    let endpoint = apiURL + \"getResources\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"resources\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of weights and metric tree associated to the resource\r\n  function getResourceWeightsAndMetricsTree(id){\r\n    let endpoint = apiURL + \"getResources/\" + id + \"/weightedTree\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return a list of metrics that can be either leaf attribute or \"normal\" metrics exclusively\r\n  function getConfigurationProfileListOfMetrics(configurationProfileId, queryParams){\r\n    let endpoint = apiURL + \"getConfigurationProfile/\" + configurationProfileId + \"/listOfMetrics\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"listOfMetrics\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getResourceData(resourceId, queryParams){\r\n    let endpoint = apiURL + \"getResources/\" + resourceId + \"/data\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"plotData\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getSimulationData(body){\r\n    let endpoint = apiURL + \"simulateData\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.patch(endpoint,body).then((res) => \r\n        {\r\n          return res.data[\"simulationData\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getPlotsConfigs(){\r\n    let endpoint = apiURL + \"getPlotsConfigs\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data[\"plotsConfigs\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function savePlotConfig(body){\r\n    let endpoint = apiURL + \"addPlotConfig\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return error.response\r\n        }\r\n      )\r\n  }\r\n\r\n  function replacePlotConfig(body){\r\n    let endpoint = apiURL + \"replacePlotConfig\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.put(endpoint,body).then((res) => \r\n        {\r\n          return res\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return error.response\r\n        }\r\n      )\r\n  }\r\n\r\n  function deletePlotConfig(id){\r\n    let endpoint = apiURL + \"deletePlotConfig/\" + id\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.delete(endpoint).then((res) => \r\n        {\r\n          return res.status\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return list of rules names\r\n  function getRulesNames(queryParams){\r\n    let endpoint = apiURL + \"getRules\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data[\"rulesNames\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //return deatils of a rule\r\n  function getRuleCode(ruleName){\r\n    let endpoint = apiURL + \"getRules/\" + ruleName\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint).then((res) => \r\n        {\r\n          return res.data[\"ruleDetail\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function removeRule(ruleName){\r\n    let endpoint = apiURL + \"removeRule/\" + ruleName\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.delete(endpoint).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  function getActionsAndConfigsByResource(queryParams){\r\n    let endpoint = apiURL + \"getActions/\"\r\n    //axios.get() returns a promise, thereby when the response is received it is treated\r\n    return axios.get(endpoint,{params: queryParams}).then((res) => \r\n        {\r\n          return res.data\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          return null\r\n        }\r\n      )\r\n  }\r\n\r\n  //create an adaptation rule\r\n  function createRule(body){\r\n    let endpoint = apiURL + \"addRule\"\r\n    //perform post request and return response data, even if response code != 200\r\n    return axios.post(endpoint,body).then((res) => \r\n        {\r\n          return res[\"data\"]\r\n        }\r\n      ).catch(function (error) \r\n        {\r\n          console.log('Error:', error.message);\r\n          console.log('Error contents:', error.response);\r\n          return error.response[\"data\"]\r\n        }\r\n      )\r\n  }\r\n\r\n  return {\r\n    getMetrics,\r\n    getMetricById,\r\n    createMetric,\r\n    getDescriptions,\r\n    getQualityModels,\r\n    getQualityModelById,\r\n    createQualityModel,\r\n    createConfigurationProfile,\r\n    getConfigurationProfileById,\r\n    getActiveResources,\r\n    getResourceWeightsAndMetricsTree,\r\n    getConfigurationProfileListOfMetrics,\r\n    getResourceData,\r\n    getSimulationData,\r\n    getPlotsConfigs,\r\n    savePlotConfig,\r\n    replacePlotConfig,\r\n    deletePlotConfig,\r\n    getRulesNames,\r\n    getRuleCode,\r\n    removeRule,\r\n    getActionsAndConfigsByResource,\r\n    createRule,\r\n  };\r\n\r\n}\r\n\r\nexport default ApiModule","export default function Configurations() {\r\n    const API_IP_ADDRESS = \"192.168.1.68\" //\"10.3.3.68\"\r\n    const API_PORT = \"8080\"\r\n\r\n    const configData = {\r\n        \"API_BASE_URL\": \"http://\" + API_IP_ADDRESS + \":\" + API_PORT + \"/\",\r\n    }\r\n\r\n    return configData;\r\n}","import React, { useEffect, useState } from \"react\";\r\n\r\nfunction TreeLabel(props){\r\n    const [extraLabelForNodes, setExtraLabelForNodes] = useState(\r\n            {\r\n                text: (props[\"text\"].toString().split(\"\\n\")[0])\r\n            }\r\n        )\r\n\r\n    useEffect(()=>{\r\n        //if this is a node's label, it might be needed to add an extra label to represent weights. Thereby, check if this is\r\n        // a node's label and then split received text by \"\\n\". If the size is > 1, it means it has an extra label to render.\r\n        //Then, save both texts, the original and the extra label. In the return statement add extra label if its set on the \r\n        //state variable\r\n        if(props.node === true){\r\n            let labelsText = props.text.split(\"\\n\")\r\n            let extraLabelForNodesTemp = JSON.parse(JSON.stringify(extraLabelForNodes))\r\n            extraLabelForNodesTemp.text = labelsText[0]\r\n            if(labelsText.length > 1){\r\n                extraLabelForNodesTemp.weightLabel = labelsText[1]\r\n            }\r\n            setExtraLabelForNodes(extraLabelForNodesTemp)\r\n        }    \r\n    },[props.text])\r\n    \r\n    //Default customization of <Canvas> tag from reaflow library generated graphically bad labels. The examples were followed and\r\n    //used for edge property => <Edge \r\n    //                    style={{ stroke: 'black', strokeWidth: 2 }}\r\n    //                    label={<Label style={{ fill: 'red', fontWeight: \"900\"}} />}\r\n    //                  />}\r\n    //Thereby html tags generated with the default configs were analyzed, and found out the node graphs were being \r\n    //generated with SVG. \r\n    //Next, props being passed to the label were analyzed to understand the way the library renders the graph. Found \r\n    //out 'transform=\"translate(x,y)\" was used to position the labels.\r\n    //All the information passed to the label is retrieved from the props, which are the 'x' and 'y' assigned positions \r\n    //for the label inside the canvas, and the 'text' which the label presents on the screen.\r\n    //Finally, used svg elements to customize the labels in a own way. \r\n    return props[\"node\"] === false ?\r\n        <g transform={\"translate(\" + props.x + \",\" + props.y + \")\"}> \r\n            <circle fill=\"white\" stroke=\"#4287f5\" strokeWidth=\"2\" r=\"20\" /> \r\n            <text textAnchor=\"middle\" dominantBaseline = \"middle\" fill=\"black\">{props.text}</text>   \r\n        </g>\r\n        : \r\n        (\r\n            <React.Fragment>\r\n                <g transform={\"translate(\" + props.x + \",\" + props.y + \")\"}> \r\n                    <text fill=\"black\">{extraLabelForNodes.text}</text>   \r\n                </g>\r\n                {\r\n                    extraLabelForNodes.weightLabel !== undefined && extraLabelForNodes.weightLabel !== \"\" ?\r\n                    <g transform={\"translate(\" + props.x + \",\" + props.y + \")\"}> \r\n                        <circle cx= {props.x + props.width} cy={props.y + 6*props.height} fill=\"white\" stroke=\"#4287f5\" strokeWidth=\"2\" r=\"20\" />\r\n                        <text \r\n                            textAnchor=\"middle\"\r\n                            dominantBaseline = \"middle\"\r\n                            x={props.x + props.width} \r\n                            y={props.y + 6*props.height} \r\n                            fill=\"black\">\r\n                                {extraLabelForNodes.weightLabel}\r\n                        </text>      \r\n                    </g>\r\n                    :null\r\n                }               \r\n            </React.Fragment>\r\n        ) \r\n}\r\n\r\nexport default TreeLabel;","import { useEffect, useRef, useState, forwardRef, useImperativeHandle } from 'react';\r\nimport { Canvas, Edge, Node, Label } from 'reaflow';\r\nimport {Loader, Button, Icon} from \"semantic-ui-react\"\r\nimport TreeLabel from \"./TreeLabel\"\r\n\r\n\r\nfunction TreeRender (props,ref) {\r\n    const data = props[\"data\"];\r\n    const [nodes, setNodes] = useState([]);\r\n    const [edges, setEdges] = useState([]);\r\n    const [treeReady,setTreeReady] = useState(false);\r\n    const canvasRef = useRef();\r\n    const canvasDivRef = useRef();\r\n\r\n    //If it is to render a configuration profile, show the weights\r\n    const configurationProfile = props[\"configurationProfile\"];\r\n    const preferences = props[\"preferences\"];\r\n    \r\n    //Use of auxiliar variables to hold nodes and edges information while that information is being retrieved\r\n    //Later, once all the information is retrieved, use state variables \"edges\" and \"nodes\" to render \r\n    var nodesaux = [];\r\n    var edgesaux = [];\r\n    \r\n    //function that allows formating received data into the format requested by reaflow (tree rendering library)\r\n    function processData(parent){\r\n\r\n      //add current node (which is the parent) to list of nodes\r\n      let nodeToAdd = {\r\n        id: parent[\"metricId\"].toString(),\r\n        text: parent[\"metricName\"]\r\n      }\r\n      nodesaux.push(nodeToAdd);\r\n\r\n      //iterate over each child of parent node, add edge information and recursively call this function \"processData\"\r\n      //for each child to repeat the process\r\n      for(let child of parent[\"childMetrics\"]){\r\n        let edgeToAdd = {\r\n          id: parent[\"metricId\"].toString() + child[\"metricId\"].toString(),\r\n          from: child[\"metricId\"].toString(),\r\n          to: parent[\"metricId\"].toString(),\r\n        }\r\n        if(configurationProfile){\r\n          edgeToAdd.text = preferences.find(preference => preference.metricId === child.metricId).weight;\r\n        }\r\n        edgesaux.push(edgeToAdd)\r\n        processData(child)\r\n      }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        //Once the component is rendered, deal with the transformation of the format of the data received from the API \r\n        //into the format needed by the tree library \r\n        processData(data)\r\n        if(configurationProfile){\r\n          let rootNode = nodesaux.find(node => parseInt(node.id) === data.metricId)\r\n          rootNode.text = rootNode.text.split(\"\\n\")[0] + \"\\n\" + \r\n            preferences.find(preference => preference.metricId === parseInt(rootNode.id)).weight;\r\n        }\r\n        //use state to set and render processed nodes and edges information  \r\n        setNodes(nodesaux)\r\n        setEdges(edgesaux)\r\n        setTreeReady(true)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[data]);\r\n\r\n    useEffect(() => {\r\n      //if the Tree has been rendered, the div is no longer undefined and thereby wheel event can be added\r\n      // to later allow CRTL + MOUSEWHEEl to zoom in/out on the canvas, if buttons aren't wished to be used\r\n      if(canvasDivRef.current !== undefined){\r\n        canvasDivRef.current.addEventListener('wheel', mouseWheelHandler,{passive:false});\r\n      }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[treeReady]);\r\n    \r\n    const zoomIn = () => {\r\n      canvasRef.current.zoomIn()\r\n    }\r\n\r\n    const zoomOut = () => {\r\n      canvasRef.current.zoomOut()\r\n    }\r\n\r\n    const fitCanvas = () => {\r\n      canvasRef.current.fitCanvas()\r\n    }\r\n\r\n    function mouseWheelHandler(event){\r\n      if(event.ctrlKey === true){\r\n        event.preventDefault();\r\n        //Wheel down\r\n        if(event.wheelDelta < 0) {\r\n            zoomOut()\r\n        }\r\n        //Wheel up\r\n        else {\r\n          zoomIn()\r\n        }\r\n      }\r\n    }\r\n\r\n    function updateWeightsHandler(metricIdToUpdateWeight,weightToApply){\r\n      let newEdges = JSON.parse(JSON.stringify(edges))\r\n      let foundEdge = false\r\n      for(let edgeInfo of newEdges){\r\n        if(edgeInfo.id.endsWith(metricIdToUpdateWeight)){\r\n          foundEdge = true\r\n          edgeInfo.text = weightToApply\r\n          setEdges(newEdges)\r\n          fitCanvas()\r\n          break;\r\n        }\r\n      }\r\n      //didn't found Edge, which means the weight its being applied on the root node. Thereby, add an extra label to\r\n      //show the node's weight assigned\r\n      if(!foundEdge){\r\n        //copy state variable and find the node to which the extra label will be added\r\n        let newNodes = JSON.parse(JSON.stringify(nodes))\r\n        let nodeRef = newNodes.find(node => parseInt(node.id) === metricIdToUpdateWeight)\r\n        //after finding the node split its display text by '\\n' and take the 1st word which is the original text. Then, add the\r\n        //text of the weight to show on the extra label. This split by '\\n' is needed as multiple changes would add multiple\r\n        //'\\n' to the text and that would render multiple extra labels\r\n        nodeRef.text = nodeRef.text.split(\"\\n\")[0] + \"\\n\" + weightToApply\r\n        setNodes(newNodes)\r\n      }\r\n    }\r\n\r\n    //Needed to expose tree update functions to outside components\r\n    useImperativeHandle(ref, () => ({\r\n      updateWeightsHandler\r\n    }));\r\n\r\n    //Followed the demos and docs of reaflow libray at https://reaflow.dev/?path=/story/docs-getting-started-components--page\r\n    return (\r\n      treeReady === true ?\r\n      <div>\r\n        <div>\r\n          <p style={{marginBottom:\"5px\"}} align=\"right\">\r\n            <Button icon color='blue' onClick={zoomIn}> \r\n              <Icon name='zoom-in'/>\r\n            </Button>\r\n            <Button icon color='blue' onClick={zoomOut}> \r\n              <Icon name='zoom-out'/>\r\n            </Button>\r\n          </p>\r\n        </div>  \r\n        <div ref={canvasDivRef}>\r\n          <Canvas\r\n              disabled={true}\r\n              arrow={null}\r\n              height={ props[\"height\"]}\r\n              width={ props[\"width\"]}\r\n              nodes={nodes}\r\n              edges={edges}\r\n              readonly = {true}\r\n              animated = {false}\r\n              direction= \"UP\"\r\n              ref= {canvasRef}\r\n              fit = {true}\r\n              minZoom = {-0.9}\r\n              zoomable = {false}\r\n              node={\r\n                <Node\r\n                  style={{ stroke: 'black', fill: '#ffe6cc', strokeWidth: 3}}\r\n                  label={<TreeLabel node={true}/>}\r\n                />\r\n              }\r\n              edge={<Edge \r\n                      style={{ stroke: 'black', strokeWidth: 2 }}\r\n                      label={<TreeLabel node={false}/>}\r\n                    />}\r\n          />\r\n          {/* NODE LABEL:            label={<Label style={{ fill: 'black', fontWeight: \"900\"}}>*/ }\r\n        </div> \r\n      </div>: <Loader active inline='centered'> Constructing tree </Loader>\r\n    )\r\n}\r\n\r\n//forwardRef necessary so that methods can be invoked and state variables be accessed\r\nexport default forwardRef(TreeRender);"],"names":["useState","apiData","setAPIData","metricId","useParams","useEffect","ApiModule","getMetricById","console","log","centered","width","section","horizontal","as","textAlign","active","inline","stackable","columns","widths","color","size","name","height","data","apiURL","getMetrics","queryParams","axios","params","then","res","catch","error","message","id","setStateFunction","endpoint","createMetric","body","response","getDescriptions","getQualityModels","getQualityModelById","createQualityModel","createConfigurationProfile","getConfigurationProfileById","getActiveResources","getResourceWeightsAndMetricsTree","getConfigurationProfileListOfMetrics","configurationProfileId","getResourceData","resourceId","getSimulationData","getPlotsConfigs","savePlotConfig","replacePlotConfig","deletePlotConfig","status","getRulesNames","getRuleCode","ruleName","removeRule","getActionsAndConfigsByResource","createRule","props","text","toString","split","extraLabelForNodes","setExtraLabelForNodes","node","labelsText","extraLabelForNodesTemp","JSON","parse","stringify","length","weightLabel","transform","x","y","fill","stroke","strokeWidth","r","textAnchor","dominantBaseline","undefined","cx","cy","TreeRender","ref","nodes","setNodes","edges","setEdges","treeReady","setTreeReady","canvasRef","useRef","canvasDivRef","configurationProfile","preferences","nodesaux","edgesaux","processData","parent","nodeToAdd","push","child","edgeToAdd","from","to","find","preference","weight","rootNode","parseInt","current","addEventListener","mouseWheelHandler","passive","zoomIn","zoomOut","event","ctrlKey","preventDefault","wheelDelta","updateWeightsHandler","metricIdToUpdateWeight","weightToApply","newEdges","foundEdge","edgeInfo","endsWith","fitCanvas","newNodes","nodeRef","useImperativeHandle","style","marginBottom","align","Button","icon","onClick","Icon","Canvas","disabled","arrow","readonly","animated","direction","fit","minZoom","zoomable","Node","label","edge","Edge","Loader","forwardRef"],"sourceRoot":""}